/*
 * 
 * Обработка событий и логическая часть главного окна.
 * В классе этого окна хранится также вся информация о модели - 
 * слои, объекты, система наблюдений, области инверсии и т.д.
 * 
 */
//#define _PROTECTION_
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Collections.ObjectModel;
using System.Windows.Controls.Primitives;
using System.ComponentModel;
using GLContex = Geology.OpenGL.OpenGL;
using Geology.Objects;
using System.IO;
using Geology.CalculatorsSettings;
using System.Globalization;
using System.Threading;
using Observing;
using System.Collections.Specialized;
using Geology.Objects.GeoModel;


namespace Geology
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    /// 
    public class VisibleLayers3D : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(String property)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(property));
            }
        }
        public VisibleLayers3D()
        {
            Vis = false;
        }
        bool _Vis;
        public bool Vis { get { return _Vis; } set { _Vis = value; OnPropertyChanged("Vis"); } }

        public int Write(ref StreamWriter outputFile)
        {
            try
            {
                outputFile.WriteLine(Vis.ToString());
                return 0;
            }
            catch (Exception ex)
            {
                return 1;
            }
        }
        public int Read(ref StreamReader inputFile, double fileVersion)
        {
            try
            {
                String buffer;
                if (fileVersion >= 1.0)
                {
                    buffer = inputFile.ReadLine(); Vis = bool.Parse(buffer);
                }

                return 0;
            }
            catch (Exception ex)
            {
                return 1;
            }
        }
    }

    public enum SelectionApplicationModifiers
    {
        All,
        Selected
    }
    public enum CheckBoxSwitchType
    {
        On,
        Off,
        Toggle
    }
    public class ViewPortUpdater
    {
        public DrawWindow.CObject3DDraw2D XYOpenGlWindow;
        public DrawWindow.CObject3DDraw2D XZOpenGlWindow;
        public DrawWindow.CObject3DDraw2D YZOpenGlWindow;
        public DrawWindow.CView3D View3DWindow;
        public ViewPortUpdater()
        {
            XYOpenGlWindow = null;
            XZOpenGlWindow = null;
            YZOpenGlWindow = null;
            View3DWindow = null;
        }
        public void UpdateViewports()
        {
            if (XYOpenGlWindow != null) XYOpenGlWindow.Invalidate();
            if (XZOpenGlWindow != null) XZOpenGlWindow.Invalidate();
            if (YZOpenGlWindow != null) YZOpenGlWindow.Invalidate();
            if (View3DWindow != null) View3DWindow.Invalidate();
        }
    }
    public partial class MainWindow : Window
    {
        public ObservableCollection<Objects.CGeoLayer> layers;
        public ObservableCollection<Objects.CGeoObject> objects;
        public Observing.ObservingSystem observingSystem;
        public PostProcessing.PostProcessingSystem postProcessingSystem;
        public List<Objects.CDep> depsLayer;
        public List<Objects.CDep> depsObject;
        public List<Objects.CDep> depsEmbryo;
        public List<Objects.CDep> depsResultsEmbryo;
        public GeoModelSimpleRegCollection modelCollection;
        
        Tasks.TimeInfo timeInfo;
        public SettingsStore settingsStore;
        public double horizon;
        Inversion.InversionSystem inverseSystem;
        private int tmpRowIndex;
        private int tmpInversionPlaneSelected;
        private int tmpInversionAreaSelected;
        private int tmpInversionResultsPlaneSelected;
        private int tmpInversionResultsIterationSelected;
        public List<Tasks.SetDouble1> frequencies;
        String modelName;
        public int prepareToDelete = -1;
        public int beforeDelete = -1;
        public int influenceTaskNumber = -1;

        //    Geology.Objects.Spline splineMy;

        // CTriangulation triang;
        VisibleLayers3D visibleLayers;
        private String currentSaveFileName;
        private String lastDirectory;
        private String lastCalculationsDirectory;
        public ViewPortUpdater viewPortUpdater;

        private String LastSaveOpenDirectory
        {
            get { return lastDirectory; }
            set { lastDirectory = value; FilesWorking.WriteSingleStringFile("OpenSaveDir", LastSaveOpenDirectory); }
        }
        private String LastCalculationsDirectory
        {
            get { return lastCalculationsDirectory; }
            set { lastCalculationsDirectory = value; FilesWorking.WriteSingleStringFile("LastCalcDir", lastCalculationsDirectory); }
        }
        private String ModelName
        {
            get { return modelName; }
            set { modelName = value; this.Title = "Geology v." + FilesWorking.version.ToString("0.00") + " - " + modelName; }
        }

        private String CalculationsDirectoryVP;
        private String CalculationsDirectorySP;
        private String CalculationsDirectoryStationar;
        private String CalculationsDirectoryHarmonic;
        private String CalculationsDirectoryInversionGeometry;
        private String CalculationsDirectoryInfluence;
        private String CalculationsDirectoryInversionCell;

        private bool CalculationsStopVP;
        private bool CalculationsStopSP;
        private bool CalculationsStopStationar;
        private bool CalculationsStopHarmonic;
        private bool CalculationsStopInversionGeometry;
        private bool CalculationsStopInfluence;
        private bool CalculationsStopInversionCell;

        private bool CalculationLaunchedVP;
        private bool CalculationLaunchedSP;
        private bool CalculationLaunchedStationar;
        private bool CalculationLaunchedHarmonic;
        private bool CalculationLaunchedInversionGeometry;
        private bool CalculationLaunchedInfluence;
        private bool CalculationLaunchedInversionCell;
        private bool CalculationLaunchedTaskInfluence;

        Tasks.TaskTypes calculationRegime;
        Tasks.SourceType sourceType;
        Observing.ObservingGeneratorsTypes sourceTypeInversion;
        Tasks.SourceType sourceTypeCell;

        private Objects.GeoModel.GeoModel geoModel;
        private ObservableCollection<Objects.SaturationModel.SaturationVolumeStack> stacks;
        public class DataGridMinMaxObDat
        {
            public DataGridMinMaxObDat()
            {
                axisName = "";
                minValue = maxValue = 0;
            }
            public string axisName { get; set; }
            public double minValue { get; set; }
            public double maxValue { get; set; }

            public int Write(ref StreamWriter outputFile)
            {
                try
                {
                    outputFile.WriteLine(axisName);
                    outputFile.WriteLine(minValue.ToString());
                    outputFile.WriteLine(maxValue.ToString());
                    return 0;
                }
                catch (Exception ex)
                {
                    return 1;
                }
            }
            public int Read(ref StreamReader inputFile, double fileVersion)
            {
                try
                {
                    String buffer;
                    if (fileVersion >= 1.0)
                    {
                        buffer = inputFile.ReadLine(); axisName = buffer;
                        buffer = inputFile.ReadLine(); minValue = double.Parse(buffer);
                        buffer = inputFile.ReadLine(); maxValue = double.Parse(buffer);
                    }

                    return 0;
                }
                catch (Exception ex)
                {
                    return 1;
                }
            }
        }

        double[] GlobalBoundingBox;
        void SetNewBoundingBoxAllView()
        {
            graphViewerControl.XYOpenGlWindow.ChangeBoundingBox(GlobalBoundingBox); //////////////////////////////
            XYOpenGlWindow.ChangeBoundingBox(GlobalBoundingBox);
            XZOpenGlWindow.ChangeBoundingBox(GlobalBoundingBox);
            YZOpenGlWindow.ChangeBoundingBox(GlobalBoundingBox);
            View3DWindow.ChangeDrawBox(GlobalBoundingBox);
        }
        void RecalculateBoundingBox(int numObject = -1, bool changeBoundingBox = false)
        {
            double minx = Double.MaxValue,
                miny = Double.MaxValue,
                minz = Double.MaxValue,
                maxx = Double.MinValue,
                maxy = Double.MinValue,
                maxz = Double.MinValue;
            if (numObject == -1)
                foreach (var p in objects)
                {
                    if (p.parallel[0].Min < minx)
                        minx = p.parallel[0].Min;

                    if (p.parallel[0].Max > maxx)
                        maxx = p.parallel[0].Max;

                    if (p.parallel[1].Min < miny)
                        miny = p.parallel[1].Min;

                    if (p.parallel[1].Max > maxy)
                        maxy = p.parallel[1].Max;

                    if (p.parallel[2].Min < minz)
                        minz = p.parallel[2].Min;

                    if (p.parallel[2].Max > maxz)
                        maxz = p.parallel[2].Max;

                }
            else
            {
                var p = objects[numObject];
                if (p.parallel[0].Min < GlobalBoundingBox[0])
                    GlobalBoundingBox[0] = p.parallel[0].Min;

                if (p.parallel[0].Max > GlobalBoundingBox[1])
                    GlobalBoundingBox[1] = p.parallel[0].Max;

                if (p.parallel[1].Min < GlobalBoundingBox[2])
                    GlobalBoundingBox[2] = p.parallel[1].Min;

                if (p.parallel[1].Max > GlobalBoundingBox[3])
                    GlobalBoundingBox[3] = p.parallel[1].Max;

                if (p.parallel[2].Min < GlobalBoundingBox[4])
                    GlobalBoundingBox[4] = p.parallel[2].Min;

                if (p.parallel[2].Max > GlobalBoundingBox[5])
                    GlobalBoundingBox[5] = p.parallel[2].Max;
                SetNewBoundingBoxAllView();
                return;
            }

            if (changeBoundingBox == true || (minx < GlobalBoundingBox[0] || maxx > GlobalBoundingBox[1] || miny < GlobalBoundingBox[2] || maxy > GlobalBoundingBox[3] || minz < GlobalBoundingBox[4] || maxz > GlobalBoundingBox[5]))
            {
                GlobalBoundingBox[0] = minx;
                GlobalBoundingBox[2] = miny;
                GlobalBoundingBox[4] = minz;
                GlobalBoundingBox[1] = maxx;
                GlobalBoundingBox[3] = maxy;
                GlobalBoundingBox[5] = maxz;
                SetNewBoundingBoxAllView();
            }
        }
        ObservableCollection<DataGridMinMaxObDat> dataBB = new ObservableCollection<DataGridMinMaxObDat>();
        void Update2DView()
        {
            if (graphViewerControl != null && graphViewerControl.XYOpenGlWindow != null) graphViewerControl.XYOpenGlWindow.Invalidate();             //////////////////////////////
            if (XYOpenGlWindow != null) XYOpenGlWindow.Invalidate();
            if (YZOpenGlWindow != null) YZOpenGlWindow.Invalidate();
            if (XZOpenGlWindow != null) XZOpenGlWindow.Invalidate();
        }
        void Update3DView()
        {
            if (View3DWindow != null) View3DWindow.Invalidate();
        }
        public void UpdateAllView()
        {
            Update2DView();
            Update3DView();
        }

        public class ObjectClass
        {
            public int position = 0;
            public ObjectClass(int b)
            {
                position = b;
            }
        }

        public class ModelClass
        {
            private int index;
            private ObjectClass objectClassLink;
            private bool selected;

            public int Index
            {
                get { return index; }
                set { index = value; }
            }
            public int Position
            {
                get { return objectClassLink.position; }
                set { objectClassLink.position = value; }
            }
            public bool Selected
            {
                get { return selected; }
                set { selected = value; }
            }

            public ModelClass(ObjectClass bb)
            {
                index = 0;
                objectClassLink = bb; // link
            }
        }

        public class Store
        {
            private ObservableCollection<ObjectClass> observingPosition;
            private ObservableCollection<ModelClass> observingPositionModel = new ObservableCollection<ModelClass>();

            public ObservableCollection<ModelClass> ObservingPositionModel
            {
                get { return observingPositionModel; }
            }
            public ObservableCollection<ObjectClass> ObservingPosition
            {
                get { return observingPosition; }
                set
                {
                    if (observingPosition != value)
                    {
                        if (observingPosition == null) // First Set
                        {
                            if (value != null)
                            {
                                ObservingPosition = value;
                                observingPosition.CollectionChanged += (sender, e) =>
                                {
                                    observingPositionModel.Clear();
                                    foreach (var elem in observingPosition)
                                        observingPositionModel.Add(new ModelClass(elem));
                                };
                            }
                        }
                        else
                        {
                            observingPosition = value;
                        }
                    }
                }
            }

            public Store()
            {
            }
        }

        class A
        {
            private ObjectClass val = new ObjectClass(0);
            public ObjectClass Val
            {
                get { return val; }
                set
                {
                    if (val != value)
                    {
                        val = value;
                    }
                }
            }
            public A() { }
        }


        public MainWindow()
        {
            if (false)
            {
                ObservableCollection<ObjectClass> test1 = new ObservableCollection<ObjectClass>();
                test1.Add(new ObjectClass(1));
                test1.Add(new ObjectClass(2));

                test1.CollectionChanged += (sender, e) =>
                {
                    Console.WriteLine("");
                };

                test1[0].position = 3;



                var stor = new Store();

                ObservableCollection<ModelClass> list;
                list = stor.ObservingPositionModel;
                list.CollectionChanged += (sender, e) =>
                {
                    Console.WriteLine("1");
                };

                stor.ObservingPosition = new ObservableCollection<ObjectClass>();
                stor.ObservingPosition.Add(new ObjectClass(1));
                stor.ObservingPosition.Add(new ObjectClass(2));
                stor.ObservingPosition.Add(new ObjectClass(3));

                stor.ObservingPosition.RemoveAt(1);


                stor.ObservingPositionModel[0].Position = 404;

                var b1 = new ObjectClass(1);

                var A = new A();
                A.Val = b1;

                b1.position = 0;
            }


            Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");

#if _PROTECTION_
            if (Utilities.LittleTools.ExecuteExe("C:/Geology/Protector.exe", "", ".") != 9121990)
                this.Close();
#endif

            frequencies = new List<Tasks.SetDouble1>();
            settingsStore = new SettingsStore();
            visibleLayers = new VisibleLayers3D();
            GlobalBoundingBox = new double[6] { -4000, 4000, -4000, 4000, -4000, 4000 };
            layers = new ObservableCollection<Objects.CGeoLayer>();
            objects = new ObservableCollection<Objects.CGeoObject>();
            depsLayer = new List<Objects.CDep>() { new Objects.CDep(0, 1), new Objects.CDep(1, 2), new Objects.CDep(2, 3) };
            depsObject = new List<Objects.CDep>() { new Objects.CDep(0, 1), new Objects.CDep(1, 2), new Objects.CDep(2, 3) };
            depsEmbryo = new List<Objects.CDep>() { new Objects.CDep(0, 1), new Objects.CDep(1, 2), new Objects.CDep(2, 3) };
            depsResultsEmbryo = new List<Objects.CDep>() { new Objects.CDep(0, 1), new Objects.CDep(1, 2), new Objects.CDep(2, 3) };
            inverseSystem = new Inversion.InversionSystem();


            observingSystem = new Observing.ObservingSystem();
            Observing.ObservingSettings.X0 = 0.0;
            Observing.ObservingSettings.Y0 = 0.0;
            Observing.ObservingSettings.Z0 = 0.0;
            Observing.ObservingSettings.Angle = 0.0;
            tmpInversionPlaneSelected = -1;
            tmpInversionAreaSelected = -1;
            tmpInversionResultsPlaneSelected = -1;
            tmpInversionResultsIterationSelected = -1;

            postProcessingSystem = new PostProcessing.PostProcessingSystem();


            InitializeComponent();


            stacks = new ObservableCollection<Objects.SaturationModel.SaturationVolumeStack>();
            geoModel = new Objects.GeoModel.GeoModel();
            timeInfo = new Tasks.TimeInfo();
            ListBoxImpulse.ItemsSource = timeInfo.impulses;
            //  layers.Add(new Objects.CLayer());
            //  layers.Add(new Objects.CLayer());
            DGCBDepsLayers.ItemsSource = depsLayer;
            DGCBDepsObjects.ItemsSource = depsObject;
            DGCBDepsEmbryos.ItemsSource = depsEmbryo;
            DGCBDepsResultsEmbryos.ItemsSource = depsEmbryo;
            DGLayers.ItemsSource = layers;
            DGObjects.ItemsSource = objects;
            visibleLayers.Vis = true;
            CBVisibleLayers.DataContext = visibleLayers;
            DataGridGroups.ItemsSource = observingSystem.groups;
            DataGridObservingSystem.ItemsSource = observingSystem.profiles;
            DataGridTimes.ItemsSource = timeInfo.meshTimeUser.times;
            DataGridFrequencies.ItemsSource = frequencies;
            ListBoxInversionAreas.ItemsSource = inverseSystem.inversionAreas;
            ListBoxInversionResultsIterations.ItemsSource = inverseSystem.inversionResults.iterationResults;
            inverseSystem.inversionResults.ListBoxToUpdate = ListBoxInversionResultsIterations;
            DataGridSections.ItemsSource = postProcessingSystem.sections;
            ListBoxmeshes.ItemsSource = postProcessingSystem.meshes;
            DGStacks.ItemsSource = stacks;
            modelCollection = new GeoModelSimpleRegCollection();
            ListBoxModels.ItemsSource = modelCollection.models;

            stacks.CollectionChanged += this.OnSaturationVolumeStacksChanged;


            TextBoxX0.Text = Observing.ObservingSettings.X0.ToString();
            TextBoxY0.Text = Observing.ObservingSettings.Y0.ToString();
            TextBoxXR.Text = Observing.ObservingSettings.XR.ToString();
            TextBoxYR.Text = Observing.ObservingSettings.YR.ToString();
            TextBoxZ0.Text = Observing.ObservingSettings.Z0.ToString();
            TextBoxAngle.Text = Observing.ObservingSettings.Angle.ToString();
            TextBoxRecieverPointSize.Text = Observing.ObservingSettings.recieverPointSize.ToString();
            // layers[0].Rel = true;
            //  topLeftWindow = new DrawWindow.CView2D();

            CalculationLaunchedVP = false;
            CalculationLaunchedSP = false;
            CalculationLaunchedStationar = false;
            CalculationLaunchedHarmonic = false;
            CalculationLaunchedInversionGeometry = false;
            CalculationLaunchedInfluence = false;
            CalculationLaunchedInversionCell = false;
            CalculationLaunchedTaskInfluence = false;

            //XYOpenGlWindow.SetMainRef(this); ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// ????????????????????????????
            //XZOpenGlWindow.SetMainRef(this);
            //YZOpenGlWindow.SetMainRef(this);

            // graphViewerControl.comboBoxTime.ItemsSource = /*new List<double> { 1, 2, 3 };*/ timeInfo.meshTimeUser.times;
            graphViewerControl.times = timeInfo.meshTimeUser.times;


            ////////////////////////////////////////////
            graphViewerControl.XYOpenGlWindow.setRotateAndNameAxes(Geology.DrawWindow.CObject3DDraw2D.EPlaneType.XY);
            XYOpenGlWindow.setRotateAndNameAxes(Geology.DrawWindow.CObject3DDraw2D.EPlaneType.XY); //XY
            XZOpenGlWindow.setRotateAndNameAxes(Geology.DrawWindow.CObject3DDraw2D.EPlaneType.XZ); //XZ
            YZOpenGlWindow.setRotateAndNameAxes(Geology.DrawWindow.CObject3DDraw2D.EPlaneType.YZ); //YZ

            ////////////////////////////////////////////
            graphViewerControl.XYOpenGlWindow.SetObjects(layers, objects, visibleLayers, ref observingSystem, inverseSystem, postProcessingSystem, geoModel); graphViewerControl.XYOpenGlWindow.horizon = horizon;
            XYOpenGlWindow.SetObjects(layers, objects, visibleLayers, ref observingSystem, inverseSystem, postProcessingSystem, geoModel); XYOpenGlWindow.horizon = horizon;
            XZOpenGlWindow.SetObjects(layers, objects, visibleLayers, ref observingSystem, inverseSystem, postProcessingSystem, geoModel); XZOpenGlWindow.horizon = horizon;
            YZOpenGlWindow.SetObjects(layers, objects, visibleLayers, ref observingSystem, inverseSystem, postProcessingSystem, geoModel); YZOpenGlWindow.horizon = horizon;
            ////////////////////////////////////////////
            graphViewerControl.XYOpenGlWindow.ChangeOrtho(GlobalBoundingBox);
            XYOpenGlWindow.ChangeOrtho(GlobalBoundingBox);
            XZOpenGlWindow.ChangeOrtho(GlobalBoundingBox);
            YZOpenGlWindow.ChangeOrtho(GlobalBoundingBox);
            ////////////////////////////////////////////
            graphViewerControl.XYOpenGlWindow.ChangeBoundingBox(GlobalBoundingBox);
            XYOpenGlWindow.ChangeBoundingBox(GlobalBoundingBox);
            XZOpenGlWindow.ChangeBoundingBox(GlobalBoundingBox);
            YZOpenGlWindow.ChangeBoundingBox(GlobalBoundingBox);


            //GraphOpenGlWindow1.ChangeOrtho(GlobalBoundingBox);
            //GraphOpenGlWindow2.ChangeOrtho(GlobalBoundingBox);
            //GraphOpenGlWindow1.ChangeBoundingBox(GlobalBoundingBox);
            //GraphOpenGlWindow2.ChangeBoundingBox(GlobalBoundingBox);


            View3DWindow.SetMainRef(this);
            View3DWindow.ChangeDrawBox(GlobalBoundingBox);
            View3DWindow.SetObjects(layers, objects, visibleLayers, ref observingSystem, inverseSystem, postProcessingSystem, geoModel);
            dataBB.Add(new DataGridMinMaxObDat() { axisName = "x", minValue = GlobalBoundingBox[0], maxValue = GlobalBoundingBox[1] });
            dataBB.Add(new DataGridMinMaxObDat() { axisName = "y", minValue = GlobalBoundingBox[2], maxValue = GlobalBoundingBox[3] });
            dataBB.Add(new DataGridMinMaxObDat() { axisName = "z", minValue = GlobalBoundingBox[4], maxValue = GlobalBoundingBox[5] });
            //  dataGridMinMaxObject.ItemsSource = data;
            dataGridBoundingBox.ItemsSource = dataBB;
            //   splineMy = new Objects.Spline(@"C:\Users\kurskij.2012\work\Geology\spline\spline.1");
            //       View3DWindow.SetSpline(splineMy);

            //GraphOpenGlWindow1.SetMainRef(this);
            //GraphOpenGlWindow2.SetMainRef(this);


            viewPortUpdater = new ViewPortUpdater();
            viewPortUpdater.View3DWindow = View3DWindow;
            viewPortUpdater.XYOpenGlWindow = XYOpenGlWindow;
            viewPortUpdater.XZOpenGlWindow = XZOpenGlWindow;
            viewPortUpdater.YZOpenGlWindow = YZOpenGlWindow;

            PalettesControlModels.viewPortUpdater = viewPortUpdater;

            GlobalBoundingBox[0] = -10000;
            GlobalBoundingBox[1] = 10000;
            GlobalBoundingBox[2] = -10000;
            GlobalBoundingBox[3] = 10000;
            GlobalBoundingBox[4] = -10000;
            GlobalBoundingBox[5] = 10000;
            dataBB[0].minValue = GlobalBoundingBox[0];
            dataBB[0].maxValue = GlobalBoundingBox[1];
            dataBB[1].minValue = GlobalBoundingBox[2];
            dataBB[1].maxValue = GlobalBoundingBox[3];
            dataBB[2].minValue = GlobalBoundingBox[4];
            dataBB[2].maxValue = GlobalBoundingBox[5];
            SetNewBoundingBoxAllView();


            Title = "Geology v." + FilesWorking.version.ToString("0.00");
            currentSaveFileName = "";
            String buffer = "";
            if (FilesWorking.ReadSingleStringFile("OpenSaveDir", ref buffer) != 0)
                LastSaveOpenDirectory = Directory.GetCurrentDirectory();
            else
                LastSaveOpenDirectory = buffer;

            if (FilesWorking.ReadSingleStringFile("LastCalcDir", ref buffer) != 0)
                LastCalculationsDirectory = Directory.GetCurrentDirectory();
            else
                LastCalculationsDirectory = buffer;

            ComboBoxObservingSystemType.Items.Add("GroupsData");
            ComboBoxObservingSystemType.Items.Add("CSV");
            ComboBoxObservingSystemType.Items.Add("DNME_marine");
            ComboBoxObservingSystemType.SelectedIndex = 1;

            ComboBoxGroupingMethod.Items.Add("Clear");
            ComboBoxGroupingMethod.Items.Add("Regular");
            ComboBoxGroupingMethod.SelectedIndex = 1;

            ComboBoxColeColePreset.Items.Add("2");
            ComboBoxColeColePreset.Items.Add("4");
            ComboBoxColeColePreset.Items.Add("8");
            ComboBoxColeColePreset.Items.Add("25");
            ComboBoxColeColePreset.SelectedIndex = 0;

            ComboBoxSourceType.Items.Add("Line");
            ComboBoxSourceType.Items.Add("Circle loop");
            ComboBoxSourceType.Items.Add("Polyline loop");
            ComboBoxSourceType.SelectedIndex = 0;


            ComboBoxCalculationRegime.Items.Add(Tasks.TasksUtilities.GetTaskType(Tasks.TaskTypes.IP));
            ComboBoxCalculationRegime.Items.Add(Tasks.TasksUtilities.GetTaskType(Tasks.TaskTypes.Stationar));
            ComboBoxCalculationRegime.Items.Add(Tasks.TasksUtilities.GetTaskType(Tasks.TaskTypes.EM));
            ComboBoxCalculationRegime.Items.Add(Tasks.TasksUtilities.GetTaskType(Tasks.TaskTypes.EMIP));
            ComboBoxCalculationRegime.Items.Add(Tasks.TasksUtilities.GetTaskType(Tasks.TaskTypes.Harmonic));
            ComboBoxCalculationRegime.Items.Add(Tasks.TasksUtilities.GetTaskType(Tasks.TaskTypes.ColeCole));
            ComboBoxCalculationRegime.SelectedIndex = 0;

            ComboBoxExperimentalCurvesType.Items.Add("ResultsExp");
            ComboBoxExperimentalCurvesType.Items.Add("Binary ResultsExp");
            ComboBoxExperimentalCurvesType.SelectedIndex = 1;

            ComboBoxModelsCurrentField.Items.Add(PostProcessing.FieldTypes.None);
            ComboBoxModelsCurrentField.Items.Add(PostProcessing.FieldTypes.Material);
            ComboBoxModelsCurrentField.Items.Add(PostProcessing.FieldTypes.RhoH);
            ComboBoxModelsCurrentField.Items.Add(PostProcessing.FieldTypes.RhoV);
            ComboBoxModelsCurrentField.Items.Add(PostProcessing.FieldTypes.SigmaH);
            ComboBoxModelsCurrentField.Items.Add(PostProcessing.FieldTypes.SigmaV);
            ComboBoxModelsCurrentField.Items.Add(PostProcessing.FieldTypes.Alpha);
            ComboBoxModelsCurrentField.Items.Add(PostProcessing.FieldTypes.Beta);
            ComboBoxModelsCurrentField.Items.Add(PostProcessing.FieldTypes.Tau);
            ComboBoxModelsCurrentField.Items.Add(PostProcessing.FieldTypes.C);

            sourceTypeCell = Tasks.SourceType.Line;

            StatusBarVP.Text = "Status: Ready";
            StatusBarSP.Text = "Status: Ready";
            StatusBarStationar.Text = "Status: Ready";
            StatusBarHarmonic.Text = "Status: Ready";
            StatusBarInversionGeometry.Text = "Status: Ready";
            StatusBarInversionCell.Text = "Status: Ready";

            ModelName = "UnsavedModel";

            ComboBoxRewriteCurvesModeHarm.Items.Add("None");
            ComboBoxRewriteCurvesModeHarm.Items.Add("On place from AB");
            ComboBoxRewriteCurvesModeHarm.Items.Add("On profile by places");
            ComboBoxRewriteCurvesModeHarm.SelectedIndex = 0;

            ComboBoxRewriteCurvesModeStat.Items.Add("None");
            ComboBoxRewriteCurvesModeStat.Items.Add("On place from AB");
            ComboBoxRewriteCurvesModeStat.Items.Add("On profile by places");
            ComboBoxRewriteCurvesModeStat.SelectedIndex = 0;

            ComboBoxRewriteCurvesModeSP.Items.Add("None");
            ComboBoxRewriteCurvesModeSP.Items.Add("On place from AB");
            ComboBoxRewriteCurvesModeSP.Items.Add("On profile by places");
            ComboBoxRewriteCurvesModeSP.SelectedIndex = 0;

            ComboBoxCalculateBeta.Items.Add("None");
            ComboBoxCalculateBeta.Items.Add("IP");
            ComboBoxCalculateBeta.Items.Add("ColeCole");
            ComboBoxCalculateBeta.SelectedIndex = 0;


            DataGridEmbryos.CanUserDeleteRows = true;

            ComboBoxEMSourceType.Items.Add(Observing.ObservingGeneratorsTypes.Line);
            ComboBoxEMSourceType.Items.Add(Observing.ObservingGeneratorsTypes.Loop);
            ComboBoxEMSourceType.Items.Add(Observing.ObservingGeneratorsTypes.LoopPoly);
            ComboBoxEMSourceType.SelectedIndex = 0;

            ComboBoxFieldType.Items.Add(PostProcessing.FieldTypes.None);
            ComboBoxFieldType.Items.Add(PostProcessing.FieldTypes.Material);
            ComboBoxFieldType.Items.Add(PostProcessing.FieldTypes.SigmaH);
            ComboBoxFieldType.Items.Add(PostProcessing.FieldTypes.SigmaV);
            ComboBoxFieldType.Items.Add(PostProcessing.FieldTypes.RhoH);
            ComboBoxFieldType.Items.Add(PostProcessing.FieldTypes.RhoV);
            ComboBoxFieldType.Items.Add(PostProcessing.FieldTypes.Alpha);
            ComboBoxFieldType.Items.Add(PostProcessing.FieldTypes.Tau);
            ComboBoxFieldType.Items.Add(PostProcessing.FieldTypes.Beta);
            ComboBoxFieldType.Items.Add(PostProcessing.FieldTypes.C);
            ComboBoxFieldType.SelectedIndex = 1;

            ComboBoxObjectsConcerning.Items.Add(Meshes.IMesh.ConcerningObjectsTypes.FitMeshToObjects);
            ComboBoxObjectsConcerning.Items.Add(Meshes.IMesh.ConcerningObjectsTypes.FitObjectsToMesh);
            ComboBoxObjectsConcerning.SelectedIndex = 1;


            ButtonStartCalculationVP.Background = new SolidColorBrush(Color.FromRgb(75, 177, 14));
            ButtonStartCalculationSP.Background = new SolidColorBrush(Color.FromRgb(75, 177, 14));
            ButtonStartCalculationHarm.Background = new SolidColorBrush(Color.FromRgb(75, 177, 14));
            ButtonStartCalculationStat.Background = new SolidColorBrush(Color.FromRgb(75, 177, 14));
            ButtonStartInversion.Background = new SolidColorBrush(Color.FromRgb(75, 177, 14));
            ButtonStartInversionCell.Background = new SolidColorBrush(Color.FromRgb(75, 177, 14));

            Objects.CGeoLayer.HChanged += new Events.NoArgsEventHandler(this.SomeLayerChangedH);


            ComboBoxUnloadExperimentalCurvesType.Items.Add("Telgraph");
            ComboBoxUnloadExperimentalCurvesType.SelectedIndex = 0;

            setAllFields();

            PalettesControlModels.SetSystem(modelCollection);
        }

        void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            if (CalculationLaunchedVP ||
                CalculationLaunchedSP ||
                CalculationLaunchedStationar ||
                CalculationLaunchedHarmonic ||
                CalculationLaunchedInversionGeometry ||
                CalculationLaunchedInfluence ||
                CalculationLaunchedInversionCell)
            {
                MessageBox.Show("Some calculation is running.\nCannot close application.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                e.Cancel = true;
            }                    
        }

        private void SomeLayerChangedH(object source, Events.NoArgsEventArgs e)
        {
            RecalculateLayersZ();
        }

        private void RecalculateLayersZ()
        {
            double z = horizon;
 
            foreach(var layer in layers)
            {
                if (layer.FitMesh.bindToLayerZ)
                    layer.FitMesh.RegZ = z;
                layer.Z = z;
                z -= layer.H;
            }
        }
        //================================================================================================== Views
        private void MenuClickSixViews(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            if (item.IsChecked)
            {
                CollapsePanel();
                GridAllPanels.RowDefinitions[0].Height = new GridLength(1, GridUnitType.Star);
                GridAllPanels.RowDefinitions[2].Height = new GridLength(1, GridUnitType.Star);
                GridTopPanels.ColumnDefinitions[0].Width = new GridLength(1, GridUnitType.Star);
                GridTopPanels.ColumnDefinitions[2].Width = new GridLength(1, GridUnitType.Star);
                GridTopPanels.ColumnDefinitions[4].Width = new GridLength(1, GridUnitType.Star);
                GridBottomPanels.ColumnDefinitions[0].Width = new GridLength(1, GridUnitType.Star);
                GridBottomPanels.ColumnDefinitions[2].Width = new GridLength(1, GridUnitType.Star);
                GridBottomPanels.ColumnDefinitions[4].Width = new GridLength(1, GridUnitType.Star);
            }
        }
        private void CollapsePanel()
        {
            GridAllPanels.RowDefinitions[0].Height = GridLength.Auto;
            GridAllPanels.RowDefinitions[2].Height = GridLength.Auto;
            GridTopPanels.ColumnDefinitions[0].Width = GridLength.Auto;
            GridTopPanels.ColumnDefinitions[2].Width = GridLength.Auto;
            GridTopPanels.ColumnDefinitions[4].Width = GridLength.Auto;
            GridBottomPanels.ColumnDefinitions[0].Width = GridLength.Auto;
            GridBottomPanels.ColumnDefinitions[2].Width = GridLength.Auto;
            GridBottomPanels.ColumnDefinitions[4].Width = GridLength.Auto;
        }
        private void MenuClickXYViews(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            if (item.IsChecked)
            {
                CollapsePanel();
                GridAllPanels.RowDefinitions[0].Height = new GridLength(1, GridUnitType.Star);
                GridTopPanels.ColumnDefinitions[0].Width = new GridLength(1, GridUnitType.Star);
            }
        }
        private void MenuClickXZViews(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            if (item.IsChecked)
            {
                CollapsePanel();
                GridAllPanels.RowDefinitions[0].Height = new GridLength(1, GridUnitType.Star);
                GridTopPanels.ColumnDefinitions[2].Width = new GridLength(1, GridUnitType.Star);
            }
        }
        private void MenuClickYZViews(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            if (item.IsChecked)
            {
                CollapsePanel();
                GridAllPanels.RowDefinitions[0].Height = new GridLength(1, GridUnitType.Star);
                GridTopPanels.ColumnDefinitions[4].Width = new GridLength(1, GridUnitType.Star);
            }
        }
        private void MenuClickPerspectivViews(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            if (item.IsChecked)
            {
                CollapsePanel();
                GridAllPanels.RowDefinitions[2].Height = new GridLength(1, GridUnitType.Star);
                GridBottomPanels.ColumnDefinitions[4].Width = new GridLength(1, GridUnitType.Star);
                //     GridTopPanels.RowDefinitions[0].Height = new GridLength(1, GridUnitType.Star);
            }
        }
        private void MenuClickXYAndXZAndYZViews(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            if (item.IsChecked)
            {
                CollapsePanel();
                GridAllPanels.RowDefinitions[0].Height = new GridLength(1, GridUnitType.Star);
                GridTopPanels.ColumnDefinitions[0].Width = new GridLength(1, GridUnitType.Star);
                GridTopPanels.ColumnDefinitions[2].Width = new GridLength(1, GridUnitType.Star);
                GridTopPanels.ColumnDefinitions[4].Width = new GridLength(1, GridUnitType.Star);
                //     GridTopPanels.RowDefinitions[0].Height = new GridLength(1, GridUnitType.Star);
            }
        }
        private void MenuClickXZAndPerspectiveAndYZView(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            if (item.IsChecked)
            {
                CollapsePanel();
                GridAllPanels.RowDefinitions[0].Height = new GridLength(1, GridUnitType.Star);
                GridTopPanels.ColumnDefinitions[0].Width = new GridLength(1, GridUnitType.Star);
                GridTopPanels.ColumnDefinitions[2].Width = new GridLength(1, GridUnitType.Star);
                GridTopPanels.ColumnDefinitions[4].Width = new GridLength(1, GridUnitType.Star);
                //     GridTopPanels.RowDefinitions[0].Height = new GridLength(1, GridUnitType.Star);
            }
        }
        private void MenuClickGraphViews(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            if (item.IsChecked)
            {
                CollapsePanel();
                GridAllPanels.RowDefinitions[2].Height = new GridLength(1, GridUnitType.Star);
                GridBottomPanels.ColumnDefinitions[0].Width = new GridLength(1, GridUnitType.Star);
                //     GridTopPanels.RowDefinitions[0].Height = new GridLength(1, GridUnitType.Star);
            }
        }
        private void MenuViewControlBar(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            if (item.IsChecked)
            {
                GridControlBar.RowDefinitions[0].Height = new GridLength(1, GridUnitType.Star);
                GridControlBar.RowDefinitions[2].Height = new GridLength(2, GridUnitType.Star);
            }
            else
            {
                GridControlBar.RowDefinitions[0].Height = new GridLength(0);
                GridControlBar.RowDefinitions[2].Height = new GridLength(1, GridUnitType.Star);
            }
        }
        private void MenuViewPaletteClick(object sender, RoutedEventArgs e)
        {
            PostProcessing.PaletteMenuWindow window = new PostProcessing.PaletteMenuWindow(postProcessingSystem.palettes);
            window.ShowDialog();

            if (window.DialogResult == true)
                postProcessingSystem.palettes = window.palettes;

            UpdateScale();
        }
        

        //================================================================================================== Layers
        private void RenumberLayers()
        {
            for (int i = 0; i < layers.Count; i++)
                layers[i].Num = i + 1;
            DGLayers.Items.Refresh();
        }
        private void BAddNewLayer(object sender, RoutedEventArgs e)
        {
            int ind = DGLayers.SelectedIndex;
            if (ind < 0 || ind >= layers.Count)
                layers.Add(new Objects.CGeoLayer(layers.Count + 1));
            else
                layers.Insert(ind, new Objects.CGeoLayer(DGLayers.SelectedIndex));
            RecalculateLayersZ();
            RenumberLayers();
            UpdateAllView();
        }
        private void BDeleteLayer(object sender, RoutedEventArgs e)
        {
            if (DGLayers.SelectedItem != null)
            {
                int ind = DGLayers.SelectedIndex;
                layers.RemoveAt(DGLayers.SelectedIndex);// DGLayers.Items.Remove(DGLayers.SelectedItem);
                UpdateAllView();
                foreach (var p in objects)
                    p.recalcNumber(ind);

                //    buildingGrid.createListLayer();
            }
            DGLayers.Items.Refresh();//.UpdateLayout();

        }
        private void MouseDownLayerDG(object sender, MouseButtonEventArgs e)
        {
            Color c = layers[DGLayers.SelectedIndex].BackgroundColor;
            if (sender != null && DGLayers.CurrentCell.Column.DisplayIndex == 1)
                if (Utilities.LittleTools.ShowColorDialog(ref c))
                    layers[DGLayers.SelectedIndex].BackgroundColor = c;
            UpdateAllView();
        }
        private void MouseDownObjectDG(object sender, MouseButtonEventArgs e)
        {
            Color c = objects[DGObjects.SelectedIndex].BackgroundColor;
            if (sender != null && DGObjects.CurrentCell.Column.Header.ToString() == "C")
                if (Utilities.LittleTools.ShowColorDialog(ref c))
                    objects[DGObjects.SelectedIndex].BackgroundColor = c;
            UpdateAllView();
        }
        private void DGCellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            UpdateAllView();
            if (e.Column.DisplayIndex == 2)
            { /*buildingGrid.prepareForDraw(); *//*buildingGrid.createListLayer();*/ }

        }
        private void DGLayersCheckedVis(object sender, RoutedEventArgs e)
        {
            DGLayers.SelectedIndex = -1;

            //     buildingGrid.prepareForDraw();
            UpdateAllView();


        }
        private void DGLayersFocusLostH(object sender, RoutedEventArgs e)
        {
            UpdateAllView();
        }
        private void DGBeginEdit(object sender, DataGridBeginningEditEventArgs e)
        {
            DGLayers.CommitEdit();
        }
        private void CBVisibleLayersChecked(object sender, RoutedEventArgs e)
        {
            UpdateAllView();
        }
        private void CBVisibleLayersUnchecked(object sender, RoutedEventArgs e)
        {
            UpdateAllView();
        }
        private void TextBoxHorizon_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxHorizon.Text, ref horizon);
                XYOpenGlWindow.horizon = horizon;
                XZOpenGlWindow.horizon = horizon;
                YZOpenGlWindow.horizon = horizon;
                UpdateAllView();
            }
        }
        private void TextBoxHorizon_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxHorizon.Text, ref horizon);
            XYOpenGlWindow.horizon = horizon;
            XZOpenGlWindow.horizon = horizon;
            YZOpenGlWindow.horizon = horizon;
            UpdateAllView();
        }

        private void LoadReliefClick(object sender, RoutedEventArgs e)
        {
            String fileName;
            int ind;
            ind = DGLayers.SelectedIndex;
            if (ind < 0)
                return;
            if (ind >= layers.Count)
                return;
            System.Windows.Forms.OpenFileDialog openFileDialog = new System.Windows.Forms.OpenFileDialog();
            openFileDialog.InitialDirectory = LastSaveOpenDirectory;
            openFileDialog.Filter = "All files (*.*)|*.*";
            openFileDialog.FilterIndex = 0;
            if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                fileName = openFileDialog.FileName;
                LastSaveOpenDirectory = Directory.GetParent(fileName).ToString();

                DIsplaceWindow window = new DIsplaceWindow();
                window.ShowDialog();
                if (window.DialogResult == false)
                    return;

                if (layers[ind].relief.Load(fileName, window.DX, window.DY, window.DZ, window.XR, window.YR, window.Angle) != 0)
                {
                    MessageBox.Show("Could not load relief", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    layers[ind].Rel = false;
                }
                else
                    layers[ind].Rel = true;
            }

            UpdateAllView();
        }

        private void DGLayers_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (DGObjects.ToolTip != null)
                ((ToolTip)DGObjects.ToolTip).IsOpen = false;
        }
        private void DGLayers_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            DependencyObject dep = (DependencyObject)e.OriginalSource;

            while ((dep != null) && !(dep is DataGridRow))
            {
                dep = VisualTreeHelper.GetParent(dep);
            }

            if (dep == null)
                return;

            if (dep is DataGridRow)
            {
                DataGridRow row = dep as DataGridRow;
                String tipText;

                if (DGObjects.SelectedIndex < 0 || DGObjects.SelectedIndex >= DGObjects.Items.Count)
                {
                    if (DGObjects.ToolTip != null)
                        ((ToolTip)DGObjects.ToolTip).IsOpen = false;
                }

                tipText = (row.Item as Objects.CGeoLayer).relief.pathToRelief;

                if (DGObjects.ToolTip == null)
                    DGObjects.ToolTip = new ToolTip();
                ((ToolTip)DGObjects.ToolTip).IsOpen = false;
                ((ToolTip)DGObjects.ToolTip).Content = tipText;
                ((ToolTip)DGObjects.ToolTip).Placement = PlacementMode.MousePoint;
                ((ToolTip)DGObjects.ToolTip).IsOpen = true;
            }
        }

        //================================================================================================== Objects
        private void DGObjectsCheckedVis(object sender, RoutedEventArgs e)
        {
            DGObjects.SelectedIndex = -1;
            UpdateAllView();

        }
        private void DGObjectsCheckedHex(object sender, RoutedEventArgs e)
        {
            if (DGObjects.SelectedIndex != -1)
            {
                if (objects[DGObjects.SelectedIndex].IsHex == false)
                {
                    DGMinMaxCObject.ItemsSource = objects[DGObjects.SelectedIndex].parallel;
                    DGHexObject.ItemsSource = null;
                }
                else
                {
                    DGMinMaxCObject.ItemsSource = null;
                    DGHexObject.ItemsSource = objects[DGObjects.SelectedIndex].hexParameters;
                }
            }
            UpdateAllView();
        }
        private void BAddNewObject(object sender, RoutedEventArgs e)
        {
            objects.Add(new Objects.CGeoObject(objects.Count + 1));
            objects[objects.Count - 1].PropertyChanged += ObjectPropertyChanged;
            //    buildingGrid.AddObject();
            //    RecalculateBoundingBox(objects.Count-1);
            UpdateAllView();
            //DGObjects.Items.Refresh();
        }
        public void ObjectPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            // обработка selected
            if (sender is Objects.CGeoObject)
            {
                Objects.CGeoObject p = (Objects.CGeoObject)sender;
                if (e.PropertyName == "Selected" && p.Selected)
                    DGObjects.SelectedIndex = p.Num-1;
            }
        }
        private void BDelObject(object sender, RoutedEventArgs e)
        {
            int ind = 0;
            if (DGObjects.SelectedItem != null)
            {
                DGMinMaxCObject.ItemsSource = null;
                ind = DGObjects.SelectedIndex;
                //      buildingGrid.DeleteObject(ind);
                objects[ind].PropertyChanged -= ObjectPropertyChanged;
                objects.RemoveAt(ind);// DGLayers.Items.Remove(DGLayers.SelectedItem);
                UpdateAllView();
                foreach (var p in objects)
                    p.recalcNumber(ind);
            }

            DGObjects.Items.Refresh();//.UpdateLayout();
            //      buildingGrid.prepareForDraw();
        }
        private void ObjectsSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (DGObjects.SelectedIndex != -1)
            {
                if (objects[DGObjects.SelectedIndex].IsHex == false)
                {
                    DGMinMaxCObject.ItemsSource = objects[DGObjects.SelectedIndex].parallel;
                    DGHexObject.ItemsSource = null;
                }
                else
                {
                    DGMinMaxCObject.ItemsSource = null;
                    DGHexObject.ItemsSource = objects[DGObjects.SelectedIndex].hexParameters;
                }
            }
        }
        private void DGMinMaxCObject_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            if (DGObjects.SelectedIndex != -1)
            {

                UpdateAllView();

            }
        }

        private void DGObjects_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (DGObjects.ContextMenu != null)
                DGObjects.ContextMenu = null;
        }
        private void DGObjects_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            ContextMenu m = new ContextMenu();
            if (DGObjects.ContextMenu == null)
                DGObjects.ContextMenu = new System.Windows.Controls.ContextMenu();
            else
                DGObjects.ContextMenu.Items.Clear();
            MenuItem mi = new MenuItem();
            mi.Header = "Import from Inversion model";
            mi.Click += DGObjects_ContextMenuClick;
            DGObjects.ContextMenu.Items.Add(mi);

            mi = new MenuItem();
            mi.Header = "Clear";
            mi.Click += DGObjects_ContextMenuClick;
            DGObjects.ContextMenu.Items.Add(mi);

            DGObjects.ContextMenu.IsEnabled = true;
        }
        private void DGObjects_ContextMenuClick(Object sender, System.EventArgs e)
        {
            string str = (sender as MenuItem).Header.ToString();

            switch (str)
            {
                case "Import from Inversion model":
                    if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected >= inverseSystem.inversionAreas.Count)
                        return;

                    Utilities.GeoObjectsComverter.EmbryosToGeoObjects(inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos, objects);
                    break;

                case "Clear":
                    objects.Clear();
                    break;
            }


            //inverseSystem.inversionAreas[tmpInversionAreaSelected].ClearUnusedEmbryos();
            //inverseSystem.inversionAreas[tmpInversionAreaSelected].RefreshEmbryosNumbers();
            //DataGridEmbryos.Items.Refresh();
            UpdateAllView();
        }


        //================================================================================================== Bounding box
        private void UpdateBBView(object sender, RoutedEventArgs e)
        {
            RecalculateBoundingBox(-1, true);
            UpdateAllView();
        }
        private void DGBoundingBox_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            if (dataGridBoundingBox.SelectedIndex != -1)
            {
                var per = dataBB[dataGridBoundingBox.SelectedIndex];
                if (per.minValue > per.maxValue)
                {
                    double tmp = per.minValue;
                    per.minValue = per.maxValue;
                    per.maxValue = tmp;
                }

                GlobalBoundingBox[e.Row.GetIndex() * 2 + e.Column.DisplayIndex - 1] = Double.Parse((e.EditingElement as TextBox).Text);

                if (GlobalBoundingBox[0] > GlobalBoundingBox[1])
                    MessageBox.Show("Min > Max", "Warning", MessageBoxButton.OK);
                else
                    if (GlobalBoundingBox[2] > GlobalBoundingBox[3])
                        MessageBox.Show("Min > Max", "Warning", MessageBoxButton.OK);
                    else
                        if (GlobalBoundingBox[4] > GlobalBoundingBox[5])
                            MessageBox.Show("Min > Max", "Warning", MessageBoxButton.OK);


                //    RecalculateBoundingBox(DGObjects.SelectedIndex);
                //     buildingGrid.prepareForDraw();
                SetNewBoundingBoxAllView();
                //         buildingGrid.ChangeObject(DGObjects.SelectedIndex);
                //  CreateNewGrid();
                UpdateAllView();

            }
        }


        //================================================================================================== Observing system

        private void ProfileColorSelect(object sender, MouseButtonEventArgs e)
        {


            if (sender != null && DataGridObservingSystem.CurrentCell.Column.DisplayIndex == 2)
            {
                GeologyColorDialog colDial = new GeologyColorDialog();
                if (colDial.ShowDialog() == true)
                {
                    observingSystem.SetProfileColor(DataGridObservingSystem.SelectedIndex, colDial.rectGr.commonColorsLocal.BackgroundSelColor);
                    UpdateAllView();
                }
            }

        }
        private void DataGridObserveSystem_ActiveCheckChanged(object sender, RoutedEventArgs e)
        {
            UpdateAllView();
        }

        //================================================================================================== Menu File

        private void RefreshFields()
        {
            DGObjects.Items.Refresh();
            DGLayers.Items.Refresh();
            DataGridGroups.Items.Refresh();
            DataGridObservingSystem.Items.Refresh();
            DataGridTimes.Items.Refresh();

            TextBoxX0.Text = Observing.ObservingSettings.X0.ToString();
            TextBoxY0.Text = Observing.ObservingSettings.Y0.ToString();
            TextBoxZ0.Text = Observing.ObservingSettings.Z0.ToString();
            TextBoxAngle.Text = Observing.ObservingSettings.Angle.ToString();
            TextBoxRecieverPointSize.Text = Observing.ObservingSettings.recieverPointSize.ToString();
            ButtonSelectRecieverPointColor.Background = new SolidColorBrush(Observing.ObservingSettings.recieverPointColor);
        }
        private void MenuClickNew(object sender, RoutedEventArgs e)
        {

        }
        private void MenuClickOpen(object sender, RoutedEventArgs e)
        {
            String fileName;
            System.Windows.Forms.OpenFileDialog openFileDialog = new System.Windows.Forms.OpenFileDialog();
            openFileDialog.InitialDirectory = LastSaveOpenDirectory;
            openFileDialog.Filter = "geo model (*.gmd)|*.gmd|All files (*.*)|*.*";
            openFileDialog.FilterIndex = 0;
            if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                fileName = openFileDialog.FileName;
                LastSaveOpenDirectory = Directory.GetParent(fileName).ToString();
                FilesWorking.LoadModel(fileName, layers, objects, depsLayer, depsObject, visibleLayers, GlobalBoundingBox, currentSaveFileName, LastSaveOpenDirectory, LastSaveOpenDirectory, LastSaveOpenDirectory, dataBB, observingSystem, timeInfo, ref horizon, settingsStore, frequencies, inverseSystem, ref sourceType, ref calculationRegime, postProcessingSystem, stacks);
                //geoModel.SetLayers(layers);
                //geoModel.SetObjects(objects);
                //geoModel.BuildModel(horizon, GlobalBoundingBox[0], GlobalBoundingBox[1], GlobalBoundingBox[2], GlobalBoundingBox[3]);
                ModelName = (System.IO.Path.GetFileName(fileName)).Replace(".gmd", "");
                UpdatePaletteColors();
            }

            

            RefreshFields();
            setAllFields();
            SetNewBoundingBoxAllView();
            UpdateAllView();
        }
        private void MenuClickSave(object sender, RoutedEventArgs e)
        {
            if (currentSaveFileName == "")
            {
                System.Windows.Forms.SaveFileDialog saveFileDialog = new System.Windows.Forms.SaveFileDialog();
                saveFileDialog.Title = "Save as ...";
                saveFileDialog.InitialDirectory = LastSaveOpenDirectory;
                saveFileDialog.Filter = "geo model (*.gmd)|*.gmd|All files (*.*)|*.*";
                saveFileDialog.FilterIndex = 0;
                if (saveFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    currentSaveFileName = saveFileDialog.FileName;
                    LastSaveOpenDirectory = Directory.GetParent(currentSaveFileName).ToString();
                    SaveModel(currentSaveFileName);

                    ModelName = (System.IO.Path.GetFileName(currentSaveFileName)).Replace(".gmd", "");
                }
            }
            else
            {
                SaveModel(currentSaveFileName);
            }
        }
        private void MenuClickSaveAs(object sender, RoutedEventArgs e)
        {
            System.Windows.Forms.SaveFileDialog saveFileDialog = new System.Windows.Forms.SaveFileDialog();
            saveFileDialog.Title = "Save as ...";
            saveFileDialog.InitialDirectory = LastSaveOpenDirectory;
            saveFileDialog.Filter = "geo model (*.gmd)|*.gmd|All files (*.*)|*.*";
            saveFileDialog.FilterIndex = 0;
            if (saveFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                currentSaveFileName = saveFileDialog.FileName;
                LastSaveOpenDirectory = Directory.GetParent(currentSaveFileName).ToString();
                SaveModel(currentSaveFileName);
                ModelName = (System.IO.Path.GetFileName(currentSaveFileName)).Replace(".gmd", "");
            }
        }
        private void MenuClickImport(object sender, RoutedEventArgs e)
        {
            Color newColor;
            Objects.ImportWindow importWindow;

            if (tmpInversionAreaSelected >= 0 && tmpInversionAreaSelected < inverseSystem.inversionAreas.Count)
                importWindow = new ImportWindow(LastSaveOpenDirectory, objects, layers, inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos);
            else
                importWindow = new ImportWindow(LastSaveOpenDirectory, objects, layers, null);

            importWindow.ShowDialog();

            if (importWindow.DialogResult == true)
            {
                DGObjects.Items.Refresh();
                DataGridEmbryos.Items.Refresh();
                UpdateAllView();
            }
        }
        private void MenuClickExport(object sender, RoutedEventArgs e)
        {
            Objects.Export.ExportWindow exportWindow;

            if (tmpInversionAreaSelected >= 0 && tmpInversionAreaSelected < inverseSystem.inversionAreas.Count)
                exportWindow = new  Objects.Export.ExportWindow(LastSaveOpenDirectory, objects, layers, inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos);
            else
                exportWindow = new  Objects.Export.ExportWindow(LastSaveOpenDirectory, objects, layers, null);

            exportWindow.ShowDialog();

            if (exportWindow.DialogResult == true)
            {
                DGObjects.Items.Refresh();
                DataGridEmbryos.Items.Refresh();
                UpdateAllView();
            }
        }
        private void MenuClickExit(object sender, RoutedEventArgs e)
        {

        }

        //================================================================================================== Menu Settings

        private void MenuClickConfigurationFiles(object sender, RoutedEventArgs e)
        {
            String fileName;
            SimpleOptionsWindow optionsWindow = new SimpleOptionsWindow(settingsStore, LastSaveOpenDirectory, LastSaveOpenDirectory);
            if (optionsWindow.ShowDialog() == true)
            {

            }
        }

        //================================================================================================ Observing system
        private void ButtonLoadObservingSystem_Click(object sender, RoutedEventArgs e)
        {
            
            StatusBarLeft.Text = "Loading observing system ...";
            observingSystem.LoadSystem(ComboBoxObservingSystemType.SelectedItem.ToString(), LastSaveOpenDirectory, (bool)CheckBoxRenumberGroups.IsChecked);

            DataGridObservingSystem.ItemsSource = observingSystem.profiles;
            DataGridGroups.ItemsSource = observingSystem.groups;
            
            

            StatusBarLeft.Text = "Ready";
            TextBoxX0.Text = Observing.ObservingSettings.X0.ToString();
            TextBoxY0.Text = Observing.ObservingSettings.Y0.ToString();
            TextBoxZ0.Text = Observing.ObservingSettings.Z0.ToString();
            TextBoxAngle.Text = Observing.ObservingSettings.Angle.ToString();
            DataGridObservingSystem.Items.Refresh();

            DataGridObservingSystem.Items.Refresh();
            DataGridGroups.Items.Refresh();
            UpdateAllView();
        }
        private void ShowInfo_Click(object sender, RoutedEventArgs e)
        {
            int ind;
            ind = DataGridObservingSystem.SelectedIndex;
            ProfileInformation profileInformationWindow = new ProfileInformation(observingSystem.GetProfilePositions(ind), "Profile " + (ind + 1).ToString());

            System.Drawing.Point point = System.Windows.Forms.Control.MousePosition;
            profileInformationWindow.Left = point.X;
            profileInformationWindow.Top = point.Y;
            profileInformationWindow.Show();
        }
        private void TextBoxX0_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxX0.Text, ref Observing.ObservingSettings.X0);
            UpdateAllView();
        }
        private void TextBoxY0_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxY0.Text, ref Observing.ObservingSettings.Y0);
            UpdateAllView();
        }
        private void TextBoxZ0_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxZ0.Text, ref Observing.ObservingSettings.Z0);
            UpdateAllView();
        }
        private void TextBoxAngle_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxAngle.Text, ref Observing.ObservingSettings.Angle);
            UpdateAllView();
        }
        private void TextBoxRecieverPointSize_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxRecieverPointSize.Text, ref Observing.ObservingSettings.recieverPointSize);
            UpdateAllView();
        }
        private void TextBoxX0_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxX0.Text, ref Observing.ObservingSettings.X0);
                UpdateAllView();
            }
        }
        private void TextBoxY0_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxY0.Text, ref Observing.ObservingSettings.Y0);
                UpdateAllView();
            }
        }
        private void TextBoxZ0_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxZ0.Text, ref Observing.ObservingSettings.Z0);
                UpdateAllView();
            }
        }
        private void TextBoxXR_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxXR.Text, ref Observing.ObservingSettings.XR);
            UpdateAllView();
        }
        private void TextBoxYR_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxYR.Text, ref Observing.ObservingSettings.YR);
            UpdateAllView();
        }
        private void TextBoxXR_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxXR.Text, ref Observing.ObservingSettings.XR);
                UpdateAllView();
            }
        }
        private void TextBoxYR_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxYR.Text, ref Observing.ObservingSettings.YR);
                UpdateAllView();
            }
        }
        private void TextBoxAngle_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxAngle.Text, ref Observing.ObservingSettings.Angle);
                Observing.ObservingSettings.cosa = Math.Cos(Observing.ObservingSettings.Angle * Math.PI / 180.0);
                Observing.ObservingSettings.sina = Math.Sin(Observing.ObservingSettings.Angle * Math.PI / 180.0);
                UpdateAllView();
            }
        }
        private void TextBoxRecieverPointSize_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxRecieverPointSize.Text, ref Observing.ObservingSettings.recieverPointSize);
                UpdateAllView();
            }
        }
        private void ButtonSelectRecieverPointColor_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                GeologyColorDialog colDial = new GeologyColorDialog();
                if (colDial.ShowDialog() == true)
                {
                    Observing.ObservingSettings.recieverPointColor = colDial.rectGr.commonColorsLocal.BackgroundSelColor;
                    ButtonSelectRecieverPointColor.Background = new SolidColorBrush(colDial.rectGr.commonColorsLocal.BackgroundSelColor);
                    UpdateAllView();
                }
            }
            catch (Exception ex)
            {

            }
        }
        private void DataGridObservingSystem_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (e.RightButton == MouseButtonState.Released)
            {
                ContextMenu m = new ContextMenu();
                if (DataGridObservingSystem.ContextMenu == null)
                    DataGridObservingSystem.ContextMenu = new System.Windows.Controls.ContextMenu();
                else
                    DataGridObservingSystem.ContextMenu.Items.Clear();
                MenuItem mi = new MenuItem();
                mi.Header = "Generate profile";
                mi.Click += DataGridObservingSystem_ContextMenuClick;
                DataGridObservingSystem.ContextMenu.Items.Add(mi);
                mi = new MenuItem();
                mi.Header = "All active";
                mi.Click += DataGridObservingSystem_ContextMenuClick;
                DataGridObservingSystem.ContextMenu.Items.Add(mi);
                mi = new MenuItem();
                mi.Header = "All inactive";
                mi.Click += DataGridObservingSystem_ContextMenuClick;
                DataGridObservingSystem.ContextMenu.Items.Add(mi);
                mi = new MenuItem();
                mi.Header = "All active toggle";
                mi.Click += DataGridObservingSystem_ContextMenuClick;
                DataGridObservingSystem.ContextMenu.Items.Add(mi);

                DataGridObservingSystem.ContextMenu.Items.Add(new Separator());

                mi = new MenuItem();
                mi.Header = "Combine into profile";
                mi.Click += DataGridObservingSystem_ContextMenuClick;
                DataGridObservingSystem.ContextMenu.Items.Add(mi);

                DependencyObject dep = (DependencyObject)e.OriginalSource;

                // iteratively traverse the visual tree
                while ((dep != null) && !(dep is DataGridRow))
                {
                    dep = VisualTreeHelper.GetParent(dep);
                }

                if (dep == null)
                    return;


                if (dep is DataGridRow && DataGridObservingSystem.SelectedItem != null)
                {
                    DataGridObservingSystem.ContextMenu.Items.Add(new Separator());
                    tmpRowIndex = (dep as DataGridRow).GetIndex();
                    mi = new MenuItem();
                    mi.Header = "Edit";
                    mi.Click += DataGridObservingSystem_ContextMenuClick;
                    DataGridObservingSystem.ContextMenu.Items.Add(mi);
                    mi = new MenuItem();
                    mi.Header = "Delete";
                    mi.Click += DataGridObservingSystem_ContextMenuClick;
                    DataGridObservingSystem.ContextMenu.Items.Add(mi);

                    DataGridObservingSystem.ContextMenu.Items.Add(new Separator());

                    mi = new MenuItem();
                    mi.Header = "Active";
                    mi.Click += DataGridObservingSystem_ContextMenuClick;
                    DataGridObservingSystem.ContextMenu.Items.Add(mi);
                    mi = new MenuItem();
                    mi.Header = "Inactive";
                    mi.Click += DataGridObservingSystem_ContextMenuClick;
                    DataGridObservingSystem.ContextMenu.Items.Add(mi);
                    mi = new MenuItem();
                    mi.Header = "Toggle active";
                    mi.Click += DataGridObservingSystem_ContextMenuClick;
                    DataGridObservingSystem.ContextMenu.Items.Add(mi);

                    DataGridObservingSystem.ContextMenu.Items.Add(new Separator());

                    mi = new MenuItem();
                    mi.Header = "Split to profiles";
                    mi.Click += DataGridObservingSystem_ContextMenuClick;
                    DataGridObservingSystem.ContextMenu.Items.Add(mi);
                }

                DataGridObservingSystem.ContextMenu.IsEnabled = true;

            }

        }
        private void DataGridObservingSystem_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (DataGridObservingSystem.ContextMenu != null)
                DataGridObservingSystem.ContextMenu = null;
        }
        private void DataGridObservingSystem_ContextMenuClick(Object sender, System.EventArgs e)
        {
            try
            {
                string str = (sender as MenuItem).Header.ToString();
                switch (str)
                {
                    case "Generate profile":
                        observingSystem.GenerateProfile(LastSaveOpenDirectory);
                        DataGridObservingSystem.Items.Refresh();
                        break;
                    case "Delete":
                        observingSystem.DeleteProfile(DataGridObservingSystem.SelectedIndex);
                        DataGridObservingSystem.Items.Refresh();
                        break;
                    case "Edit":
                        observingSystem.EditProfile(DataGridObservingSystem.SelectedIndex, LastSaveOpenDirectory);
                        DataGridObservingSystem.Items.Refresh();
                        break;
                    case "All active":
                        ActiveProfilesSet(SelectionApplicationModifiers.All, CheckBoxSwitchType.On);
                        DataGridObservingSystem.Items.Refresh();
                        break;
                    case "All inactive":
                        ActiveProfilesSet(SelectionApplicationModifiers.All, CheckBoxSwitchType.Off);
                        DataGridObservingSystem.Items.Refresh();
                        break;
                    case "All active toggle":
                        ActiveProfilesSet(SelectionApplicationModifiers.All, CheckBoxSwitchType.Toggle);
                        DataGridObservingSystem.Items.Refresh();
                        break;
                    case "Active":
                        ActiveProfilesSet(SelectionApplicationModifiers.Selected, CheckBoxSwitchType.On);
                        DataGridObservingSystem.Items.Refresh();
                        break;
                    case "Inactive":
                        ActiveProfilesSet(SelectionApplicationModifiers.Selected, CheckBoxSwitchType.Off);
                        DataGridObservingSystem.Items.Refresh();
                        break;
                    case "Toggle active":
                        ActiveProfilesSet(SelectionApplicationModifiers.Selected, CheckBoxSwitchType.Toggle);
                        DataGridObservingSystem.Items.Refresh();
                        break;
                    case "Split to profiles":
                        observingSystem.SplitToProfiles(DataGridObservingSystem.SelectedIndex);
                        DataGridObservingSystem.Items.Refresh();
                        break;
                    case "Combine into profile":
                        observingSystem.CombineToProfile();
                        DataGridObservingSystem.Items.Refresh();
                        break;
                }

                UpdateAllView();
            }
            catch(Exception ex)
            {
                UpdateAllView();
            }
        }
        private void ActiveProfilesSet(SelectionApplicationModifiers selection, CheckBoxSwitchType action)
        {
            Observing.Profile p;
            switch(selection)
            {
                case SelectionApplicationModifiers.All:
                    switch (action)
                    {
                        case CheckBoxSwitchType.On:
                            foreach (var profile in observingSystem.profiles)
                                profile.Active = true;
                            break;
                        case CheckBoxSwitchType.Off:
                            foreach (var profile in observingSystem.profiles)
                                profile.Active = false;
                            break;
                        case CheckBoxSwitchType.Toggle:
                            foreach (var profile in observingSystem.profiles)
                                profile.Active = !profile.Active;
                            break;
                    }
                    break;
                case SelectionApplicationModifiers.Selected:
                    switch (action)
                    {
                        case CheckBoxSwitchType.On:
                            foreach (var item in DataGridObservingSystem.SelectedItems)
                            {
                                p = (Observing.Profile)item;
                                p.Active = true;
                            }
                            break;
                        case CheckBoxSwitchType.Off:
                            foreach (var item in DataGridObservingSystem.SelectedItems)
                            {
                                p = (Observing.Profile)item;
                                p.Active = false;
                            }
                            break;
                        case CheckBoxSwitchType.Toggle:
                            foreach (var item in DataGridObservingSystem.SelectedItems)
                            {
                                p = (Observing.Profile)item;
                                p.Active = !p.Active;
                            }
                            break;
                    }
                    break;
            }
        }
        private void ButtonLoadCurves_Click(object sender, RoutedEventArgs e)
        {
            StatusBarLeft.Text = "Loading observing curves ...";
            if (observingSystem.LoadExperimentalCurves(ComboBoxExperimentalCurvesType.SelectedItem.ToString(), out observingSystem.pathToCurves) != 0)
                MessageBox.Show("Could not load data", "Error", MessageBoxButton.OK, MessageBoxImage.Error);

            (LabelPathToCurves.Content as TextBlock).Text = observingSystem.pathToCurves;
            StatusBarLeft.Text = "Ready ...";
        }

        private void CheckBoxDrawRecievers_Checked(object sender, RoutedEventArgs e)
        {
            Observing.ObservingSettings.drawRecievers = (bool)CheckBoxDrawRecievers.IsChecked;
            UpdateAllView();
        }

        private void CheckBoxDrawGenerators_Checked(object sender, RoutedEventArgs e)
        {
            Observing.ObservingSettings.drawGenerators = (bool)CheckBoxDrawGenerators.IsChecked;
            UpdateAllView();
        }

        private void CheckBoxDrawRecieversLabels_Checked(object sender, RoutedEventArgs e)
        {
            Observing.ObservingSettings.drawRecieverLabels = (bool)CheckBoxDrawRecieversLabels.IsChecked;
            UpdateAllView();
        }

        


        //======================================================================================== Groups

        private void ButtonMakeGroups_Click(object sender, RoutedEventArgs e)
        {
            switch (ComboBoxGroupingMethod.SelectedItem.ToString())
            {
                case "Regular":
                    DataGridGroups.ItemsSource = null;
                    Grouping.Grouping.GroupByRegularMesh(observingSystem.profiles, observingSystem.groups, (bool)CheckBoxRenumberGroups.IsChecked);
                    DataGridGroups.ItemsSource = observingSystem.groups;
                    DataGridGroups.UpdateLayout();
                    break;
                case "Clear":
                    observingSystem.ClearGroups();
                    DataGridGroups.Items.Refresh();
                    break;
            }

            UpdateAllView();
        }
        private void ButtonMakeGroupsDirectory_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                String path;
                List<String> serverNames = new List<string>();
                serverNames.Add("http://localhost:8080");
                System.Windows.Forms.OpenFileDialog openDirDialog = new System.Windows.Forms.OpenFileDialog();
                openDirDialog.InitialDirectory = LastCalculationsDirectory;
                openDirDialog.FileName = "This folder";
                openDirDialog.Filter = "folders|*.neverseenthisfile";
                openDirDialog.FilterIndex = 0;
                openDirDialog.CheckFileExists = false;
                openDirDialog.CheckPathExists = false;
                if (openDirDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    LastCalculationsDirectory = openDirDialog.FileName;
                    LastCalculationsDirectory = Directory.GetParent(LastCalculationsDirectory).ToString();
                    path = LastCalculationsDirectory;

                    if (Directory.Exists(path + "/Calculation") == false)
                        Directory.CreateDirectory(path + "/Calculation");

                    if (Directory.Exists(path + "/Calculation/Calculations") == false)
                        Directory.CreateDirectory(path + "/Calculation/Calculations");

                    if (Directory.Exists(path + "/Calculation/GroupsData") == false)
                        Directory.CreateDirectory(path + "/Calculation/GroupsData");

                    if (Grouping.Grouping.WriteGroupsDataFilesPack(path + "/Calculation", observingSystem.profiles, observingSystem.groups, Tasks.TaskTypes.None) != 0)
                        MessageBox.Show("Could not write file pack", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }


                return;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Could not write data", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
        }
        private void DataGridGroups_ActiveCheckChanged(object sender, RoutedEventArgs e)
        {
            UpdateAllView();
        }
        private void GroupColorSelect(object sender, MouseButtonEventArgs e)
        {
            if (sender != null && DataGridGroups.CurrentCell.Column.DisplayIndex == 2)
            {
                GeologyColorDialog colDial = new GeologyColorDialog();
                if (colDial.ShowDialog() == true)
                {
                    observingSystem.SetGroupColor(DataGridGroups.SelectedIndex, colDial.rectGr.commonColorsLocal.BackgroundSelColor);
                    UpdateAllView();
                }
            }
        }
        private void ShowGroupInfo_Click(object sender, RoutedEventArgs e)
        {

        }

        //======================================================================================== Times

        private void DataGridTimes_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (e.RightButton == MouseButtonState.Released)
            {
                ContextMenu m = new ContextMenu();
                if (DataGridTimes.ContextMenu == null)
                    DataGridTimes.ContextMenu = new System.Windows.Controls.ContextMenu();
                else
                    DataGridTimes.ContextMenu.Items.Clear();
                MenuItem mi = new MenuItem();
                mi.Header = "Generate time mesh";
                mi.Click += DataGridTimes_ContextMenuClick;
                DataGridTimes.ContextMenu.Items.Add(mi);
                mi = new MenuItem();
                mi.Header = "Load times";
                mi.Click += DataGridTimes_ContextMenuClick;
                DataGridTimes.ContextMenu.Items.Add(mi);
                mi = new MenuItem();
                mi.Header = "Load windows";
                mi.Click += DataGridTimes_ContextMenuClick;
                DataGridTimes.ContextMenu.Items.Add(mi);

                DependencyObject dep = (DependencyObject)e.OriginalSource;

                // iteratively traverse the visual tree
                while ((dep != null) && !(dep is DataGridRow))
                {
                    dep = VisualTreeHelper.GetParent(dep);
                }

                if (dep == null)
                    return;

                if (dep is DataGridRow)
                {
                    tmpRowIndex = (dep as DataGridRow).GetIndex();
                    mi = new MenuItem();
                    mi.Header = "Delete time";
                    mi.Click += DataGridTimes_ContextMenuClick;
                    DataGridTimes.ContextMenu.Items.Add(mi);
                }

                DataGridTimes.ContextMenu.IsEnabled = true;

            }
        }
        private void DataGridTimes_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (DataGridTimes.ContextMenu != null)
                DataGridTimes.ContextMenu = null;
        }
        private void RebuildTimeMesh()
        {
            Geology.Meshes.TimeMeshOptions genWindow = new Geology.Meshes.TimeMeshOptions(timeInfo.meshTimeUser);
            genWindow.ShowDialog();

            if (genWindow.DialogResult == true)
            {
                timeInfo.meshTimeUser = genWindow.meshTime;
                DataGridTimes.ItemsSource = timeInfo.meshTimeUser.times;
            }
        }
        private void DataGridTimes_ContextMenuClick(Object sender, System.EventArgs e)
        {
            String fileName;
            System.Windows.Forms.OpenFileDialog openFileDialog;
            string str = (sender as MenuItem).Header.ToString();
            switch (str)
            {
                case "Generate time mesh":
                    RebuildTimeMesh();
                    DataGridTimes.Items.Refresh();
                    TextBoxFitBegin.Text = timeInfo.meshTimeUser.tStart.ToString();
                    TextBoxFitEnd.Text = timeInfo.meshTimeUser.tEnd.ToString();
                    break;
                case "Load times":
                    openFileDialog = new System.Windows.Forms.OpenFileDialog();
                    openFileDialog.InitialDirectory = LastSaveOpenDirectory;
                    openFileDialog.Filter = "All files (*.*)|*.*";
                    openFileDialog.FilterIndex = 0;
                    if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                    {
                        fileName = openFileDialog.FileName;
                        LastSaveOpenDirectory = Directory.GetParent(fileName).ToString();

                        if (timeInfo.meshTimeUser.LoadTimes(fileName) != 0)
                            MessageBox.Show("Could not load times from " + fileName, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                    
                    TextBoxFitBegin.Text = timeInfo.meshTimeUser.times[0].Time.ToString();
                    TextBoxFitEnd.Text = timeInfo.meshTimeUser.times[timeInfo.meshTimeUser.times.Count-1].Time.ToString();
                    DataGridTimes.Items.Refresh();
                    break;
                case "Load windows":
                    openFileDialog = new System.Windows.Forms.OpenFileDialog();
                    openFileDialog.InitialDirectory = LastSaveOpenDirectory;
                    openFileDialog.Filter = "All files (*.*)|*.*";
                    openFileDialog.FilterIndex = 0;
                    if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                    {
                        fileName = openFileDialog.FileName;
                        LastSaveOpenDirectory = Directory.GetParent(fileName).ToString();

                        if (timeInfo.meshTimeUser.LoadWindows(fileName) != 0)
                            MessageBox.Show("Could not load time windows from " + fileName, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                    TextBoxFitBegin.Text = timeInfo.meshTimeUser.times[0].timeWindow.Start.ToString();
                    TextBoxFitEnd.Text = timeInfo.meshTimeUser.times[timeInfo.meshTimeUser.times.Count-1].timeWindow.End.ToString();
                    DataGridTimes.Items.Refresh();
                    break;
                case "Delete time":

                    break;
            }

            UpdateAllView();
        }

        //======================================================================================== Times
        private void ButtonStartCalculation_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                String path;
                List<String> serverNames = new List<string>();
                serverNames.Add("http://localhost:8080");
                System.Windows.Forms.OpenFileDialog openDirDialog = new System.Windows.Forms.OpenFileDialog();
                openDirDialog.InitialDirectory = LastCalculationsDirectory;
                openDirDialog.FileName = "This folder";
                openDirDialog.Filter = "folders|*.neverseenthisfile";
                openDirDialog.FilterIndex = 0;
                openDirDialog.CheckFileExists = false;
                openDirDialog.CheckPathExists = false;
                if (openDirDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    LastCalculationsDirectory = openDirDialog.FileName;
                    LastCalculationsDirectory = Directory.GetParent(LastCalculationsDirectory).ToString();
                    path = LastCalculationsDirectory;

                    if (Directory.Exists(path + "/Calculation") == false)
                        Directory.CreateDirectory(path + "/Calculation");

                    if (Directory.Exists(path + "/Calculation/Calculations") == false)
                        Directory.CreateDirectory(path + "/Calculation/Calculations");

                    if (Directory.Exists(path + "/Calculation/GroupsData") == false)
                        Directory.CreateDirectory(path + "/Calculation/GroupsData");
                }
                return;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Could not write data", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
        }
        private void TextBoxCurrent_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxCurrent.Text, ref Tasks.BasicTaskSettings.current);
        }
        private void TextBoxRoundsGen_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxRoundsGen.Text, ref Tasks.BasicTaskSettings.generatorRoundsCount);
        }
        private void TextBoxRoundsRec_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxRoundsRec.Text, ref Tasks.BasicTaskSettings.recieverRoundsCount);
        }
        private void TextBoxCurrent_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxCurrent.Text, ref Tasks.BasicTaskSettings.current);
        }
        private void TextBoxRoundsGen_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxRoundsGen.Text, ref Tasks.BasicTaskSettings.generatorRoundsCount);
        }
        private void TextBoxRoundsRec_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxRoundsRec.Text, ref Tasks.BasicTaskSettings.recieverRoundsCount);
        }

        private void TextBoxImpLength_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxImpLength.Text, ref Tasks.VPSettings.ImpImpLength);
            Utilities.LittleTools.ParseString(TextBoxImpLength.Text, ref Tasks.SPSettings.ImpImpLength);
            Utilities.LittleTools.ParseString(TextBoxImpLength.Text, ref Tasks.StationarSettings.ImpImpLength);
            Utilities.LittleTools.ParseString(TextBoxImpLength.Text, ref Tasks.HarmonicSettings.ImpImpLength);
            Utilities.LittleTools.ParseString(TextBoxImpLength.Text, ref Tasks.InversionGeometrySettings.ImpImpLength);
        }
        private void TextBoxImpPauseLength_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxImpPauseLength.Text, ref Tasks.VPSettings.ImpPauseLength);
            Utilities.LittleTools.ParseString(TextBoxImpPauseLength.Text, ref Tasks.SPSettings.ImpPauseLength);
            Utilities.LittleTools.ParseString(TextBoxImpPauseLength.Text, ref Tasks.StationarSettings.ImpPauseLength);
            Utilities.LittleTools.ParseString(TextBoxImpPauseLength.Text, ref Tasks.HarmonicSettings.ImpPauseLength);
            Utilities.LittleTools.ParseString(TextBoxImpPauseLength.Text, ref Tasks.InversionGeometrySettings.ImpPauseLength);
        }
        private void TextBoxImpCount_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxImpCount.Text, ref Tasks.VPSettings.ImpImpCount);
            Utilities.LittleTools.ParseString(TextBoxImpCount.Text, ref Tasks.SPSettings.ImpImpCount);
            Utilities.LittleTools.ParseString(TextBoxImpCount.Text, ref Tasks.StationarSettings.ImpImpCount);
            Utilities.LittleTools.ParseString(TextBoxImpCount.Text, ref Tasks.HarmonicSettings.ImpImpCount);
            Utilities.LittleTools.ParseString(TextBoxImpCount.Text, ref Tasks.InversionGeometrySettings.ImpImpCount);
        }
        private void TextBoxImpLength_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxImpLength.Text, ref Tasks.SPSettings.ImpImpLength);
                Utilities.LittleTools.ParseString(TextBoxImpLength.Text, ref Tasks.SPSettings.ImpImpLength);
                Utilities.LittleTools.ParseString(TextBoxImpLength.Text, ref Tasks.StationarSettings.ImpImpLength);
                Utilities.LittleTools.ParseString(TextBoxImpLength.Text, ref Tasks.HarmonicSettings.ImpImpLength);
                Utilities.LittleTools.ParseString(TextBoxImpLength.Text, ref Tasks.InversionGeometrySettings.ImpImpLength);
            }
        }
        private void TextBoxImpPauseLength_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxImpPauseLength.Text, ref Tasks.VPSettings.ImpPauseLength);
                Utilities.LittleTools.ParseString(TextBoxImpPauseLength.Text, ref Tasks.SPSettings.ImpPauseLength);
                Utilities.LittleTools.ParseString(TextBoxImpPauseLength.Text, ref Tasks.StationarSettings.ImpPauseLength);
                Utilities.LittleTools.ParseString(TextBoxImpPauseLength.Text, ref Tasks.HarmonicSettings.ImpPauseLength);
                Utilities.LittleTools.ParseString(TextBoxImpPauseLength.Text, ref Tasks.InversionGeometrySettings.ImpPauseLength);
            }
        }
        private void TextBoxImpCount_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxImpCount.Text, ref Tasks.VPSettings.ImpImpCount);
                Utilities.LittleTools.ParseString(TextBoxImpCount.Text, ref Tasks.SPSettings.ImpImpCount);
                Utilities.LittleTools.ParseString(TextBoxImpCount.Text, ref Tasks.StationarSettings.ImpImpCount);
                Utilities.LittleTools.ParseString(TextBoxImpCount.Text, ref Tasks.HarmonicSettings.ImpImpCount);
                Utilities.LittleTools.ParseString(TextBoxImpCount.Text, ref Tasks.InversionGeometrySettings.ImpImpCount);
            }
        }

        //==================================================================================== Tasks
        private Tasks.SourceType GetSourceType()
        {
            switch ((String)(ComboBoxSourceType.SelectedItem))
            {
                case "Line":
                    return Tasks.SourceType.Line;
                case "Circle loop":
                    return Tasks.SourceType.CircleLoop;
                case "Polyline loop":
                    return Tasks.SourceType.PolyLoop;
            }
            return Tasks.SourceType.None;
        }
        private Observing.ObservingGeneratorsTypes GetSourceTypeObserving()
        {
            switch ((String)(ComboBoxSourceType.Text))
            {
                case "Line":
                    return Observing.ObservingGeneratorsTypes.Line;
                case "Circle loop":
                    return Observing.ObservingGeneratorsTypes.Loop;
                case "Polyline loop":
                    return Observing.ObservingGeneratorsTypes.LoopPoly;
            }
            return Observing.ObservingGeneratorsTypes.None;
        }

        private void SetSourceType(Tasks.SourceType sourceType, ComboBox box)
        {
            switch (sourceType)
            {
                case Tasks.SourceType.Line:
                    box.Text = "Line";
                    return;
                case Tasks.SourceType.CircleLoop:
                    box.Text = "Circle loop";
                    return;
                case Tasks.SourceType.PolyLoop:
                    box.Text = "Polyline loop";
                    return;
                default:
                    box.SelectedIndex = -1;
                    return;
            }
        }

        private void ComboBoxEMSourceType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ComboBoxEMSourceType.SelectedItem == null)
                return;
            Tasks.SPSettings.generatorType = (Observing.ObservingGeneratorsTypes)ComboBoxEMSourceType.SelectedItem;
        }
        
        private void StartTaskVPAsync()
        {
            BackgroundWorker worker = new BackgroundWorker();

            LastCalculationsDirectory = Utilities.LittleTools.GetPath(LastCalculationsDirectory);
            if (LastCalculationsDirectory == "")
                return;

            SaveModel(LastCalculationsDirectory + "/" + ModelName + ".gmd");

            worker.DoWork += StartTaskVP;
            worker.RunWorkerCompleted += FinishTaskVP;

            StatusBarVP.Text = "Status: Calculating";
            (ButtonStartCalculationVP.Content as TextBlock).Text = "Stop";
            ButtonStartCalculationVP.Background = new SolidColorBrush(Color.FromRgb(238, 26, 26));
            CalculationsStopVP = false;
            CalculationLaunchedVP = true;

            worker.RunWorkerAsync();
        }
        private void StartTaskSPAsync()
        {
            BackgroundWorker worker = new BackgroundWorker();

            LastCalculationsDirectory = Utilities.LittleTools.GetPath(LastCalculationsDirectory);
            if (LastCalculationsDirectory == "")
                return;

            SaveModel(LastCalculationsDirectory + "/" + ModelName + ".gmd");

            worker.DoWork += StartTaskSP;
            worker.RunWorkerCompleted += FinishTaskSP;

            StatusBarSP.Text = "Status: Calculating";
            (ButtonStartCalculationSP.Content as TextBlock).Text = "Stop";
            ButtonStartCalculationSP.Background = new SolidColorBrush(Color.FromRgb(238, 26, 26));
            CalculationsStopSP = false;
            CalculationLaunchedSP = true;

            worker.RunWorkerAsync();
        }
        private void StartTaskSPApparentRhoAsync()
        {
            BackgroundWorker worker = new BackgroundWorker();

            LastCalculationsDirectory = Utilities.LittleTools.GetPath(LastCalculationsDirectory);
            if (LastCalculationsDirectory == "")
                return;

            worker.DoWork += StartTaskSPApparentRho;
            worker.RunWorkerCompleted += FinishTaskInversionGeometry;


            StatusBarInversionGeometry.Text = "Status: Calculating";
            (ButtonStartInversion.Content as TextBlock).Text = "Stop";
            ButtonStartInversion.Background = new SolidColorBrush(Color.FromRgb(238, 26, 26));
            CalculationsStopInversionGeometry = false;
            CalculationLaunchedInversionGeometry = true;

            worker.RunWorkerAsync();
        }
        private void StartTaskHarmonicAsync()
        {
            BackgroundWorker worker = new BackgroundWorker();

            LastCalculationsDirectory = Utilities.LittleTools.GetPath(LastCalculationsDirectory);
            if (LastCalculationsDirectory == "")
                return;

            SaveModel(LastCalculationsDirectory + "/" + ModelName + ".gmd");

            worker.DoWork += StartTaskHarmonic;
            worker.RunWorkerCompleted += FinishTaskHarmonic;

            StatusBarHarmonic.Text = "Status: Calculating";
            (ButtonStartCalculationHarm.Content as TextBlock).Text = "Stop";
            ButtonStartCalculationHarm.Background = new SolidColorBrush(Color.FromRgb(238, 26, 26));
            CalculationsStopHarmonic = false;
            CalculationLaunchedHarmonic = true;

            worker.RunWorkerAsync();
        }
        private void StartTaskStationarAsync()
        {
            BackgroundWorker worker = new BackgroundWorker();

            LastCalculationsDirectory = Utilities.LittleTools.GetPath(LastCalculationsDirectory);
            if (LastCalculationsDirectory == "")
                return;

            SaveModel(LastCalculationsDirectory + "/" + ModelName + ".gmd");

            worker.DoWork += StartTaskStationar;
            worker.RunWorkerCompleted += FinishTaskStationar;

            StatusBarStationar.Text = "Status: Calculating";
            (ButtonStartCalculationStat.Content as TextBlock).Text = "Stop";
            ButtonStartCalculationStat.Background = new SolidColorBrush(Color.FromRgb(238, 26, 26));
            CalculationsStopStationar = false;
            CalculationLaunchedStationar = true;

            worker.RunWorkerAsync();
        }
        private void StartTaskInversionGeometryAsync()
        {
            BackgroundWorker worker = new BackgroundWorker();

            LastCalculationsDirectory = Utilities.LittleTools.GetPath(LastCalculationsDirectory);
            if (LastCalculationsDirectory == "")
                return;

            SaveModel(LastCalculationsDirectory + "/" + ModelName + ".gmd");

            worker.DoWork += StartTaskInversionGeometry;
            worker.RunWorkerCompleted += FinishTaskInversionGeometry;
            calculationRegime = Tasks.TasksUtilities.GetTaskType(ComboBoxCalculationRegime.Text);
            sourceType = GetSourceType();
            sourceTypeInversion = GetSourceTypeObserving();

            StatusBarInversionGeometry.Text = "Status: Calculating";
            (ButtonStartInversion.Content as TextBlock).Text = "Stop";
            ButtonStartInversion.Background = new SolidColorBrush(Color.FromRgb(238, 26, 26));
            CalculationsStopInversionGeometry = false;
            CalculationLaunchedInversionGeometry = true;

            worker.RunWorkerAsync();
        }
        private void StartTaskInversionCellAsync()
        {
            BackgroundWorker worker = new BackgroundWorker();

            LastCalculationsDirectory = Utilities.LittleTools.GetPath(LastCalculationsDirectory);
            if (LastCalculationsDirectory == "")
                return;

            SaveModel(LastCalculationsDirectory + "/" + ModelName + ".gmd");

            worker.DoWork += StartTaskInversionCell;
            worker.RunWorkerCompleted += FinishTaskInversionCell;

            StatusBarInversionCell.Text = "Status: Calculating";
            (ButtonStartInversionCell.Content as TextBlock).Text = "Stop";
            ButtonStartInversionCell.Background = new SolidColorBrush(Color.FromRgb(238, 26, 26));
            CalculationsStopInversionCell = false;
            CalculationLaunchedInversionCell = true;

            worker.RunWorkerAsync();
        }
        private void StartTaskInfluenceAsync()
        {
            BackgroundWorker worker = new BackgroundWorker();

            if (tmpInversionResultsIterationSelected < 0 || tmpInversionResultsIterationSelected >= inverseSystem.inversionResults.iterationResults.Count)
                return;

            if (influenceTaskNumber != -1)
                return;

            LastCalculationsDirectory = Utilities.LittleTools.GetPath(LastCalculationsDirectory);
            if (LastCalculationsDirectory == "")
                return;

            influenceTaskNumber = tmpInversionResultsIterationSelected;
            sourceTypeInversion = GetSourceTypeObserving();

            SaveModel(LastCalculationsDirectory + "/" + ModelName + ".gmd");

            worker.DoWork += StartTaskInfluence;
            worker.RunWorkerCompleted += FinishTaskInfluence;
            calculationRegime = Tasks.TasksUtilities.GetTaskType(ComboBoxCalculationRegime.Text);
            sourceType = GetSourceType();

            CalculationsStopInversionGeometry = false;
            CalculationLaunchedTaskInfluence = true;
            

            worker.RunWorkerAsync();
        }

        private void StartTaskVP(object sender, DoWorkEventArgs e)
        {
            Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
            StreamWriter IPLog = null;
            String NativeDirectoryName = "ResultsIP";
            String IrkutskDirectoryName = "ResultsIPExt";
            try
            {
                String path;
                List<String> serverNames = new List<string>();

                if (FilesWorking.ReadMachineFile("C:/GI/machinefile", serverNames, true) != 0)
                {
                    MessageBox.Show("Could not read machinefile", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopVP = true;
                    return;
                }

                path = LastCalculationsDirectory;
                CalculationsDirectoryVP = LastCalculationsDirectory;

                if (Utilities.LittleTools.CreateCalculationDirectory(path) != 0)
                {
                    MessageBox.Show("Could not prepare calculation directory", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopVP = true;
                    return;
                }

                if (Grouping.Grouping.WriteGroupsDataFilesPack(path + "/Calculation", observingSystem.profiles, observingSystem.groups, Tasks.TaskTypes.IP) != 0)
                    MessageBox.Show("Could not write group file pack", "Error", MessageBoxButton.OK, MessageBoxImage.Error);

                if (timeInfo.meshTimeUser.times.Count < 1)
                    Geology.Tasks.VPSettings.TimeStart = timeInfo.meshTimeUser.tStart;
                else
                    Geology.Tasks.VPSettings.TimeStart = timeInfo.meshTimeUser.times[0].Time;

                if (timeInfo.meshTimeUser.times.Count < 1)
                    Geology.Tasks.VPSettings.TimeEnd = timeInfo.meshTimeUser.tEnd;
                else
                    Geology.Tasks.VPSettings.TimeEnd = timeInfo.meshTimeUser.times[timeInfo.meshTimeUser.times.Count - 1].Time;

                IPLog = new StreamWriter(path + "/IPLog.log");
                if (Geology.Tasks.VP.StartVPTask(path + "/Calculation", observingSystem.groups, layers, objects, horizon, timeInfo, serverNames, settingsStore, ref IPLog, Tasks.TaskTypes.IP) != 0)
                {
                    if (CalculationsStopVP == false)
                        MessageBox.Show("Error during calculation", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    else
                        MessageBox.Show("Calculation stopped", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }

                if (CalculationsStopVP == false)
                {
                    if (Tasks.TasksUtilities.StartSummatorVP(CalculationsDirectoryVP + "/Calculation") != 0)
                    {
                        MessageBox.Show("Could not start summator for VP", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        CalculationsStopVP = true;
                        return;
                    }

                    Tasks.TasksUtilities.ProcessResultsDirectoryVP(CalculationsDirectoryVP + "/Calculation/", NativeDirectoryName);
                    if (settingsStore.writeIrkutskResults == true)
                        Tasks.IrkutskDataBuilder.ConvertNativeResultsDirectoryToIrkutsk(
                            CalculationsDirectoryVP + "/Calculation/" + NativeDirectoryName,
                            CalculationsDirectoryVP + "/Calculation/" + IrkutskDirectoryName,
                            ModelName);

                    if (settingsStore.RemoveSourceResultsDirectory == true)
                        Utilities.LittleTools.RemoveDirectory(CalculationsDirectoryVP + "/Calculation/Results");
                    if (settingsStore.writeNativeResults == false)
                        Utilities.LittleTools.RemoveDirectory(CalculationsDirectoryVP + "/Calculation/" + NativeDirectoryName);
                }

               
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error during calculation", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                if (IPLog != null)
                    IPLog.Close();
            }
        }
        private void StartTaskSP(object sender, DoWorkEventArgs e)
        {
            Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
            try
            {
                String path;
                String NativeDirectoryName = "ResultsEM";
                String IrkutskDirectoryName = "ResultsEMExt";
                String RewrittenDirectoryName = "ResultsEMRewritten";
                String message;
                List<String> serverNames = new List<string>();

                if (FilesWorking.ReadMachineFile("C:/GI/machinefile", serverNames, true) != 0)
                {
                    MessageBox.Show("Could not read machinefile", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopSP = true;
                    return;
                }

                path = LastCalculationsDirectory;
                CalculationsDirectorySP = LastCalculationsDirectory;
                
                if (Utilities.LittleTools.CreateCalculationDirectory(path) != 0)
                {
                    MessageBox.Show("Could not prepare calculation directory", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopSP = true;
                    return;
                }

                Tasks.TaskTypes taskType;
                if (Tasks.SPSettings.SPVP == true)
                    taskType = Tasks.TaskTypes.EMIP;
                else
                    taskType = Tasks.TaskTypes.EM;

                if (Grouping.Grouping.WriteGroupsDataFilesPack(path + "/Calculation", observingSystem.profiles, observingSystem.groups, taskType, Tasks.SPSettings.generatorType) != 0)
                {
                    MessageBox.Show("Could not write group file pack", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }


                if (timeInfo.meshTimeUser.times.Count < 1)
                    Geology.Tasks.SPSettings.TimeStart = timeInfo.meshTimeUser.tStart;
                else
                    Geology.Tasks.SPSettings.TimeStart = timeInfo.meshTimeUser.times[0].Time;

                if (timeInfo.meshTimeUser.times.Count < 1)
                    Geology.Tasks.SPSettings.TimeEnd = timeInfo.meshTimeUser.tEnd;
                else
                    Geology.Tasks.SPSettings.TimeEnd = timeInfo.meshTimeUser.times[timeInfo.meshTimeUser.times.Count - 1].Time;

                if (Geology.Tasks.SP.StartTask(path + "/Calculation", observingSystem.groups, layers, objects, horizon, timeInfo, serverNames, settingsStore, taskType, out message) != 0)
                {
                    if (CalculationsStopSP == false)
                    {
                        MessageBox.Show("Error during calculation\n" + message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        return;
                    }
                    else
                    {
                        MessageBox.Show("Calculation stopped", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        return;
                    }
                }

                if (Tasks.SPSettings.SPVP == true)
                {
                    RewrittenDirectoryName = "ResultsEMIPRewritten";
                    Utilities.LittleTools.CreateCalculationDirectory(path + "/IP");

                    Geology.Tasks.VPSettings.TimeStart = timeInfo.meshTimeUser.tStart;
                    Geology.Tasks.VPSettings.TimeEnd = timeInfo.meshTimeUser.tEnd;
                    LastCalculationsDirectory = path + "/IP";
                    StartTaskVP(null, null);
                }
                

                if (CalculationsStopSP == false)
                {
                    if (Tasks.SPSettings.SPVP == true)
                    {
                        Utilities.LittleTools.CopyDirectoryContent(path + "/IP/Calculation/Results", path + "/Calculation/Results");
                        if (Tasks.TasksUtilities.StartSummatorSPVP(path + "/Calculation") != 0)
                        {
                            MessageBox.Show("Could not start summator for SPVP", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        }
                        if (Tasks.HarmonicSettings.RewriteMode == 0 || Tasks.HarmonicSettings.RewriteMode == 1)
                        {
                            Utilities.LittleTools.ExecuteExe("C:/Geology/Modules/ReWriteDUNoVP.exe", Tasks.HarmonicSettings.RewriteMode.ToString(), CalculationsDirectoryHarmonic + "/Calculation/Results");
                        }
                    }
                    else
                    {
                        if (Tasks.TasksUtilities.StartSummatorSP(CalculationsDirectorySP + "/Calculation") != 0)
                        {
                            MessageBox.Show("Could not start summator for SP", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        }
                        if (Tasks.HarmonicSettings.RewriteMode == 0 || Tasks.HarmonicSettings.RewriteMode == 1)
                        {
                            Utilities.LittleTools.ExecuteExe("C:/Geology/Modules/ReWriteDUNoVP.exe", Tasks.HarmonicSettings.RewriteMode.ToString(), CalculationsDirectoryHarmonic + "/Calculation/Results");
                        }
                    }

                    if (Tasks.SPSettings.SPVP == true)
                    {
                        NativeDirectoryName = "ResultsEMIP";
                        IrkutskDirectoryName = "ResultsEMIPExt";
                        Tasks.TasksUtilities.ProcessResultsDirectorySPVP(CalculationsDirectorySP + "/Calculation", NativeDirectoryName, RewrittenDirectoryName);
                        if (settingsStore.writeIrkutskResults == true)
                            Tasks.IrkutskDataBuilder.ConvertNativeResultsDirectoryToIrkutsk(
                            CalculationsDirectorySP + "/Calculation/" + NativeDirectoryName,
                            CalculationsDirectorySP + "/Calculation/" + IrkutskDirectoryName,
                            ModelName);
                        if (settingsStore.RemoveSourceResultsDirectory == true)
                            Utilities.LittleTools.RemoveDirectory(CalculationsDirectorySP + "/Calculation/Results");
                        if (settingsStore.writeNativeResults == false)
                            Utilities.LittleTools.RemoveDirectory(CalculationsDirectorySP + "/Calculation/" + NativeDirectoryName);
                    }
                    else
                    {
                        NativeDirectoryName = "ResultsEM";
                        IrkutskDirectoryName = "ResultsEMExt";
                        Tasks.TasksUtilities.ProcessResultsDirectorySP(CalculationsDirectorySP + "/Calculation", NativeDirectoryName, RewrittenDirectoryName);
                        if (settingsStore.writeIrkutskResults == true)
                            Tasks.IrkutskDataBuilder.ConvertNativeResultsDirectoryToIrkutsk(
                            CalculationsDirectorySP + "/Calculation/" + NativeDirectoryName,
                            CalculationsDirectorySP + "/Calculation/" + IrkutskDirectoryName,
                            ModelName);
                        if (settingsStore.RemoveSourceResultsDirectory == true)
                            Utilities.LittleTools.RemoveDirectory(CalculationsDirectorySP + "/Calculation/Results");
                        if (settingsStore.writeNativeResults == false)
                            Utilities.LittleTools.RemoveDirectory(CalculationsDirectorySP + "/Calculation/" + NativeDirectoryName);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error during calculation", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void StartTaskSPApparentRho(object sender, DoWorkEventArgs e)
        {
            Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
            try
            {
                String path;
                String message;
                List<String> serverNames = new List<string>();

                if (FilesWorking.ReadMachineFile("C:/GI/machinefile", serverNames, true) != 0)
                {
                    MessageBox.Show("Could not read machinefile", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopInversionGeometry = true;
                    return;
                }

                path = LastCalculationsDirectory;
                CalculationsDirectoryInversionGeometry = LastCalculationsDirectory;

                if (Utilities.LittleTools.CreateCalculationDirectory(path) != 0)
                {
                    MessageBox.Show("Could not prepare calculation directory", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopInversionGeometry = true;
                    return;
                }

                Tasks.TaskTypes taskType;
                taskType = Tasks.TaskTypes.EM;

                if (Grouping.Grouping.WriteGroupsDataFilesPack(path + "/Calculation", observingSystem.profiles, observingSystem.groups, taskType, Tasks.SPSettings.generatorType) != 0)
                {
                    MessageBox.Show("Could not write group file pack", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }


                if (timeInfo.meshTimeUser.times.Count < 1)
                    Geology.Tasks.SPSettings.TimeStart = timeInfo.meshTimeUser.tStart;
                else
                    Geology.Tasks.SPSettings.TimeStart = timeInfo.meshTimeUser.times[0].Time;

                if (timeInfo.meshTimeUser.times.Count < 1)
                    Geology.Tasks.SPSettings.TimeEnd = timeInfo.meshTimeUser.tEnd;
                else
                    Geology.Tasks.SPSettings.TimeEnd = timeInfo.meshTimeUser.times[timeInfo.meshTimeUser.times.Count - 1].Time;

                ObservableCollection<CGeoLayer> tmpLayers = new ObservableCollection<CGeoLayer>();
                tmpLayers.Add(new CGeoLayer()); tmpLayers[0].H = 1e+5; tmpLayers[0].Num = 1; tmpLayers[0].RoH = tmpLayers[0].RoV = 1.0;
                tmpLayers.Add(new CGeoLayer()); tmpLayers[1].H = 1e+3; tmpLayers[1].Num = 2; tmpLayers[1].RoH = tmpLayers[1].RoV = 1.0;
                ObservableCollection<CGeoObject> tmpObjects = new ObservableCollection<CGeoObject>();
                observingSystem.WriteResultsExp(path + "/Calculation", calculationRegime, Tasks.InversionGeometrySettings.BinaryResultsExp);

                if (FilesWorking.WriteSingleStringFile(path + "/Calculation/Calculations/generator_coeff", Tasks.InversionGeometrySettings.RhoGeneratorCoefficient.ToString() + "\n") != 0)
                {
                    MessageBox.Show("Error during calculation\n" + "Could not write generator_coeff", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                if (FilesWorking.WriteSingleStringFile(path + "/Calculation/Calculations/ro_coeff", Tasks.InversionGeometrySettings.RhoRhoCoefficient.ToString() + "\n") != 0)
                {
                    MessageBox.Show("Error during calculation\n" + "Could not write ro_coeff", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                
                if (Geology.Tasks.SP.StartTask(path + "/Calculation", observingSystem.groups, tmpLayers, tmpObjects, horizon, timeInfo, serverNames, settingsStore, taskType, out message, true) != 0)
                {
                    if (CalculationsStopSP == false)
                    {
                        MessageBox.Show("Error during calculation\n" + message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        return;
                    }
                    else
                    {
                        MessageBox.Show("Calculation stopped", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        return;
                    }
                }
                
                message = "";
                if (CalculationsStopInversionGeometry == false)
                {
                    
                    if (Utilities.LittleTools.ExecuteExe("C:\\GI\\FittingRho.exe", "", path + "/Calculation/Calculations") != 0)
                    {
                        MessageBox.Show("Error during calculation\n" + message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error during calculation", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void StartTaskHarmonic(object sender, DoWorkEventArgs e)
        {
            Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
            try
            {
                String NativeDirectoryName = "ResultsHarmonic";
                String IrkutskDirectoryName = "ResultsHarmonicExt";
                String RewrittenDirectoryName = "ResultsHarmonicRewritten";
                String path;
                List<String> serverNames = new List<string>();

                if (FilesWorking.ReadMachineFile("C:/GI/machinefile", serverNames, true) != 0)
                {
                    MessageBox.Show("Could not read machinefile", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopHarmonic = true;
                    return;
                }

                path = LastCalculationsDirectory;
                CalculationsDirectoryHarmonic = LastCalculationsDirectory;
                
                if (Utilities.LittleTools.CreateCalculationDirectory(path) != 0)
                {
                    MessageBox.Show("Could not prepare calculation directory", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopHarmonic = true;
                    return;
                }

                Tasks.TaskTypes taskType;
                if (Tasks.HarmonicSettings.coleCole == true)
                    taskType = Tasks.TaskTypes.ColeCole;
                else
                    taskType = Tasks.TaskTypes.Harmonic;
                if (Grouping.Grouping.WriteGroupsDataFilesPack(path + "/Calculation", observingSystem.profiles, observingSystem.groups, taskType) != 0)
                    MessageBox.Show("Could not write group file pack", "Error", MessageBoxButton.OK, MessageBoxImage.Error);

                Geology.Tasks.HarmonicSettings.TimeStart = timeInfo.meshTimeUser.tStart;
                Geology.Tasks.HarmonicSettings.TimeEnd = timeInfo.meshTimeUser.tEnd;
                if (Geology.Tasks.Harmonic.StartTask(path + "/Calculation", observingSystem.groups, layers, objects, horizon, frequencies, serverNames, settingsStore, Tasks.HarmonicSettings.formulaNumber, taskType) != 0)
                {
                    if (CalculationsStopHarmonic == false)
                        MessageBox.Show("Error during calculation", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    else
                        MessageBox.Show("Calculation stopped", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }

                if (Tasks.HarmonicSettings.coleCole == true)
                    RewrittenDirectoryName = "ResultsColeColeRewritten";
                

                if (CalculationsStopHarmonic == false)
                {
                    if (Tasks.HarmonicSettings.coleCole == true)
                    {
                        if (Tasks.TasksUtilities.StartSummatorColeCole(CalculationsDirectoryHarmonic + "/Calculation", Tasks.HarmonicSettings.formulaNumber) != 0)
                        {
                            MessageBox.Show("Could not start summator for ColeCole", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        }
                        
                        if (Tasks.HarmonicSettings.RewriteMode == 0 || Tasks.HarmonicSettings.RewriteMode == 1)
                        {
                            Utilities.LittleTools.ExecuteExe("C:/Geology/Modules/ReWriteDUNoVP.exe", Tasks.HarmonicSettings.RewriteMode.ToString(), CalculationsDirectoryHarmonic + "/Calculation/Results");
                        }
                        
                    }
                    else
                    {
                        if (Tasks.TasksUtilities.StartSummatorHarmonic(CalculationsDirectoryHarmonic + "/Calculation") != 0)
                        {
                            MessageBox.Show("Could not start summator for Harmonic", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                            //
                        }
                        if (Tasks.HarmonicSettings.RewriteMode == 0 || Tasks.HarmonicSettings.RewriteMode == 1)
                        {
                            Utilities.LittleTools.ExecuteExe("C:/Geology/Modules/ReWriteFreq.exe", Tasks.HarmonicSettings.RewriteMode.ToString(), CalculationsDirectoryHarmonic + "/Calculation/Results");
                        }
                    }

                    if (Tasks.HarmonicSettings.coleCole == true)
                    {
                        Tasks.TasksUtilities.ProcessResultsDirectoryColeCole(CalculationsDirectoryHarmonic + "/Calculation", "ResultsColeCole", RewrittenDirectoryName);

                        NativeDirectoryName = "ResultsColeCole";
                        IrkutskDirectoryName = "ResultsColeColeExt";
                        if (settingsStore.writeIrkutskResults == true)
                            Tasks.IrkutskDataBuilder.ConvertNativeResultsDirectoryToIrkutsk(
                            CalculationsDirectoryHarmonic + "/Calculation/" + NativeDirectoryName,
                            CalculationsDirectoryHarmonic + "/Calculation/" + IrkutskDirectoryName,
                            ModelName);
                        if (settingsStore.RemoveSourceResultsDirectory == true)
                            Utilities.LittleTools.RemoveDirectory(CalculationsDirectoryHarmonic + "/Calculation/Results");
                        if (settingsStore.writeNativeResults == false)
                            Utilities.LittleTools.RemoveDirectory(CalculationsDirectoryHarmonic + "/Calculation/" + NativeDirectoryName);
                    }
                    else
                    {
                        Tasks.TasksUtilities.ProcessResultsDirectoryHarmonic(CalculationsDirectoryHarmonic + "/Calculation", "ResultsHarmonic", RewrittenDirectoryName);

                        NativeDirectoryName = "ResultsColeCole";
                        IrkutskDirectoryName = "ResultsColeColeExt";
                        if (settingsStore.RemoveSourceResultsDirectory == true)
                            Utilities.LittleTools.RemoveDirectory(CalculationsDirectoryHarmonic + "/Calculation/Results");
                        if (settingsStore.writeNativeResults == false)
                            Utilities.LittleTools.RemoveDirectory(CalculationsDirectoryHarmonic + "/Calculation/" + NativeDirectoryName);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error during calculation", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void StartTaskStationar(object sender, DoWorkEventArgs e)
        {
            Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
            try
            {
                String NativeDirectoryName = "ResultsStationar";
                String IrkutskDirectoryName = "ResultsStationarExt";
                String RewrittenDirectoryName = "ResultsStationarRewritten";
                String path;
                List<String> serverNames = new List<string>();

                if (FilesWorking.ReadMachineFile("C:/GI/machinefile", serverNames, true) != 0)
                {
                    MessageBox.Show("Could not read machinefile", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopStationar = true;
                    return;
                }

                path = LastCalculationsDirectory;
                CalculationsDirectoryStationar = LastCalculationsDirectory;

                if (Utilities.LittleTools.CreateCalculationDirectory(path) != 0)
                {
                    MessageBox.Show("Could not prepare calculation directory", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopStationar = true;
                    return;
                }

                if (Grouping.Grouping.WriteGroupsDataFilesPack(path + "/Calculation", observingSystem.profiles, observingSystem.groups, Tasks.TaskTypes.Stationar) != 0)
                    MessageBox.Show("Could not write group file pack", "Error", MessageBoxButton.OK, MessageBoxImage.Error);

                Geology.Tasks.StationarSettings.TimeStart = timeInfo.meshTimeUser.tStart;
                Geology.Tasks.StationarSettings.TimeEnd = timeInfo.meshTimeUser.tEnd;
                if (Geology.Tasks.Stationar.StartTask(path + "/Calculation", observingSystem.groups, layers, objects, horizon, serverNames, settingsStore, Tasks.TaskTypes.Stationar) != 0)
                {
                    if (CalculationsStopStationar == false)
                        MessageBox.Show("Error during calculation", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    else
                        MessageBox.Show("Calculation stopped", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }

                if (CalculationsStopStationar == false)
                {
                    if (Tasks.TasksUtilities.StartSummatorStationar(CalculationsDirectoryStationar + "/Calculation") != 0)
                        MessageBox.Show("Could not start summator for Stationar", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    else
                    {
                        if (Tasks.StationarSettings.RewriteMode == 0 || Tasks.StationarSettings.RewriteMode == 1)
                        {
                            Utilities.LittleTools.ExecuteExe("C:/Geology/Modules/ReWriteDUNoVP.exe", Tasks.StationarSettings.RewriteMode.ToString(), CalculationsDirectoryStationar + "/Calculation/Results");
                        }
                        Tasks.TasksUtilities.ProcessResultsDirectoryStationar(CalculationsDirectoryStationar + "/Calculation", "ResultsStationar", RewrittenDirectoryName);
                    }

                    if (settingsStore.RemoveSourceResultsDirectory == true)
                        Utilities.LittleTools.RemoveDirectory(CalculationsDirectoryStationar + "/Calculation/Results");
                    if (settingsStore.writeNativeResults == false)
                        Utilities.LittleTools.RemoveDirectory(CalculationsDirectoryStationar + "/Calculation/" + NativeDirectoryName);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error during calculation", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void StartTaskInversionGeometry(object sender, DoWorkEventArgs e)
        {
            Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
            StreamWriter logFile = null;
            try
            {
                String path;
                String message;
                List<String> serverNames = new List<string>();

                path = LastCalculationsDirectory;
                CalculationsDirectoryInversionGeometry = LastCalculationsDirectory;
                logFile = new StreamWriter(path + "/InversionGeometry.log");
                logFile.AutoFlush = true;

                logFile.WriteLine("Reading machinefile");
                if (FilesWorking.ReadMachineFile("C:/GI/machinefile", serverNames, true) != 0)
                {
                    logFile.WriteLine("Could not read machinefile");
                    MessageBox.Show("Could not read machinefile", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopInversionGeometry = true;
                    if (logFile != null)
                        logFile.Close();
                    return;
                }

                if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected >= inverseSystem.inversionAreas.Count)
                {
                    logFile.WriteLine("Inversion area is not selected");
                    MessageBox.Show("Inversion area is not selected", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopInversionGeometry = true;
                    if (logFile != null)
                        logFile.Close();
                    return;
                }

                logFile.WriteLine("Calculation directory = " + path);
                


                logFile.WriteLine("Creating calculation directory");
                if (Utilities.LittleTools.CreateCalculationDirectory(path) != 0)
                {
                    logFile.WriteLine("Could not prepare calculation directory");
                    MessageBox.Show("Could not prepare calculation directory", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopInversionGeometry = true;
                    if (logFile != null)
                        logFile.Close();
                    return;
                }

                logFile.WriteLine("Creating results directory");
                Geology.Utilities.LittleTools.CreateDirectory(path + "/Calculation/Results");
                logFile.WriteLine("Copying machinefile");
                File.Copy("C:/GI/machinefile", path + "/Calculation/Calculations/machinefile");

                logFile.WriteLine("Writing groupsData");
                logFile.WriteLine("Calculation regime = " + calculationRegime);
                logFile.WriteLine("Generator type = " + sourceTypeInversion);
                if (Grouping.Grouping.WriteGroupsDataFilesPack(path + "/Calculation", observingSystem.profiles, observingSystem.groups, calculationRegime, sourceTypeInversion) != 0)
                {
                    logFile.WriteLine("Could not write group file pack");
                    MessageBox.Show("Could not write group file pack", "Error", MessageBoxButton.OK, MessageBoxImage.Error);

                    if (logFile != null)
                        logFile.Close();
                    return;
                }


                logFile.WriteLine("Refreshing inversion embryos numbers");
                inverseSystem.inversionAreas[tmpInversionAreaSelected].RefreshEmbryosNumbers();
                logFile.WriteLine("Preparing inversion data");
                inverseSystem.PrepareInversionData(tmpInversionAreaSelected, layers, horizon);
                logFile.WriteLine("Writing ResultsExp");
                observingSystem.WriteResultsExp(path + "/Calculation", calculationRegime, Tasks.InversionGeometrySettings.BinaryResultsExp);
                
                if (timeInfo.meshTimeUser.times.Count < 1)
                    Geology.Tasks.SPSettings.TimeStart = timeInfo.meshTimeUser.tStart;
                else
                    Geology.Tasks.SPSettings.TimeStart = timeInfo.meshTimeUser.times[0].Time;

                if (timeInfo.meshTimeUser.times.Count < 1)
                    Geology.Tasks.SPSettings.TimeEnd = timeInfo.meshTimeUser.tEnd;
                else
                    Geology.Tasks.SPSettings.TimeEnd = timeInfo.meshTimeUser.times[timeInfo.meshTimeUser.times.Count - 1].Time;


                logFile.WriteLine("Time start = " + Geology.Tasks.SPSettings.TimeStart);
                logFile.WriteLine("Time end = " + Geology.Tasks.SPSettings.TimeEnd);

                logFile.WriteLine("Starting results monitor service");
                inverseSystem.inversionResults.StartCheckingResults(path + "/Calculation/Calculations", inverseSystem.inversionAreas[tmpInversionAreaSelected]);

                logFile.WriteLine("\n\nStarting task");
                if (Geology.Tasks.InversionGeometry.StartTask(path + "/Calculation", tmpInversionAreaSelected, inverseSystem, observingSystem.groups, layers, objects, horizon, timeInfo, inverseSystem.materials, inverseSystem.shareBounds, serverNames, settingsStore, observingSystem, sourceType, calculationRegime, frequencies, out message, ref logFile) != 0)
                {
                    if (CalculationsStopInversionGeometry == false)
                    {
                        logFile.WriteLine("Error during calculation\n" + message);
                        MessageBox.Show("Error during calculation\n" + message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                    else
                    {
                        logFile.WriteLine("Calculation stopped");
                        MessageBox.Show("Calculation stopped", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }

                logFile.WriteLine("Stopping results monitor service");
                inverseSystem.inversionResults.StopCheckingResults();

                if (logFile != null)
                    logFile.Close();
            }
            catch (Exception ex)
            {
                logFile.WriteLine("Error during calculation\n" + ex.Message);
                if (logFile != null)
                    logFile.Close();
                MessageBox.Show("Error during calculation\n" + ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                inverseSystem.inversionResults.StopCheckingResults();
            }
        }
        private void StartTaskInversionCell(object sender, DoWorkEventArgs e)
        {
            Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
            try
            {
                String path;
                List<String> serverNames = new List<string>();

                if (FilesWorking.ReadMachineFile("C:/GI/machinefile", serverNames, true) != 0)
                {
                    MessageBox.Show("Could not read machinefile", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopInversionGeometry = true;
                    return;
                }

                path = LastCalculationsDirectory;
                CalculationsDirectoryInversionCell = LastCalculationsDirectory;

                if (Utilities.LittleTools.CreateCalculationDirectory(path) != 0)
                {
                    MessageBox.Show("Could not prepare calculation directory", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopInversionCell = true;
                    return;
                }

                Geology.Utilities.LittleTools.CreateDirectory(path + "/Calculation/Results");
                File.Copy("C:/GI/machinefile", path + "/Calculation/Calculations/machinefile");

                if (Grouping.Grouping.WriteGroupsDataFilesPack(path + "/Calculation", observingSystem.profiles, observingSystem.groups, Tasks.TaskTypes.IP) != 0)
                    MessageBox.Show("Could not write group file pack", "Error", MessageBoxButton.OK, MessageBoxImage.Error);

                inverseSystem.PrepareInversionCellData();
                observingSystem.WriteResultsExp(path + "/Calculation", Tasks.TaskTypes.IP, Tasks.InversionCellSettings.BinaryResultsExp);

                                if (timeInfo.meshTimeUser.times.Count < 1)
                    Geology.Tasks.SPSettings.TimeStart = timeInfo.meshTimeUser.tStart;
                else
                    Geology.Tasks.SPSettings.TimeStart = timeInfo.meshTimeUser.times[0].Time;

                if (timeInfo.meshTimeUser.times.Count < 1)
                    Geology.Tasks.SPSettings.TimeEnd = timeInfo.meshTimeUser.tEnd;
                else
                    Geology.Tasks.SPSettings.TimeEnd = timeInfo.meshTimeUser.times[timeInfo.meshTimeUser.times.Count - 1].Time;

                if (Geology.Tasks.InversionCell.StartTask(path + "/Calculation", inverseSystem, observingSystem.groups, layers, objects, horizon, timeInfo, inverseSystem.materialsCell, serverNames, settingsStore, observingSystem, sourceType) != 0)
                {
                    if (CalculationsStopInversionCell == false)
                        MessageBox.Show("Error during calculation", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    else
                        MessageBox.Show("Calculation stopped", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }

                if (CalculationsStopInversionCell == false)
                {
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error during calculation", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void StartTaskInfluence(object sender, DoWorkEventArgs e)
        {
            Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
            try
            {
                String path;
                List<String> serverNames = new List<string>();

                if (FilesWorking.ReadMachineFile("C:/GI/machinefile", serverNames, true) != 0)
                {
                    MessageBox.Show("Could not read machinefile", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopInfluence = true;
                    return;
                }

                path = LastCalculationsDirectory;
                CalculationsDirectoryInfluence = LastCalculationsDirectory;

                if (Utilities.LittleTools.CreateCalculationDirectory(path) != 0)
                {
                    MessageBox.Show("Could not prepare calculation directory", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    CalculationsStopInfluence = true;
                    return;
                }

                Geology.Utilities.LittleTools.CreateDirectory(path + "/Calculation/Results");
                File.Copy("C:/GI/machinefile", path + "/Calculation/Calculations/machinefile");

                
                if (Grouping.Grouping.WriteGroupsDataFilesPack(path + "/Calculation", observingSystem.profiles, observingSystem.groups, calculationRegime, sourceTypeInversion) != 0)
                    MessageBox.Show("Could not write group file pack", "Error", MessageBoxButton.OK, MessageBoxImage.Error);

                observingSystem.WriteResultsExp(path + "/Calculation", calculationRegime, Tasks.InversionGeometrySettings.BinaryResultsExp);
                
                if (timeInfo.meshTimeUser.times.Count < 1)
                    Geology.Tasks.SPSettings.TimeStart = timeInfo.meshTimeUser.tStart;
                else
                    Geology.Tasks.SPSettings.TimeStart = timeInfo.meshTimeUser.times[0].Time;

                if (timeInfo.meshTimeUser.times.Count < 1)
                    Geology.Tasks.SPSettings.TimeEnd = timeInfo.meshTimeUser.tEnd;
                else
                    Geology.Tasks.SPSettings.TimeEnd = timeInfo.meshTimeUser.times[timeInfo.meshTimeUser.times.Count - 1].Time;

                inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].StartInfluenceTask();
                if (Geology.Tasks.InversionInfluence.StartTask(path + "/Calculation", tmpInversionResultsIterationSelected, inverseSystem, observingSystem.groups, layers, objects, horizon, timeInfo, serverNames, settingsStore, observingSystem, sourceType, calculationRegime, frequencies) != 0)
                {
                    if (CalculationsStopInfluence == false)
                        MessageBox.Show("Error during calculation", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    else
                        MessageBox.Show("Calculation stopped", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }

                if (CalculationsStopInfluence == false)
                {
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error during calculation", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void FinishTaskVP(object sender, RunWorkerCompletedEventArgs e)
        {
            StatusBarVP.Text = "Status: Ready";
            (ButtonStartCalculationVP.Content as TextBlock).Text = "Start calculation";
            ButtonStartCalculationVP.Background = new SolidColorBrush(Color.FromRgb(75, 177, 14));
            CalculationLaunchedVP = false;
        }
        private void FinishTaskSP(object sender, RunWorkerCompletedEventArgs e)
        {
            StatusBarSP.Text = "Status: Ready";
            (ButtonStartCalculationSP.Content as TextBlock).Text = "Start calculation";
            ButtonStartCalculationSP.Background = new SolidColorBrush(Color.FromRgb(75, 177, 14));
            CalculationLaunchedSP = false;
        }
        private void FinishTaskHarmonic(object sender, RunWorkerCompletedEventArgs e)
        {
            StatusBarHarmonic.Text = "Status: Ready";
            (ButtonStartCalculationHarm.Content as TextBlock).Text = "Start calculation";
            ButtonStartCalculationHarm.Background = new SolidColorBrush(Color.FromRgb(75, 177, 14));
            CalculationLaunchedHarmonic = false;
        }
        private void FinishTaskStationar(object sender, RunWorkerCompletedEventArgs e)
        {
            StatusBarStationar.Text = "Status: Ready";
            (ButtonStartCalculationStat.Content as TextBlock).Text = "Start calculation";
            ButtonStartCalculationStat.Background = new SolidColorBrush(Color.FromRgb(75, 177, 14));
            CalculationLaunchedStationar = false;
        }
        private void FinishTaskInversionGeometry(object sender, RunWorkerCompletedEventArgs e)
        {
            if (CalculationsStopInversionGeometry == false)
            {

            }

            StatusBarInversionGeometry.Text = "Status: Ready";
            (ButtonStartInversion.Content as TextBlock).Text = "Start inversion";
            ButtonStartInversion.Background = new SolidColorBrush(Color.FromRgb(75, 177, 14));
            CalculationLaunchedInversionGeometry = false;
            ButtonStopByIteration.Visibility = System.Windows.Visibility.Hidden;
        }
        private void FinishTaskInversionCell(object sender, RunWorkerCompletedEventArgs e)
        {
            if (CalculationsStopInversionCell == false)
            {

            }

            StatusBarInversionCell.Text = "Status: Ready";
            (ButtonStartInversionCell.Content as TextBlock).Text = "Start inversion";
            ButtonStartInversionCell.Background = new SolidColorBrush(Color.FromRgb(75, 177, 14));
            CalculationLaunchedInversionCell = false;
        }
        private void FinishTaskInfluence(object sender, RunWorkerCompletedEventArgs e)
        {
            if (CalculationsStopInfluence == false)
            {

            }

            inverseSystem.inversionResults.iterationResults[influenceTaskNumber].StoppedInfluenceTask();
            influenceTaskNumber = -1;
            CalculationLaunchedTaskInfluence = false;
            //ListBoxInversionResultsIterations.Items.Refresh();
        }

        private void ButtonStartCalculationVP_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                String text = (ButtonStartCalculationVP.Content as TextBlock).Text;
                switch (text)
                {
                    case "Start calculation":
                        StartTaskVPAsync();
                        break;
                    case "Stop":
                        FilesWorking.WriteEmptyFile(CalculationsDirectoryVP + "/Calculation/Calculations/stop");
                        StatusBarVP.Text = "Stopping";
                        CalculationsStopVP = true;
                        break;
                }
            }
            catch(Exception ex)
            {

            }
        }
        private void ButtonStartCalculationSP_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                String text = (ButtonStartCalculationSP.Content as TextBlock).Text;
                switch (text)
                {
                    case "Start calculation":
                        StartTaskSPAsync();
                        break;
                    case "Stop":
                        FilesWorking.WriteEmptyFile(CalculationsDirectorySP + "/Calculation/Calculations/stop");
                        StatusBarSP.Text = "Stopping";
                        CalculationsStopSP = true;
                        break;
                }
            }
            catch (Exception ex)
            {

            }
        }
        private void ButtonStartCalculationHarm_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                String text = (ButtonStartCalculationHarm.Content as TextBlock).Text;
                switch (text)
                {
                    case "Start calculation":
                        StartTaskHarmonicAsync();
                        break;
                    case "Stop":
                        FilesWorking.WriteEmptyFile(CalculationsDirectoryHarmonic + "/Calculation/Calculations/stop");
                        StatusBarHarmonic.Text = "Stopping";
                        CalculationsStopHarmonic = true;
                        break;
                }
            }
            catch (Exception ex)
            {

            }
        }
        private void ButtonStartCalculationStat_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                String text = (ButtonStartCalculationStat.Content as TextBlock).Text;
                switch (text)
                {
                    case "Start calculation":
                        StartTaskStationarAsync();
                        break;
                    case "Stop":
                        FilesWorking.WriteEmptyFile(CalculationsDirectoryStationar + "/Calculation/Calculations/stop");
                        StatusBarStationar.Text = "Stopping";
                        CalculationsStopStationar = true;
                        break;
                }
            }
            catch (Exception ex)
            {

            }
        }
        private void ButtonStartInversionGeometry_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                String text = (ButtonStartInversion.Content as TextBlock).Text;
                switch (text)
                {
                    case "Start inversion":
                        if (Tasks.InversionGeometrySettings.ApparentRho)
                            StartTaskSPApparentRhoAsync();
                        else
                            StartTaskInversionGeometryAsync();
                        ButtonStopByIteration.Visibility = System.Windows.Visibility.Visible;
                        break;
                    case "Stop":
                        FilesWorking.WriteEmptyFile(CalculationsDirectoryInversionGeometry + "/Calculation/Calculations/stop");
                        StatusBarInversionGeometry.Text = "Stopping";
                        CalculationsStopInversionGeometry = true;
                        break;
                }
            }
            catch (Exception ex)
            {

            }
        }
        
        private void ButtonStopByIteration_Click(object sender, RoutedEventArgs e)
        {
            FilesWorking.WriteSingleStringFile(CalculationsDirectoryInversionGeometry + "/Calculation/Calculations/iter_stop", "1\n");
            StatusBarInversionGeometry.Text = "Stopping";
            CalculationsStopInversionGeometry = true;
        }
        private void ButtonStartInversionCell_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                String text = (ButtonStartInversionCell.Content as TextBlock).Text;
                switch (text)
                {
                    case "Start inversion":
                        StartTaskInversionCellAsync();
                        break;
                    case "Stop":
                        FilesWorking.WriteEmptyFile(CalculationsDirectoryInversionCell + "/Calculation/Calculations/stop");
                        StatusBarInversionCell.Text = "Stopping";
                        CalculationsStopInversionCell = true;
                        break;
                }
            }
            catch (Exception ex)
            {

            }
        }


        //============================================================================ VP

        private void TextBoxInvFlag1VP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag1VP.Text, ref Tasks.VPSettings.MNSea);
        }
        private void TextBoxInvFlag2VP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag2VP.Text, ref Tasks.VPSettings.WithDDV);
        }
        private void TextBoxInvFlag3VP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag3VP.Text, ref Tasks.VPSettings.MNSeaType);
        }
        private void TextBoxInvFlag4VP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag4VP.Text, ref Tasks.VPSettings.WithDV);
        }
        private void TextBoxInvFlag5VP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag5VP.Text, ref Tasks.VPSettings.WithP1);
        }
        private void TextBoxInvFlag1VP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag1VP.Text, ref Tasks.VPSettings.MNSea);
        }
        private void TextBoxInvFlag2VP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag2VP.Text, ref Tasks.VPSettings.WithDDV);
        }
        private void TextBoxInvFlag3VP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag3VP.Text, ref Tasks.VPSettings.MNSeaType);
        }
        private void TextBoxInvFlag4VP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag4VP.Text, ref Tasks.VPSettings.WithDV);
        }
        private void TextBoxInvFlag5VP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag5VP.Text, ref Tasks.VPSettings.WithP1);
        }
        private void CheckBoxA0CalcVP_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.VPSettings.A0Calc = (bool)CheckBoxA0CalcVP.IsChecked;
        }
        private void CheckBoxMarineSettingsFDVP_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.VPSettings.toUseFD = (bool)CheckBoxMarineSettingsFDVP.IsChecked;
        }
        private void CheckBoxMarineSettingsFDCVP_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.VPSettings.toUseFDC = (bool)CheckBoxMarineSettingsFDCVP.IsChecked;
        }
        private void CheckBoxMarineSettingsTDVP_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.VPSettings.toUseTD = (bool)CheckBoxMarineSettingsTDVP.IsChecked;
        }
        private void TextBoxMaxProcessesStartedVP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMaxProcessesStartedVP.Text, ref Tasks.VPSettings.max_process_started);
        }
        private void TextBoxMaxReconnectTrialsVP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMaxReconnectTrialsVP.Text, ref Tasks.VPSettings.max_reconnect_trials);
        }
        private void TextBoxMaxTaskFailsCountVP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMaxTaskFailsCountVP.Text, ref Tasks.VPSettings.max_task_fails_count);
        }
        private void TextBoxTasksCheckingTimeVP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxTasksCheckingTimeVP.Text, ref Tasks.VPSettings.tasks_checking_time);
        }
        private void TextBoxMaxProcessesStartedVP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxMaxProcessesStartedVP.Text, ref Tasks.VPSettings.max_process_started);
        }
        private void TextBoxMaxReconnectTrialsVP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxMaxReconnectTrialsVP.Text, ref Tasks.VPSettings.max_reconnect_trials);
        }
        private void TextBoxMaxTaskFailsCountVP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxMaxTaskFailsCountVP.Text, ref Tasks.VPSettings.max_task_fails_count);
        }
        private void TextBoxTasksCheckingTimeVP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxTasksCheckingTimeVP.Text, ref Tasks.VPSettings.tasks_checking_time);
        }

        //============================================================================ SP
        private void TextBoxInvFlag1SP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag1SP.Text, ref Tasks.SPSettings.MNSea);
        }
        private void TextBoxInvFlag2SP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag2SP.Text, ref Tasks.SPSettings.WithDDV);
        }
        private void TextBoxInvFlag3SP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag3SP.Text, ref Tasks.SPSettings.MNSeaType);
        }
        private void TextBoxInvFlag4SP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag4SP.Text, ref Tasks.SPSettings.WithDV);
        }
        private void TextBoxInvFlag5SP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag5SP.Text, ref Tasks.SPSettings.WithP1);
        }
        private void TextBoxInvFlag1SP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag1SP.Text, ref Tasks.SPSettings.MNSea);
        }
        private void TextBoxInvFlag2SP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag2SP.Text, ref Tasks.SPSettings.WithDDV);
        }
        private void TextBoxInvFlag3SP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag3SP.Text, ref Tasks.SPSettings.MNSeaType);
        }
        private void TextBoxInvFlag4SP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag4SP.Text, ref Tasks.SPSettings.WithDV);
        }
        private void TextBoxInvFlag5SP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag5SP.Text, ref Tasks.SPSettings.WithP1);
        }
        private void CheckBoxA0CalcSP_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.SPSettings.A0Calc = (bool)CheckBoxA0CalcSP.IsChecked;
        }
        private void CheckBoxMarineSettingsFDSP_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.SPSettings.toUseFD = (bool)CheckBoxMarineSettingsFDSP.IsChecked;
        }
        private void CheckBoxMarineSettingsFDCSP_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.SPSettings.toUseFDC = (bool)CheckBoxMarineSettingsFDCSP.IsChecked;
        }
        private void CheckBoxMarineSettingsTDSP_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.SPSettings.toUseTD = (bool)CheckBoxMarineSettingsTDSP.IsChecked;
        }
        private void TextBoxMaxProcessesStartedSP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMaxProcessesStartedSP.Text, ref Tasks.SPSettings.max_process_started);
        }
        private void TextBoxMaxReconnectTrialsSP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMaxReconnectTrialsSP.Text, ref Tasks.SPSettings.max_reconnect_trials);
        }
        private void TextBoxMaxTaskFailsCountSP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMaxTaskFailsCountSP.Text, ref Tasks.SPSettings.max_task_fails_count);
        }
        private void TextBoxTasksCheckingTimeSP_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxTasksCheckingTimeSP.Text, ref Tasks.SPSettings.tasks_checking_time);
        }
        private void TextBoxMaxProcessesStartedSP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxMaxProcessesStartedSP.Text, ref Tasks.SPSettings.max_process_started);
        }
        private void TextBoxMaxReconnectTrialsSP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxMaxReconnectTrialsSP.Text, ref Tasks.SPSettings.max_reconnect_trials);
        }
        private void TextBoxMaxTaskFailsCountSP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxMaxTaskFailsCountSP.Text, ref Tasks.SPSettings.max_task_fails_count);
        }
        private void TextBoxTasksCheckingTimeSP_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxTasksCheckingTimeSP.Text, ref Tasks.SPSettings.tasks_checking_time);
        }

        //============================================================================ Stationar

        private void TextBoxInvFlag1Stat_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag1Stat.Text, ref Tasks.StationarSettings.MNSea);
        }
        private void TextBoxInvFlag2Stat_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag2Stat.Text, ref Tasks.StationarSettings.WithDDV);
        }
        private void TextBoxInvFlag3Stat_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag3Stat.Text, ref Tasks.StationarSettings.MNSeaType);
        }
        private void TextBoxInvFlag4Stat_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag4Stat.Text, ref Tasks.StationarSettings.WithDV);
        }
        private void TextBoxInvFlag5Stat_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag5Stat.Text, ref Tasks.StationarSettings.WithP1);
        }
        private void TextBoxInvFlag1Stat_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag1Stat.Text, ref Tasks.StationarSettings.MNSea);
        }
        private void TextBoxInvFlag2Stat_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag2Stat.Text, ref Tasks.StationarSettings.WithDDV);
        }
        private void TextBoxInvFlag3Stat_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag3Stat.Text, ref Tasks.StationarSettings.MNSeaType);
        }
        private void TextBoxInvFlag4Stat_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag4Stat.Text, ref Tasks.StationarSettings.WithDV);
        }
        private void TextBoxInvFlag5Stat_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag5Stat.Text, ref Tasks.StationarSettings.WithP1);
        }
        private void CheckBoxA0CalcStat_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.StationarSettings.A0Calc = (bool)CheckBoxA0CalcStat.IsChecked;
        }
        private void CheckBoxMarineSettingsFDStat_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.StationarSettings.toUseFD = (bool)CheckBoxMarineSettingsFDStat.IsChecked;
        }
        private void CheckBoxMarineSettingsFDCStat_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.StationarSettings.toUseFDC = (bool)CheckBoxMarineSettingsFDCStat.IsChecked;
        }
        private void CheckBoxMarineSettingsTDStat_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.StationarSettings.toUseTD = (bool)CheckBoxMarineSettingsTDStat.IsChecked;
        }
        private void TextBoxMaxProcessesStartedStat_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMaxProcessesStartedStat.Text, ref Tasks.StationarSettings.max_process_started);
        }
        private void TextBoxMaxReconnectTrialsStat_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMaxReconnectTrialsStat.Text, ref Tasks.StationarSettings.max_reconnect_trials);
        }
        private void TextBoxMaxTaskFailsCountStat_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMaxTaskFailsCountStat.Text, ref Tasks.StationarSettings.max_task_fails_count);
        }
        private void TextBoxTasksCheckingTimeStat_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxTasksCheckingTimeStat.Text, ref Tasks.StationarSettings.tasks_checking_time);
        }
        private void TextBoxMaxProcessesStartedStat_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxMaxProcessesStartedStat.Text, ref Tasks.StationarSettings.max_process_started);
        }
        private void TextBoxMaxReconnectTrialsStat_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxMaxReconnectTrialsStat.Text, ref Tasks.StationarSettings.max_reconnect_trials);
        }
        private void TextBoxMaxTaskFailsCountStat_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxMaxTaskFailsCountStat.Text, ref Tasks.StationarSettings.max_task_fails_count);
        }
        private void TextBoxTasksCheckingTimeStat_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxTasksCheckingTimeStat.Text, ref Tasks.StationarSettings.tasks_checking_time);
        }

        //============================================================================ Harmonic

        private void renumberFrequencies()
        {
            for (int i = 0; i < frequencies.Count; i++)
                frequencies[i].Number = i + 1;
            DataGridFrequencies.Items.Refresh();
        }
        private void ComboBoxColeColePreset_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (CheckBoxColeCole.IsChecked == true)
            {
                if (ComboBoxColeColePreset.SelectedIndex >= 0 && ComboBoxColeColePreset.SelectedIndex < ComboBoxColeColePreset.Items.Count)
                {
                    switch (ComboBoxColeColePreset.SelectedItem.ToString())
                    {
                        case "2":
                            FilesWorking.ReadFrequencyFile("C:\\Cole_Cole\\1\\freq_calc", frequencies);
                            DataGridFrequenciesColumnFrequency.IsReadOnly = true;
                            DataGridFrequencies.Items.Refresh();
                            Tasks.HarmonicSettings.coleColeSignalLength = 2;
                            Tasks.HarmonicSettings.formulaNumber = 1;
                            break;
                        case "4":
                            FilesWorking.ReadFrequencyFile("C:\\Cole_Cole\\2\\freq_calc", frequencies);
                            DataGridFrequenciesColumnFrequency.IsReadOnly = true;
                            DataGridFrequencies.Items.Refresh();
                            Tasks.HarmonicSettings.coleColeSignalLength = 4;
                            Tasks.HarmonicSettings.formulaNumber = 2;
                            break;
                        case "8":
                            FilesWorking.ReadFrequencyFile("C:\\Cole_Cole\\3\\freq_calc", frequencies);
                            DataGridFrequenciesColumnFrequency.IsReadOnly = true;
                            DataGridFrequencies.Items.Refresh();
                            Tasks.HarmonicSettings.coleColeSignalLength = 8;
                            Tasks.HarmonicSettings.formulaNumber = 3;
                            break;
                        case "25":
                            FilesWorking.ReadFrequencyFile("C:\\Cole_Cole\\4\\freq_calc", frequencies);
                            DataGridFrequenciesColumnFrequency.IsReadOnly = true;
                            DataGridFrequencies.Items.Refresh();
                            Tasks.HarmonicSettings.coleColeSignalLength = 25;
                            Tasks.HarmonicSettings.formulaNumber = 4;
                            break;
                    }
                }
            }
        }
        private void CheckBoxColeCole_Checked(object sender, RoutedEventArgs e)
        {
            if (CheckBoxColeCole.IsChecked == true)
            {
                if (ComboBoxColeColePreset.SelectedIndex >= 0 && ComboBoxColeColePreset.SelectedIndex < ComboBoxColeColePreset.Items.Count)
                {
                    switch (ComboBoxColeColePreset.SelectedItem.ToString())
                    {
                        case "2":
                            FilesWorking.ReadFrequencyFile("C:\\Cole_Cole\\1\\freq_calc", frequencies);
                            DataGridFrequenciesColumnFrequency.IsReadOnly = true;
                            DataGridFrequencies.Items.Refresh();
                            break;
                        case "4":
                            FilesWorking.ReadFrequencyFile("C:\\Cole_Cole\\2\\freq_calc", frequencies);
                            DataGridFrequenciesColumnFrequency.IsReadOnly = true;
                            DataGridFrequencies.Items.Refresh();
                            break;
                        case "8":
                            FilesWorking.ReadFrequencyFile("C:\\Cole_Cole\\3\\freq_calc", frequencies);
                            DataGridFrequenciesColumnFrequency.IsReadOnly = true;
                            DataGridFrequencies.Items.Refresh();
                            break;
                        case "25":
                            FilesWorking.ReadFrequencyFile("C:\\Cole_Cole\\4\\freq_calc", frequencies);
                            DataGridFrequenciesColumnFrequency.IsReadOnly = true;
                            DataGridFrequencies.Items.Refresh();                            
                            break;
                    }

                    Tasks.HarmonicSettings.formulaNumber = ComboBoxColeColePreset.SelectedIndex + 1;
                }
                DataGridFrequencies.CanUserDeleteRows = false;
            }
            else
            {
                DataGridFrequenciesColumnFrequency.IsReadOnly = false;
                DataGridFrequencies.CanUserDeleteRows = true;
            }

            Tasks.HarmonicSettings.coleCole = (bool)CheckBoxColeCole.IsChecked;
        }
        private void DataGridFrequencies_KeyDown(object sender, KeyEventArgs e)
        {
            if (DataGridFrequencies.SelectedIndex >= 0 && DataGridFrequencies.SelectedIndex < DataGridFrequencies.Items.Count)
            {
                if (e.Key == Key.Delete && CheckBoxColeCole.IsChecked == false)
                {
                    DataGridFrequencies.Items.RemoveAt(DataGridFrequencies.SelectedIndex);
                    if (DataGridFrequencies.SelectedIndex >= DataGridFrequencies.Items.Count)
                        DataGridFrequencies.SelectedIndex--;

                    renumberFrequencies();
                }
            }
        }
        private void ButtonAddFrequency_Click(object sender, RoutedEventArgs e)
        {
            if (CheckBoxColeCole.IsChecked == false)
            {
                Tasks.SetDouble1 newFrequency = new Tasks.SetDouble1();
                newFrequency.Number = 0;
                newFrequency.Value = 1.0;
                frequencies.Add(newFrequency);
                renumberFrequencies();
            }
        }

        private void TextBoxInvFlag1Harm_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag1Harm.Text, ref Tasks.HarmonicSettings.MNSea);
        }
        private void TextBoxInvFlag2Harm_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag2Harm.Text, ref Tasks.HarmonicSettings.WithDDV);
        }
        private void TextBoxInvFlag3Harm_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag3Harm.Text, ref Tasks.HarmonicSettings.MNSeaType);
        }
        private void TextBoxInvFlag4Harm_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag4Harm.Text, ref Tasks.HarmonicSettings.WithDV);
        }
        private void TextBoxInvFlag5Harm_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag5Harm.Text, ref Tasks.HarmonicSettings.WithP1);
        }
        private void TextBoxInvFlag1Harm_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag1Harm.Text, ref Tasks.HarmonicSettings.MNSea);
        }
        private void TextBoxInvFlag2Harm_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag2Harm.Text, ref Tasks.HarmonicSettings.WithDDV);
        }
        private void TextBoxInvFlag3Harm_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag3Harm.Text, ref Tasks.HarmonicSettings.MNSeaType);
        }
        private void TextBoxInvFlag4Harm_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag4Harm.Text, ref Tasks.HarmonicSettings.WithDV);
        }
        private void TextBoxInvFlag5Harm_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag5Harm.Text, ref Tasks.HarmonicSettings.WithP1);
        }
        private void TextBoxMaxProcessesStartedHarm_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMaxProcessesStartedHarm.Text, ref Tasks.HarmonicSettings.max_process_started);
        }
        private void TextBoxMaxReconnectTrialsHarm_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMaxReconnectTrialsHarm.Text, ref Tasks.HarmonicSettings.max_reconnect_trials);
        }
        private void TextBoxMaxTaskFailsCountHarm_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMaxTaskFailsCountHarm.Text, ref Tasks.HarmonicSettings.max_task_fails_count);
        }
        private void TextBoxTasksCheckingTimeHarm_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxTasksCheckingTimeHarm.Text, ref Tasks.HarmonicSettings.tasks_checking_time);
        }
        private void TextBoxMaxProcessesStartedHarm_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxMaxProcessesStartedHarm.Text, ref Tasks.HarmonicSettings.max_process_started);
        }
        private void TextBoxMaxReconnectTrialsHarm_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxMaxReconnectTrialsHarm.Text, ref Tasks.HarmonicSettings.max_reconnect_trials);
        }
        private void TextBoxMaxTaskFailsCountHarm_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxMaxTaskFailsCountHarm.Text, ref Tasks.HarmonicSettings.max_task_fails_count);
        }
        private void TextBoxTasksCheckingTimeHarm_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxTasksCheckingTimeHarm.Text, ref Tasks.HarmonicSettings.tasks_checking_time);
        }

        private void CheckBoxA0CalcHarm_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.HarmonicSettings.A0Calc = (bool)CheckBoxA0CalcHarm.IsChecked;
        }
        private void CheckBoxMarineSettingsFDHarm_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.HarmonicSettings.toUseFD = (bool)CheckBoxMarineSettingsFDHarm.IsChecked;
        }
        private void CheckBoxMarineSettingsFDCHarm_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.HarmonicSettings.toUseFDC = (bool)CheckBoxMarineSettingsFDCHarm.IsChecked;
        }
        private void CheckBoxMarineSettingsTDHarm_CheckChanged(object sender, RoutedEventArgs e)
        {
            Tasks.HarmonicSettings.toUseTD = (bool)CheckBoxMarineSettingsTDHarm.IsChecked;
        }

        //============================================================================ Inversion
        private void TextBoxFitBegin_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxFitBegin.Text, ref Tasks.InversionGeometrySettings.fitBegin);
        }
        private void TextBoxFitBegin_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxFitBegin.Text, ref Tasks.InversionGeometrySettings.fitBegin);
        }
        private void TextBoxFitEnd_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxFitEnd.Text, ref Tasks.InversionGeometrySettings.fitEnd);
        }
        private void TextBoxFitEnd_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxFitEnd.Text, ref Tasks.InversionGeometrySettings.fitEnd);
        }

        private void TextBoxFitBeginCell_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxFitBeginCell.Text, ref Tasks.InversionCellSettings.fitBegin);
        }
        private void TextBoxFitBeginCell_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxFitBeginCell.Text, ref Tasks.InversionCellSettings.fitBegin);
        }
        private void TextBoxFitEndCell_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxFitEndCell.Text, ref Tasks.InversionCellSettings.fitEnd);
        }
        private void TextBoxFitEndCell_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxFitEndCell.Text, ref Tasks.InversionCellSettings.fitEnd);
        }

        //===================================================================================== Common

        private int SaveModel(String fileName)
        {
            return FilesWorking.SaveModel(fileName, layers, objects, depsLayer, depsObject, visibleLayers, GlobalBoundingBox, currentSaveFileName, LastSaveOpenDirectory, LastSaveOpenDirectory, LastSaveOpenDirectory, dataBB, observingSystem, timeInfo, horizon, settingsStore, frequencies, inverseSystem, sourceType, calculationRegime, postProcessingSystem, stacks);
        }
        private void setAllFields()
        {
            TextBoxX0.Text = Observing.ObservingSettings.X0.ToString();
            TextBoxY0.Text = Observing.ObservingSettings.Y0.ToString();
            TextBoxZ0.Text = Observing.ObservingSettings.Z0.ToString();
            TextBoxXR.Text = Observing.ObservingSettings.XR.ToString();
            TextBoxYR.Text = Observing.ObservingSettings.YR.ToString();

            TextBoxAngle.Text = Observing.ObservingSettings.Angle.ToString();
            TextBoxRecieverPointSize.Text = Observing.ObservingSettings.recieverPointSize.ToString();
            ButtonSelectRecieverPointColor.Background = new SolidColorBrush(Observing.ObservingSettings.recieverPointColor);
            TextBoxCurrent.Text = Tasks.BasicTaskSettings.current.ToString();
            TextBoxRoundsGen.Text = Tasks.BasicTaskSettings.generatorRoundsCount.ToString();
            TextBoxRoundsRec.Text = Tasks.BasicTaskSettings.recieverRoundsCount.ToString();
            TextBoxInvFlag1VP.Text = Tasks.VPSettings.MNSea.ToString();
            TextBoxInvFlag2VP.Text = Tasks.VPSettings.WithDDV.ToString();
            TextBoxInvFlag3VP.Text = Tasks.VPSettings.MNSeaType.ToString();
            TextBoxInvFlag4VP.Text = Tasks.VPSettings.WithDV.ToString();
            TextBoxInvFlag5VP.Text = Tasks.VPSettings.WithP1.ToString();
            TextBoxMaxProcessesStartedVP.Text = Tasks.VPSettings.max_process_started.ToString();
            TextBoxMaxReconnectTrialsVP.Text = Tasks.VPSettings.max_reconnect_trials.ToString();
            TextBoxMaxTaskFailsCountVP.Text = Tasks.VPSettings.max_task_fails_count.ToString();
            TextBoxTasksCheckingTimeVP.Text = Tasks.VPSettings.tasks_checking_time.ToString();
            CheckBoxA0CalcVP.IsChecked = Tasks.VPSettings.A0Calc;
            CheckBoxMarineSettingsFDVP.IsChecked = Tasks.VPSettings.toUseFD;
            CheckBoxMarineSettingsFDCVP.IsChecked = Tasks.VPSettings.toUseFDC;
            CheckBoxMarineSettingsTDVP.IsChecked = Tasks.VPSettings.toUseTD;


            TextBoxInvFlag1SP.Text = Tasks.SPSettings.MNSea.ToString();
            TextBoxInvFlag2SP.Text = Tasks.SPSettings.WithDDV.ToString();
            TextBoxInvFlag3SP.Text = Tasks.SPSettings.MNSeaType.ToString();
            TextBoxInvFlag4SP.Text = Tasks.SPSettings.WithDV.ToString();
            TextBoxInvFlag5SP.Text = Tasks.SPSettings.WithP1.ToString();
            TextBoxMaxProcessesStartedSP.Text = Tasks.SPSettings.max_process_started.ToString();
            TextBoxMaxReconnectTrialsSP.Text = Tasks.SPSettings.max_reconnect_trials.ToString();
            TextBoxMaxTaskFailsCountSP.Text = Tasks.SPSettings.max_task_fails_count.ToString();
            TextBoxTasksCheckingTimeSP.Text = Tasks.SPSettings.tasks_checking_time.ToString();
            CheckBoxA0CalcSP.IsChecked = Tasks.SPSettings.A0Calc;
            CheckBoxMarineSettingsFDSP.IsChecked = Tasks.SPSettings.toUseFD;
            CheckBoxMarineSettingsFDCSP.IsChecked = Tasks.SPSettings.toUseFDC;
            CheckBoxMarineSettingsTDSP.IsChecked = Tasks.SPSettings.toUseTD;
            CheckBoxSPVP.IsChecked = Tasks.SPSettings.SPVP;

            TextBoxInvFlag1Stat.Text = Tasks.StationarSettings.MNSea.ToString();
            TextBoxInvFlag2Stat.Text = Tasks.StationarSettings.WithDDV.ToString();
            TextBoxInvFlag3Stat.Text = Tasks.StationarSettings.MNSeaType.ToString();
            TextBoxInvFlag4Stat.Text = Tasks.StationarSettings.WithDV.ToString();
            TextBoxInvFlag5Stat.Text = Tasks.StationarSettings.WithP1.ToString();
            TextBoxMaxProcessesStartedStat.Text = Tasks.StationarSettings.max_process_started.ToString();
            TextBoxMaxReconnectTrialsStat.Text = Tasks.StationarSettings.max_reconnect_trials.ToString();
            TextBoxMaxTaskFailsCountStat.Text = Tasks.StationarSettings.max_task_fails_count.ToString();
            TextBoxTasksCheckingTimeStat.Text = Tasks.StationarSettings.tasks_checking_time.ToString();
            CheckBoxA0CalcStat.IsChecked = Tasks.StationarSettings.A0Calc;
            CheckBoxMarineSettingsFDStat.IsChecked = Tasks.StationarSettings.toUseFD;
            CheckBoxMarineSettingsFDCStat.IsChecked = Tasks.StationarSettings.toUseFDC;
            CheckBoxMarineSettingsTDStat.IsChecked = Tasks.StationarSettings.toUseTD;

            TextBoxInvFlag1Harm.Text = Tasks.HarmonicSettings.MNSea.ToString();
            TextBoxInvFlag2Harm.Text = Tasks.HarmonicSettings.WithDDV.ToString();
            TextBoxInvFlag3Harm.Text = Tasks.HarmonicSettings.MNSeaType.ToString();
            TextBoxInvFlag4Harm.Text = Tasks.HarmonicSettings.WithDV.ToString();
            TextBoxInvFlag5Harm.Text = Tasks.HarmonicSettings.WithP1.ToString();
            TextBoxMaxProcessesStartedHarm.Text = Tasks.HarmonicSettings.max_process_started.ToString();
            TextBoxMaxReconnectTrialsHarm.Text = Tasks.HarmonicSettings.max_reconnect_trials.ToString();
            TextBoxMaxTaskFailsCountHarm.Text = Tasks.HarmonicSettings.max_task_fails_count.ToString();
            TextBoxTasksCheckingTimeHarm.Text = Tasks.HarmonicSettings.tasks_checking_time.ToString();
            CheckBoxA0CalcHarm.IsChecked = Tasks.HarmonicSettings.A0Calc;
            CheckBoxMarineSettingsFDHarm.IsChecked = Tasks.HarmonicSettings.toUseFD;
            CheckBoxMarineSettingsFDCHarm.IsChecked = Tasks.HarmonicSettings.toUseFDC;
            CheckBoxMarineSettingsTDHarm.IsChecked = Tasks.HarmonicSettings.toUseTD;
            CheckBoxColeCole.IsChecked = Tasks.HarmonicSettings.coleCole;
            ComboBoxColeColePreset.SelectedIndex = ComboBoxColeColePreset.Items.IndexOf(Tasks.HarmonicSettings.coleColeSignalLength.ToString());

            TextBoxImpLength.Text = Tasks.SPSettings.ImpImpLength.ToString();
            TextBoxImpPauseLength.Text = Tasks.SPSettings.ImpPauseLength.ToString();
            TextBoxImpCount.Text = Tasks.SPSettings.ImpImpCount.ToString();

            TextBoxHorizon.Text = horizon.ToString();

            DataGridFrequencies.Items.Refresh();

            ListBoxInversionAreas.Items.Refresh();

            SetSourceType(sourceType, ComboBoxSourceType);
            ComboBoxCalculationRegime.Text = Tasks.TasksUtilities.GetTaskType(calculationRegime);

            TextBoxFitBegin.Text = Tasks.InversionGeometrySettings.fitBegin.ToString();
            TextBoxFitEnd.Text = Tasks.InversionGeometrySettings.fitEnd.ToString();

            TextBoxInvFlag1InvCell.Text = Tasks.InversionCellSettings.MNSea.ToString();
            TextBoxInvFlag2InvCell.Text = Tasks.InversionCellSettings.WithDDV.ToString();
            TextBoxInvFlag3InvCell.Text = Tasks.InversionCellSettings.MNSeaType.ToString();
            TextBoxInvFlag4InvCell.Text = Tasks.InversionCellSettings.WithDV.ToString();
            TextBoxInvFlag5InvCell.Text = Tasks.InversionCellSettings.WithP1.ToString();
            TextBoxMaxIterCell.Text = Tasks.InversionCellSettings.maxIter.ToString();
            CheckBoxFitAlphaCell.IsChecked = Tasks.InversionCellSettings.fitAlpha;
            CheckBoxFitBetaCell.IsChecked = Tasks.InversionCellSettings.fitBeta;
            CheckBoxFitTauCell.IsChecked = Tasks.InversionCellSettings.fitTau;
            if (Tasks.InversionCellSettings.smoothWithGamma == 1)
                CheckBoxSmoothWithGammaCell.IsChecked = true;
            else
                CheckBoxSmoothWithGammaCell.IsChecked = false;

            TextBoxFitBeginCell.Text = Tasks.InversionCellSettings.fitBegin.ToString();
            TextBoxFitEndCell.Text = Tasks.InversionCellSettings.fitEnd.ToString();

            TextBoxInvFlag1InvGeom.Text = Tasks.InversionGeometrySettings.MNSea.ToString();
            TextBoxInvFlag2InvGeom.Text = Tasks.InversionGeometrySettings.WithDDV.ToString();
            TextBoxInvFlag3InvGeom.Text = Tasks.InversionGeometrySettings.MNSeaType.ToString();
            TextBoxInvFlag4InvGeom.Text = Tasks.InversionGeometrySettings.WithDV.ToString();
            TextBoxInvFlag5InvGeom.Text = Tasks.InversionGeometrySettings.WithP1.ToString();

            ComboBoxRewriteCurvesModeHarm.SelectedIndex = Tasks.HarmonicSettings.RewriteMode + 1;
            ComboBoxRewriteCurvesModeStat.SelectedIndex = Tasks.StationarSettings.RewriteMode + 1;
            ComboBoxRewriteCurvesModeSP.SelectedIndex = Tasks.SPSettings.RewriteMode + 1;
            ComboBoxCalculateBeta.SelectedIndex = Tasks.InversionGeometrySettings.BetaCalcType;
            if (Tasks.InversionGeometrySettings.OnlyLayers == 1)
                CheckBoxOnlyLayers.IsChecked = true;
            else
                CheckBoxOnlyLayers.IsChecked = false;

            CheckBoxDrawObjectsBounds.IsChecked = Observing.ObservingSettings.drawObjectsBounds;
            CheckBoxDrawLayersBounds.IsChecked = Observing.ObservingSettings.drawLayersBounds;

            ComboBoxEMSourceType.SelectedItem = Tasks.SPSettings.generatorType;
            CheckBoxUseLoadedImpulse.IsChecked = Tasks.SPSettings.UseLoadedImpulse;
            CheckBoxCurvedMeshSP.IsChecked = Tasks.SPSettings.CurvedMesh;

            CheckBoxLayers.IsChecked = PostProcessing.PostProcessingSystemSettings.drawWithPaletteLayers;
            CheckBoxObjects.IsChecked = PostProcessing.PostProcessingSystemSettings.drawWithPaletteObjects;
            CheckBoxInversionModel.IsChecked = PostProcessing.PostProcessingSystemSettings.drawWithPaletteInversionModel;
            CheckBoxInversionResult.IsChecked = PostProcessing.PostProcessingSystemSettings.drawWithPaletteInversionResult;
            CheckBoxMesh.IsChecked = PostProcessing.PostProcessingSystemSettings.drawWithPaletteMesh;
            CheckBoxAuto.IsChecked = PostProcessing.PostProcessingSystemSettings.drawWithPaletteAuto;
            CheckBoxAuto.IsEnabled = false;

            ComboBoxFieldType.SelectedItem = PostProcessing.PostProcessingSystemSettings.currentFieldType;

            CheckBoxInversionGeometryBinaryResultsExp.IsChecked = Tasks.InversionGeometrySettings.BinaryResultsExp;
            CheckBoxInversionCellBinaryResultsExp.IsChecked = Tasks.InversionCellSettings.BinaryResultsExp;

            ComboBoxObjectsConcerning.SelectedItem = Tasks.InversionGeometrySettings.concerningObjectsType;
            TextBoxHx.Text = Tasks.InversionGeometrySettings.hx.ToString();
            TextBoxHy.Text = Tasks.InversionGeometrySettings.hy.ToString();
            TextBoxHz.Text = Tasks.InversionGeometrySettings.hz.ToString();

            ButtonSelectFreeColor.Background = new SolidColorBrush(Tasks.InversionGeometrySettings.freeColor);
            ButtonSelectMutualColor.Background = new SolidColorBrush(Tasks.InversionGeometrySettings.mutualColor);

            (LabelPathToCurves.Content as TextBlock).Text = observingSystem.pathToCurves;
            (LabelPathToNormalField.Content as TextBlock).Text = observingSystem.pathToNormalField;

            CheckBoxMeshDrawSurface.IsChecked = Meshes.FEM.MeshSettings.drawFaces;
            CheckBoxMeshDrawEdges.IsChecked = Meshes.FEM.MeshSettings.drawEdges;
            CheckBoxMeshDrawNodes.IsChecked = Meshes.FEM.MeshSettings.drawNodes;
            CheckBoxMeshDrawCorners.IsChecked = Meshes.FEM.MeshSettings.drawCorners;
            CheckBoxMeshDrawMaterialBounds.IsChecked = Meshes.FEM.MeshSettings.drawMaterialBounds;
            CheckBoxMeshSmoothLines.IsChecked = Meshes.FEM.MeshSettings.smooth;

            TextBoxMeshPointSize.Text = Meshes.FEM.MeshSettings.PointSize.ToString();
            TextBoxMeshLineWidth.Text = Meshes.FEM.MeshSettings.lineThickness.ToString();
            TextBoxMeshCornerWidth.Text = Meshes.FEM.MeshSettings.lineCornerThickness.ToString();
            TextBoxMeshMaterialWidth.Text = Meshes.FEM.MeshSettings.lineMaterialThickness.ToString();

            ButtonMeshPointColor.Background = new SolidColorBrush(Meshes.FEM.MeshSettings.pointColor);
            ButtonMeshLineColor.Background = new SolidColorBrush(Meshes.FEM.MeshSettings.lineColor);
            ButtonMeshCornerColor.Background = new SolidColorBrush(Meshes.FEM.MeshSettings.lineCornerColor);
            ButtonMeshMaterialColor.Background = new SolidColorBrush(Meshes.FEM.MeshSettings.lineMaterialColor);

            CheckBoxFitRelief.IsChecked = Tasks.InversionGeometrySettings.FitRelief;

            CheckBoxApparentRho.IsChecked = Tasks.InversionGeometrySettings.ApparentRho;

            TextBoxRhoGeneratorCoefficient.IsEnabled = Tasks.InversionGeometrySettings.ApparentRho;
            TextBoxRhoRhoCoefficient.IsEnabled = Tasks.InversionGeometrySettings.ApparentRho;

            TextBoxRhoGeneratorCoefficient.Text = Tasks.InversionGeometrySettings.RhoGeneratorCoefficient.ToString();
            TextBoxRhoRhoCoefficient.Text = Tasks.InversionGeometrySettings.RhoRhoCoefficient.ToString();

            SetViewModelSettingsToGUI();
        }
        private double GetZBottom()
        {
            double z = horizon;

            for (int i = 0; i < layers.Count - 1; i++ )
                z -= layers[i].H;

            return z;
        }
        private double GetZTop()
        {
            return horizon;
        }
        

        //======================================================================================== Inversion

        private void TextBoxInvFlag1InvGeom_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag1InvGeom.Text, ref Tasks.InversionGeometrySettings.MNSea);
        }
        private void TextBoxInvFlag2InvGeom_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag2InvGeom.Text, ref Tasks.InversionGeometrySettings.WithDDV);
        }
        private void TextBoxInvFlag3InvGeom_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag3InvGeom.Text, ref Tasks.InversionGeometrySettings.MNSeaType);
        }
        private void TextBoxInvFlag4InvGeom_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag4InvGeom.Text, ref Tasks.InversionGeometrySettings.WithDV);
        }
        private void TextBoxInvFlag5InvGeom_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag5InvGeom.Text, ref Tasks.InversionGeometrySettings.WithP1);
        }
        private void TextBoxInvFlag1InvGeom_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag1InvGeom.Text, ref Tasks.InversionGeometrySettings.MNSea);
        }
        private void TextBoxInvFlag2InvGeom_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag2InvGeom.Text, ref Tasks.InversionGeometrySettings.WithDDV);
        }
        private void TextBoxInvFlag3InvGeom_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag3InvGeom.Text, ref Tasks.InversionGeometrySettings.MNSeaType);
        }
        private void TextBoxInvFlag4InvGeom_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag4InvGeom.Text, ref Tasks.InversionGeometrySettings.WithDV);
        }
        private void TextBoxInvFlag5InvGeom_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag5InvGeom.Text, ref Tasks.InversionGeometrySettings.WithP1);
        }
        private void TextBoxInvFlag1InvCell_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag1InvCell.Text, ref Tasks.InversionCellSettings.MNSea);
        }
        private void TextBoxInvFlag2InvCell_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag2InvCell.Text, ref Tasks.InversionCellSettings.WithDDV);
        }
        private void TextBoxInvFlag3InvCell_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag3InvCell.Text, ref Tasks.InversionCellSettings.MNSeaType);
        }
        private void TextBoxInvFlag4InvCell_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag4InvCell.Text, ref Tasks.InversionCellSettings.WithDV);
        }
        private void TextBoxInvFlag5InvCell_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxInvFlag5InvCell.Text, ref Tasks.InversionCellSettings.WithP1);
        }
        private void TextBoxInvFlag1InvCell_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag1InvCell.Text, ref Tasks.InversionCellSettings.MNSea);
        }
        private void TextBoxInvFlag2InvCell_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag2InvCell.Text, ref Tasks.InversionCellSettings.WithDDV);
        }
        private void TextBoxInvFlag3InvCell_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag3InvCell.Text, ref Tasks.InversionCellSettings.MNSeaType);
        }
        private void TextBoxInvFlag4InvCell_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag4InvCell.Text, ref Tasks.InversionCellSettings.WithDV);
        }
        private void TextBoxInvFlag5InvCell_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxInvFlag5InvCell.Text, ref Tasks.InversionCellSettings.WithP1);
        }
        

        private void ChangeArea(int ind)
        {
            if (ind >= 0 && ind < inverseSystem.inversionAreas.Count)
            {
                DataGridEmbryos.ItemsSource = inverseSystem.inversionAreas[ind].embryos;
                DataGridInversionPlanes.ItemsSource = inverseSystem.inversionAreas[ind].planes;

                foreach (var area in inverseSystem.inversionAreas)
                    area.Visible = false;

                inverseSystem.inversionAreas[ind].Visible = true;
                ChangePlane(-1);
            }
            else
            {
                DataGridEmbryos.ItemsSource = null;
                DataGridInversionPlanes.ItemsSource = null;
                DataGridInversionLinesX.ItemsSource = null;
                DataGridInversionLinesY.ItemsSource = null;
                DataGridEmbryos.ItemsSource = null;
                ChangePlane(-1);
            }
            tmpInversionAreaSelected = ind;

            UpdateScale();
        }
        private void ChangePlane(int ind)
        {
            tmpInversionPlaneSelected = ind;
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected >= inverseSystem.inversionAreas.Count)
                return;

            inverseSystem.inversionAreas[tmpInversionAreaSelected].Highlighted = false;

            if (ind >= 0 && ind < inverseSystem.inversionAreas[tmpInversionAreaSelected].planes.Count)
            {
                if (tmpInversionAreaSelected >= 0 || tmpInversionAreaSelected < inverseSystem.inversionAreas.Count)
                {
                    DataGridInversionLinesX.ItemsSource = inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[ind].linesX;
                    DataGridInversionLinesY.ItemsSource = inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[ind].linesY;
                }
                foreach(Geology.Inversion.InversionPlane plane in DataGridInversionPlanes.SelectedItems)
                {
                    plane.Highlighted = true;
                }
            }
            else
            {
                DataGridInversionLinesX.ItemsSource = null;
                DataGridInversionLinesY.ItemsSource = null;
                DataGridInversionLinesX.Items.Refresh();
                DataGridInversionLinesX.Items.Refresh();
            }

            DataGridInversionPlanes.SelectedIndex = tmpInversionPlaneSelected;
            
            UpdateAllView();
        }
        private void ButtonInversionAddArea_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Inversion.InversionArea newArea = new Inversion.InversionArea();
                Inversion.AddInvertionAreaWindow window = new Inversion.AddInvertionAreaWindow();

                window.Z0 = GetZBottom()-200.0;
                window.Z1 = GetZTop();

                double x0, x1, y0, y1;

                observingSystem.GetBoundsI(out x0, out x1, out y0, out y1);

                window.X0 = x0;
                window.X1 = x1;
                window.Y0 = y0;
                window.Y1 = y1;

                window.ShowDialog();
                if (window.DialogResult == true)
                {
                    newArea.Name = window.TextBoxName.Text;
                    switch(window.ComboBoxRegime.Text)
                    {
                        case "Empty":
                            newArea.x0 = window.X0;
                            newArea.x1 = window.X1;
                            newArea.y0 = window.Y0;
                            newArea.y1 = window.Y1;
                            newArea.z0 = window.Z0;
                            newArea.z1 = window.Z1;
                            newArea.buildingRegime = Inversion.InversionAreaBuildingRegimeValues.Empty;
                            break;
                        case "Regular":
                            newArea.x0 = window.X0;
                            newArea.x1 = window.X1;
                            newArea.y0 = window.Y0;
                            newArea.y1 = window.Y1;
                            newArea.z0 = window.Z0;
                            newArea.z1 = window.Z1;
                            newArea.hx = window.HX;
                            newArea.hy = window.HY;
                            newArea.buildingRegime = Inversion.InversionAreaBuildingRegimeValues.Regular;
                            break;
                        default:
                            return;
                    }
                    if (newArea.Build(layers, objects, horizon) != 0)
                    {
                        MessageBox.Show("Could not build inversion area", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        return;
                    }
                    inverseSystem.inversionAreas.Add(newArea);
                }

                UpdateAllView();
            }
            catch(Exception ex)
            {

            }
        }
        private void ButtonInversionDelArea_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                int ind = 0;
                if (ListBoxInversionAreas.SelectedItem != null)
                {
                    ind = ListBoxInversionAreas.SelectedIndex;
                    inverseSystem.inversionAreas.RemoveAt(ind);
                    if (ind >= inverseSystem.inversionAreas.Count)
                        ind = inverseSystem.inversionAreas.Count - 1;

                    ListBoxInversionAreas.SelectedIndex = ind;
                }

                ListBoxInversionAreas.Items.Refresh();

                if (inverseSystem.inversionAreas.Count < 1)
                    ChangeArea(-1);

                UpdateAllView();
            }
            catch (Exception ex)
            {

            }
        }
        private void ListBoxInversionAreas_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ChangeArea(ListBoxInversionAreas.SelectedIndex);
        }
        private void TabControlMainWindow_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (TabControlMainWindow.SelectedItem == null)
                return;

            String str = (TabControlMainWindow.SelectedItem as TabItem).Header.ToString();

            inverseSystem.activeToDraw = false;
            modelCollection.ToDraw = false;
            switch(str)
            {
                case "Inversion":
                    inverseSystem.activeToDraw = true;
                    inverseSystem.drawingMode = Inversion.InversionSystem.InversionSystemDrawingMode.Area;
                    break;
                case "Inversion Results":
                    inverseSystem.activeToDraw = true;
                    inverseSystem.drawingMode = Inversion.InversionSystem.InversionSystemDrawingMode.ResultAreas;

                    break;
                case "Models":
                    if (modelCollection == null) return;

                    modelCollection.ToDraw = true;
                    if (modelCollection.CurrentModel != null)
                        View3DWindow.ChangeDrawBox(modelCollection.CurrentModel.boundingBox);

                    break;
            }

            UpdateAllView();
        }
        private void DataGridInversionPlanes_VisibleCheckChanged(object sender, RoutedEventArgs e)
        {
            UpdateAllView();
        }
        private void DataGridInversionPlanes_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected > inverseSystem.inversionAreas.Count - 1)
                ChangePlane(-1);
            else
                ChangePlane(DataGridInversionPlanes.SelectedIndex);
        }
        private void DataGridInversionLinesX_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected > inverseSystem.inversionAreas.Count - 1)
                return;
            if (tmpInversionPlaneSelected < 0 || tmpInversionPlaneSelected > inverseSystem.inversionAreas[tmpInversionAreaSelected].planes.Count - 1)
                return;
            inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[tmpInversionPlaneSelected].Highlighted = false;
            foreach (Geology.Inversion.InversionLine line in DataGridInversionLinesX.SelectedItems)
                line.Highlighted = true;
            UpdateAllView();
        }
        private void DataGridInversionLinesY_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected > inverseSystem.inversionAreas.Count - 1)
                return;
            if (tmpInversionPlaneSelected < 0 || tmpInversionPlaneSelected > inverseSystem.inversionAreas[tmpInversionAreaSelected].planes.Count - 1)
                return;
            inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[tmpInversionPlaneSelected].Highlighted = false;
            foreach (Geology.Inversion.InversionLine line in DataGridInversionLinesY.SelectedItems)
                line.Highlighted = true;
            UpdateAllView();
        }

        private void EditPlaneMesh()
        {
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected > inverseSystem.inversionAreas.Count - 1)
                return;
            if (tmpInversionPlaneSelected < 0 || tmpInversionPlaneSelected > inverseSystem.inversionAreas[tmpInversionAreaSelected].planes.Count - 1)
                return;

            if (DataGridInversionPlanes.SelectedItems.Count == 1)
            {
                Meshes.IMeshWindow window = new Meshes.IMeshWindow(horizon, inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[tmpInversionPlaneSelected].iMesh, layers, objects, true, inverseSystem.inversionAreas[tmpInversionAreaSelected]);
                window.ShowDialog();

                if (window.DialogResult == true)
                {
                    inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[tmpInversionPlaneSelected].iMesh.CopyFrom(window.mesh);
                    Inversion.InversionAreaBuilder.RebuildPlane(inverseSystem.inversionAreas[tmpInversionAreaSelected].planes, tmpInversionPlaneSelected, layers, objects, horizon);
                }
            }
            else
            {
                int ind;
                SortedDictionary<int, ObservableCollection<Inversion.InversionPlane>> tmpPlanes = new SortedDictionary<int, ObservableCollection<Inversion.InversionPlane>>(new Utilities.ReverseComparer<int>());
                Meshes.IMesh basicMesh = new Meshes.IMesh();

                basicMesh.CopyFrom(inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[tmpInversionPlaneSelected].iMesh);
                basicMesh.zCoords.Clear();
                Meshes.IMeshWindow window = new Meshes.IMeshWindow(horizon, basicMesh, layers, objects, false, inverseSystem.inversionAreas[tmpInversionAreaSelected]);
                window.ShowDialog();

                if (window.DialogResult == true)
                {
                    basicMesh.CopyFrom(window.mesh);
                    foreach (var plane in DataGridInversionPlanes.SelectedItems)
                    {
                        ind = inverseSystem.inversionAreas[tmpInversionAreaSelected].planes.IndexOf(plane as Inversion.InversionPlane);
                        tmpPlanes[ind] = new ObservableCollection<Inversion.InversionPlane>();

                        inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[ind].iMesh.CopyFrom(basicMesh);
                        inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[ind].iMesh.zCoords.Clear();
                        inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[ind].iMesh.zCoords.Add(new Meshes.CoordinatePoint(1, inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[ind].Z0));
                        inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[ind].iMesh.zCoords.Add(new Meshes.CoordinatePoint(2, inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[ind].Z1));

                        Inversion.InversionAreaBuilder.RebuildPlane(tmpPlanes[ind], inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[ind], layers, objects, horizon);
                    }

                    foreach(var planeList in tmpPlanes)
                    {
                        inverseSystem.inversionAreas[tmpInversionAreaSelected].planes.RemoveAt(planeList.Key);

                        ind = 0;
                        foreach (var plane in planeList.Value)
                        {
                            inverseSystem.inversionAreas[tmpInversionAreaSelected].planes.Insert(planeList.Key + ind, plane);
                            ind++;
                        }
                    }
                }

            }
        }
        private void DataGridInversionPlanes_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            ContextMenu m = new ContextMenu();
            if (DataGridInversionPlanes.ContextMenu == null)
                DataGridInversionPlanes.ContextMenu = new System.Windows.Controls.ContextMenu();
            else
                DataGridInversionPlanes.ContextMenu.Items.Clear();
            MenuItem mi = new MenuItem();
            mi.Header = "Slice";
            mi.Click += DataGridInversionPlanes_ContextMenuClick;
            DataGridInversionPlanes.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Combine";
            mi.Click += DataGridInversionPlanes_ContextMenuClick;
            DataGridInversionPlanes.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Edit 2d mesh";
            mi.Click += DataGridInversionPlanes_ContextMenuClick;
            DataGridInversionPlanes.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Set inversion parameters";
            mi.Click += DataGridInversionPlanes_ContextMenuClick;
            DataGridInversionPlanes.ContextMenu.Items.Add(mi);

            DataGridInversionPlanes.ContextMenu.IsEnabled = true;
        }
        private void DataGridInversionPlanes_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (DataGridInversionPlanes.ContextMenu != null)
                DataGridInversionPlanes.ContextMenu = null;
        }
        private void DataGridInversionPlanes_ContextMenuClick(Object sender, System.EventArgs e)
        {
            int ind;
            string str = (sender as MenuItem).Header.ToString();
            if (DataGridInversionPlanes.SelectedItems.Count < 1)
                return; 

            switch (str)
            {
                case "Slice":
                    for (int i = DataGridInversionPlanes.SelectedItems.Count - 1; i >= 0; i--)
                    {
                        ind = inverseSystem.inversionAreas[tmpInversionAreaSelected].planes.IndexOf(DataGridInversionPlanes.SelectedItems[i] as Inversion.InversionPlane);
                        inverseSystem.inversionAreas[tmpInversionAreaSelected].SlicePlane(ind);
                    }
                    
                    break;
                case "Combine":
                    break;
                case "Edit 2d mesh":
                    EditPlaneMesh();
                    break;
                case "Apply mesh to...":
                    break;
                case "Set inversion parameters":
                    SetInversionParametersPlanes();
                    break;
            }


            inverseSystem.inversionAreas[tmpInversionAreaSelected].ClearUnusedEmbryos();
            inverseSystem.inversionAreas[tmpInversionAreaSelected].RefreshEmbryosNumbers();
            DataGridEmbryos.Items.Refresh();
            UpdateAllView();
        }
        private void DataGridInversionLinesX_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            ContextMenu m = new ContextMenu();
            if (DataGridInversionLinesX.ContextMenu == null)
                DataGridInversionLinesX.ContextMenu = new System.Windows.Controls.ContextMenu();
            else
                DataGridInversionLinesX.ContextMenu.Items.Clear();
            MenuItem mi = new MenuItem();
            mi.Header = "Slice";
            mi.Click += DataGridInversionLinesX_ContextMenuClick;
            DataGridInversionLinesX.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Combine";
            mi.Click += DataGridInversionLinesX_ContextMenuClick;
            DataGridInversionLinesX.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Edit 2d mesh";
            mi.Click += DataGridInversionLinesX_ContextMenuClick;
            DataGridInversionLinesX.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Set inversion parameters";
            mi.Click += DataGridInversionLinesX_ContextMenuClick;
            DataGridInversionLinesX.ContextMenu.Items.Add(mi);

            DataGridInversionLinesX.ContextMenu.IsEnabled = true;
        }
        private void DataGridInversionLinesX_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (DataGridInversionLinesX.ContextMenu != null)
                DataGridInversionLinesX.ContextMenu = null;
        }
        private void DataGridInversionLinesX_ContextMenuClick(Object sender, System.EventArgs e)
        {
            int ind;
            string str = (sender as MenuItem).Header.ToString();
            if (DataGridInversionLinesX.SelectedItems.Count < 1)
                return;

            switch (str)
            {
                case "Slice":
                    for (int i = DataGridInversionLinesX.SelectedItems.Count - 1; i >= 0; i--)
                    {
                        ind = inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[tmpInversionPlaneSelected].linesX.IndexOf(DataGridInversionLinesX.SelectedItems[i] as Inversion.InversionLine);
                        inverseSystem.inversionAreas[tmpInversionAreaSelected].SlicePlane(ind);
                    }

                    break;
                case "Combine":
                    break;
                case "Edit 2d mesh":
                    break;
                case "Apply mesh to...":
                    break;
                case "Set inversion parameters":
                    SetInversionParametersLinesX();
                    break;
            }


            inverseSystem.inversionAreas[tmpInversionAreaSelected].ClearUnusedEmbryos();
            inverseSystem.inversionAreas[tmpInversionAreaSelected].RefreshEmbryosNumbers();
            DataGridEmbryos.Items.Refresh();
            UpdateAllView();
        }
        private void DataGridInversionLinesY_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            ContextMenu m = new ContextMenu();
            if (DataGridInversionLinesY.ContextMenu == null)
                DataGridInversionLinesY.ContextMenu = new System.Windows.Controls.ContextMenu();
            else
                DataGridInversionLinesY.ContextMenu.Items.Clear();
            MenuItem mi = new MenuItem();
            mi.Header = "Slice";
            mi.Click += DataGridInversionLinesY_ContextMenuClick;
            DataGridInversionLinesY.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Combine";
            mi.Click += DataGridInversionLinesY_ContextMenuClick;
            DataGridInversionLinesY.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Edit 2d mesh";
            mi.Click += DataGridInversionLinesY_ContextMenuClick;
            DataGridInversionLinesY.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Set inversion parameters";
            mi.Click += DataGridInversionLinesY_ContextMenuClick;
            DataGridInversionLinesY.ContextMenu.Items.Add(mi);

            DataGridInversionLinesY.ContextMenu.IsEnabled = true;
        }
        private void DataGridInversionLinesY_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (DataGridInversionLinesY.ContextMenu != null)
                DataGridInversionLinesY.ContextMenu = null;
        }
        private void DataGridInversionLinesY_ContextMenuClick(Object sender, System.EventArgs e)
        {
            int ind;
            string str = (sender as MenuItem).Header.ToString();
            if (DataGridInversionLinesY.SelectedItems.Count < 1)
                return;

            switch (str)
            {
                case "Slice":
                    for (int i = DataGridInversionLinesY.SelectedItems.Count - 1; i >= 0; i--)
                    {
                        ind = inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[tmpInversionPlaneSelected].linesY.IndexOf(DataGridInversionLinesY.SelectedItems[i] as Inversion.InversionLine);
                        inverseSystem.inversionAreas[tmpInversionAreaSelected].SlicePlane(ind);
                    }

                    break;
                case "Combine":
                    break;
                case "Edit 2d mesh":
                    break;
                case "Apply mesh to...":
                    break;
                case "Set inversion parameters":
                    SetInversionParametersLinesY();
                    break;
            }


            inverseSystem.inversionAreas[tmpInversionAreaSelected].ClearUnusedEmbryos();
            inverseSystem.inversionAreas[tmpInversionAreaSelected].RefreshEmbryosNumbers();
            DataGridEmbryos.Items.Refresh();
            UpdateAllView();
        }
        private void DataGridEmbryos_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            ContextMenu m = new ContextMenu();
            if (DataGridEmbryos.ContextMenu == null)
                DataGridEmbryos.ContextMenu = new System.Windows.Controls.ContextMenu();
            else
                DataGridEmbryos.ContextMenu.Items.Clear();
            MenuItem mi = new MenuItem();
            mi.Header = "Slice";
            mi.Click += DataGridEmbryos_ContextMenuClick;
            DataGridEmbryos.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Combine";
            mi.Click += DataGridEmbryos_ContextMenuClick;
            DataGridEmbryos.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Set inversion parameters";
            mi.Click += DataGridEmbryos_ContextMenuClick;
            DataGridEmbryos.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Edit";
            mi.Click += DataGridEmbryos_ContextMenuClick;
            DataGridEmbryos.ContextMenu.Items.Add(mi);

            DataGridEmbryos.ContextMenu.Items.Add(new Separator());

            mi = new MenuItem();
            mi.Header = "Hide";
            mi.Click += DataGridEmbryos_ContextMenuClick;
            DataGridEmbryos.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Unhide";
            mi.Click += DataGridEmbryos_ContextMenuClick;
            DataGridEmbryos.ContextMenu.Items.Add(mi);

            DataGridEmbryos.ContextMenu.Items.Add(new Separator());

            mi = new MenuItem();
            mi.Header = "New object";
            mi.Click += DataGridEmbryos_ContextMenuClick;
            DataGridEmbryos.ContextMenu.Items.Add(mi);

            DataGridEmbryos.ContextMenu.Items.Add(new Separator());

            mi = new MenuItem();
            mi.Header = "Import from model";
            mi.Click += DataGridEmbryos_ContextMenuClick;
            DataGridEmbryos.ContextMenu.Items.Add(mi);

            DataGridEmbryos.ContextMenu.IsEnabled = true;
        }
        private void DataGridEmbryos_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (DataGridEmbryos.ContextMenu != null)
                DataGridEmbryos.ContextMenu = null;
        }
        private void DataGridEmbryos_ContextMenuClick(Object sender, System.EventArgs e)
        {
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected > inverseSystem.inversionAreas.Count-1)
                return;

            string str = (sender as MenuItem).Header.ToString();

            switch (str)
            {
                case "Combine":
                    break;
                case "Set inversion parameters":
                    if (DataGridEmbryos.SelectedItems.Count < 1)
                        return;
                    SetInversionParametersEmbryos();
                    break;
                case "Edit":
                    if (DataGridEmbryos.SelectedItem != null)
                        inverseSystem.EditEmbryo(tmpInversionAreaSelected, ((KeyValuePair<int, Inversion.InversionEmbryo>)DataGridEmbryos.SelectedItem).Key, horizon, layers, objects);
                    break;
                case "Hide":
                    foreach (var embryo in DataGridEmbryos.SelectedItems)
                        ((KeyValuePair<int, Inversion.InversionEmbryo>)embryo).Value.Visible = false;
                    break;
                case "Unhide":
                    foreach (var embryo in DataGridEmbryos.SelectedItems)
                        ((KeyValuePair<int, Inversion.InversionEmbryo>)embryo).Value.Visible = true;
                    break;
                case "New object":
                    inverseSystem.AddNewEmbryo(tmpInversionAreaSelected, horizon, layers, objects);
                    break;
                case "Import from model":
                    Utilities.GeoObjectsComverter.GeoObjectsToEmbryos(objects, inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos);
                    break;
            }


            inverseSystem.inversionAreas[tmpInversionAreaSelected].ClearUnusedEmbryos();
            inverseSystem.inversionAreas[tmpInversionAreaSelected].RefreshEmbryosNumbers();
            DataGridEmbryos.Items.Refresh();
            UpdateAllView();
        }
        private void DataGridEmbryos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected > inverseSystem.inversionAreas.Count - 1)
                return;

            inverseSystem.inversionAreas[tmpInversionAreaSelected].Highlighted = false;
            foreach (var embryo in DataGridEmbryos.SelectedItems)
                ((KeyValuePair<int, Inversion.InversionEmbryo>)embryo).Value.Highlighted = true;

            UpdateAllView();
        }

        private void SetInversionParametersPlanes()
        {
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected > inverseSystem.inversionAreas.Count - 1)
                return;

            if (DataGridInversionPlanes.SelectedItems.Count < 1)
                return;

            List<int> planeNumbers = new List<int>();


            foreach (var item in DataGridInversionPlanes.SelectedItems)
            {
                planeNumbers.Add(inverseSystem.inversionAreas[tmpInversionAreaSelected].planes.IndexOf(item as Inversion.InversionPlane));
            }

            inverseSystem.ApplyParametersToPlanes(tmpInversionAreaSelected, planeNumbers);
            DataGridEmbryos.Items.Refresh();
        }
        private void SetInversionParametersLinesX()
        {
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected > inverseSystem.inversionAreas.Count - 1)
                return;

            if (tmpInversionPlaneSelected < 0 || tmpInversionPlaneSelected > inverseSystem.inversionAreas[tmpInversionAreaSelected].planes.Count - 1)
                return;

            if (DataGridInversionLinesX.SelectedItems.Count < 1)
                return;

            List<int> lineNumbers = new List<int>();


            foreach (var item in DataGridInversionLinesX.SelectedItems)
            {
                lineNumbers.Add(inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[tmpInversionPlaneSelected].linesX.IndexOf(item as Inversion.InversionLine));
            }

            inverseSystem.ApplyParametersToLines(tmpInversionAreaSelected, tmpInversionPlaneSelected, lineNumbers, Inversion.DirectionTypes.X);
            DataGridEmbryos.Items.Refresh();
        }
        private void SetInversionParametersLinesY()
        {
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected > inverseSystem.inversionAreas.Count - 1)
                return;

            if (tmpInversionPlaneSelected < 0 || tmpInversionPlaneSelected > inverseSystem.inversionAreas[tmpInversionAreaSelected].planes.Count - 1)
                return;

            if (DataGridInversionLinesY.SelectedItems.Count < 1)
                return;

            List<int> lineNumbers = new List<int>();


            foreach (var item in DataGridInversionLinesY.SelectedItems)
            {
                lineNumbers.Add(inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[tmpInversionPlaneSelected].linesY.IndexOf(item as Inversion.InversionLine));
            }

            inverseSystem.ApplyParametersToLines(tmpInversionAreaSelected, tmpInversionPlaneSelected, lineNumbers, Inversion.DirectionTypes.Y);
            DataGridEmbryos.Items.Refresh();
        }
        private void SetInversionParametersEmbryos()
        {
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected > inverseSystem.inversionAreas.Count - 1)
                return;

            if (DataGridEmbryos.SelectedItems.Count < 1)
                return;

            List<int> embryosNumbers = new List<int>();


            foreach (var item in DataGridEmbryos.SelectedItems)
            {
                embryosNumbers.Add(((KeyValuePair<int, Inversion.InversionEmbryo>)item).Key);
            }

            inverseSystem.ApplyParametersToEmbryos(tmpInversionAreaSelected, embryosNumbers);
            DataGridEmbryos.Items.Refresh();
        }
        private void DataGridInversionPlanes_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Delete)
            {
                inverseSystem.inversionAreas[tmpInversionAreaSelected].ClearUnusedEmbryos();
                inverseSystem.inversionAreas[tmpInversionAreaSelected].RefreshEmbryosNumbers();
            }
            
        }
        private void DataGridInversionPlanes_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Delete)
            {
                inverseSystem.inversionAreas[tmpInversionAreaSelected].ClearUnusedEmbryos();
                inverseSystem.inversionAreas[tmpInversionAreaSelected].RefreshEmbryosNumbers();

                UpdateAllView();
            }
        }
        private void ButtonInversionParameters_Click(object sender, RoutedEventArgs e)
        {
            Inversion.InversionParametersWindow window = new Inversion.InversionParametersWindow(inverseSystem.inversionParameters, inverseSystem, DataGridEmbryos);
            window.Show();
        }

        private void ListBoxInversionAreas_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            ContextMenu m = new ContextMenu();
            if (ListBoxInversionAreas.ContextMenu == null)
                ListBoxInversionAreas.ContextMenu = new System.Windows.Controls.ContextMenu();
            else
                ListBoxInversionAreas.ContextMenu.Items.Clear();
            MenuItem mi = new MenuItem();
            mi.Header = "IMesh";
            mi.Click += ListBoxInversionAreas_ContextMenuClick;
            ListBoxInversionAreas.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Set preset";
            mi.Click += ListBoxInversionAreas_ContextMenuClick;
            ListBoxInversionAreas.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Clear applied parameters";
            mi.Click += ListBoxInversionAreas_ContextMenuClick;
            ListBoxInversionAreas.ContextMenu.Items.Add(mi);
            mi = new MenuItem();
            mi.Header = "Build view model";
            mi.Click += ListBoxInversionAreas_ContextMenuClick;
            ListBoxInversionAreas.ContextMenu.Items.Add(mi);

            ListBoxInversionAreas.ContextMenu.IsEnabled = true;
        }
        private void ListBoxInversionAreas_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (ListBoxInversionAreas.ContextMenu != null)
                ListBoxInversionAreas.ContextMenu = null;
        }
        private void EditIMesh()
        {
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected > inverseSystem.inversionAreas.Count - 1)
                return;

            inverseSystem.inversionAreas[tmpInversionAreaSelected].UpdateBoundaries();
            Meshes.IMeshWindow window = new Meshes.IMeshWindow(horizon, inverseSystem.inversionAreas[tmpInversionAreaSelected], layers, objects, inverseSystem.inversionAreas[tmpInversionAreaSelected]);

            window.ShowDialog();

            if (window.DialogResult == true)
            {
                inverseSystem.inversionAreas[tmpInversionAreaSelected].iMesh.CopyFrom(window.mesh);

                if (inverseSystem.inversionAreas[tmpInversionAreaSelected].iMesh.meshConcerning == Geology.Meshes.IMesh.ConcerningObjectsTypes.FitObjectsToMesh)
                    inverseSystem.inversionAreas[tmpInversionAreaSelected].FitObjectsToMesh(inverseSystem.inversionAreas[tmpInversionAreaSelected].iMesh);
            }
        }
        private void ListBoxInversionAreas_ContextMenuClick(Object sender, System.EventArgs e)
        {
            int ind;
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected > inverseSystem.inversionAreas.Count - 1)
                return;

            string str = (sender as MenuItem).Header.ToString();

            switch (str)
            {
                case "IMesh":
                    EditIMesh();
                    break;
                case "Clear applied parameters":
                    if (tmpInversionAreaSelected >= 0 && tmpInversionAreaSelected < inverseSystem.inversionAreas.Count)
                        inverseSystem.inversionAreas[tmpInversionAreaSelected].ClearAppliedParameters();
                    break;
                case "Set preset":
                    if (tmpInversionAreaSelected >= 0 && tmpInversionAreaSelected < inverseSystem.inversionAreas.Count)
                    {
                        Inversion.ParametersPresetWindow window = new Inversion.ParametersPresetWindow(inverseSystem, tmpInversionAreaSelected);
                        window.ShowDialog();
                    }
                    break;
                case "Build view model":
                    if (tmpInversionAreaSelected >= 0 && tmpInversionAreaSelected < inverseSystem.inversionAreas.Count)
                    {
                        modelCollection.BuildModel(horizon, 200, 200, observingSystem, layers, inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos, "Inversion area " + inverseSystem.inversionAreas[tmpInversionAreaSelected].Name);
                    }
                    break;

                    
            }

            UpdateAllView();
        }
        private void CheckBoxSPVP_Checked(object sender, RoutedEventArgs e)
        {
            Tasks.SPSettings.SPVP = (bool)CheckBoxSPVP.IsChecked;
        }
        private void ComboBoxSourceType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            sourceType = GetSourceType();
            sourceTypeInversion = GetSourceTypeObserving();
        }
        private void ComboBoxCalculationRegime_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ComboBoxCalculationRegime.SelectedIndex < 0 || ComboBoxCalculationRegime.SelectedIndex > ComboBoxCalculationRegime.Items.Count)
                return;

            calculationRegime = Tasks.TasksUtilities.GetTaskType(ComboBoxCalculationRegime.Items[ComboBoxCalculationRegime.SelectedIndex] as String);

            if (calculationRegime == Tasks.TaskTypes.EM)
            {
                LabelCalculateBeta.IsEnabled = true;
                ComboBoxCalculateBeta.IsEnabled = true;
            }
            else
            {
                LabelCalculateBeta.IsEnabled = false;
                ComboBoxCalculateBeta.IsEnabled = false;
            }
        }
        private void CheckBoxSmoothWithGammaCell_Checked(object sender, RoutedEventArgs e)
        {
            if (CheckBoxSmoothWithGammaCell.IsChecked == true)
                Tasks.InversionCellSettings.smoothWithGamma = 1;
            else
                Tasks.InversionCellSettings.smoothWithGamma = 0;
        }
        private void TextBoxMaxIterCell_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMaxIterCell.Text, ref Tasks.InversionCellSettings.maxIter);
        }
        private void TextBoxMaxIterCell_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                Utilities.LittleTools.ParseString(TextBoxMaxIterCell.Text, ref Tasks.InversionCellSettings.maxIter);
        }
        private void CheckBoxFitAlphaCell_Checked(object sender, RoutedEventArgs e)
        {
            Tasks.InversionCellSettings.fitAlpha = (bool)CheckBoxFitAlphaCell.IsChecked;
        }
        private void CheckBoxFitBetaCell_Checked(object sender, RoutedEventArgs e)
        {
            Tasks.InversionCellSettings.fitBeta = (bool)CheckBoxFitBetaCell.IsChecked;
        }
        private void CheckBoxFitTauCell_Checked(object sender, RoutedEventArgs e)
        {
            Tasks.InversionCellSettings.fitTau = (bool)CheckBoxFitTauCell.IsChecked;
        }
        private void MenuClickCalculationSettings(object sender, RoutedEventArgs e)
        {
            CalculationSettings window = new CalculationSettings(settingsStore);

            window.ShowDialog();
            if (window.DialogResult == true)
            {
                settingsStore.writeIrkutskResults = (bool)window.CheckBoxWriteDataIrkutsk.IsChecked;
                settingsStore.writeNativeResults = (bool)window.CheckBoxWriteDataNative.IsChecked;
                settingsStore.RemoveSourceResultsDirectory = (bool)window.CheckBoxRemoveSourceResultsDirectory.IsChecked;

                Tasks.SPSettings.UseFolding = (bool)window.CheckBoxFolding.IsChecked;
                if ((bool)window.CheckBoxReinterpolate.IsChecked == true)
                    Tasks.SPSettings.ReinterpolateToImpulseTime = 1;
                else
                    Tasks.SPSettings.ReinterpolateToImpulseTime = 0;

                if ((bool)window.CheckBoxFullField.IsChecked == true)
                    Tasks.SPSettings.FullField = 1;
                else
                    Tasks.SPSettings.FullField = 0;
            }
        }
        private void MenuClickConvertresults(object sender, RoutedEventArgs e)
        {
            Tasks.ResultsDataConvert window = new Tasks.ResultsDataConvert(LastCalculationsDirectory);

            window.Show();
        }
        private void MenuClickConvertInversionResults(object sender, RoutedEventArgs e)
        {
            Tasks.ResultsDataConvertInversion window = new Tasks.ResultsDataConvertInversion(LastCalculationsDirectory);
            window.Show();
        }
        private void MenuClickEditDevices(object sender, RoutedEventArgs e)
        {
            Observing.DevicesWindow.DevicesWindow window = new Observing.DevicesWindow.DevicesWindow();
            window.Show();
        }
        private void MenuClickLoadCurves(object sender, RoutedEventArgs e)
        {
            String lastDir = LastCalculationsDirectory;
            Observing.LoadCurvesWindow window = new Observing.LoadCurvesWindow(observingSystem, ref lastDir);
            window.ShowDialog();
            LastCalculationsDirectory = lastDir;
        }
        private void CheckBoxSpecialProfile_Checked(object sender, RoutedEventArgs e)
        {
            settingsStore.SpecialProfile = (bool)CheckBoxSpecialProfile.IsChecked;
        }
        private void ComboBoxRewriteCurvesModeHarm_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ComboBoxRewriteCurvesModeHarm.SelectedIndex < 0 || ComboBoxRewriteCurvesModeHarm.SelectedIndex > ComboBoxRewriteCurvesModeHarm.Items.Count)
                return;
            String text = ComboBoxRewriteCurvesModeHarm.Items[ComboBoxRewriteCurvesModeHarm.SelectedIndex] as String;
            switch(text)
            {
                case "None":
                    Tasks.HarmonicSettings.RewriteMode = -1;
                    break;
                case "On place from AB":
                    Tasks.HarmonicSettings.RewriteMode = 0;
                    break;
                case "On profile by places":
                    Tasks.HarmonicSettings.RewriteMode = 1;
                    break;
            }
        }
        private void ComboBoxRewriteCurvesModeStat_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ComboBoxRewriteCurvesModeStat.SelectedIndex < 0 || ComboBoxRewriteCurvesModeStat.SelectedIndex > ComboBoxRewriteCurvesModeStat.Items.Count)
                return;
            String text = ComboBoxRewriteCurvesModeStat.Items[ComboBoxRewriteCurvesModeStat.SelectedIndex] as String;
            switch (text)
            {
                case "None":
                    Tasks.StationarSettings.RewriteMode = -1;
                    break;
                case "On place from AB":
                    Tasks.StationarSettings.RewriteMode = 0;
                    break;
                case "On profile by places":
                    Tasks.StationarSettings.RewriteMode = 1;
                    break;
            }
        }

        private void ComboBoxRewriteCurvesModeSP_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ComboBoxRewriteCurvesModeSP.SelectedIndex < 0 || ComboBoxRewriteCurvesModeSP.SelectedIndex > ComboBoxRewriteCurvesModeSP.Items.Count)
                return;
            String text = ComboBoxRewriteCurvesModeSP.Items[ComboBoxRewriteCurvesModeSP.SelectedIndex] as String;
            switch (text)
            {
                case "None":
                    Tasks.SPSettings.RewriteMode = -1;
                    break;
                case "On place from AB":
                    Tasks.SPSettings.RewriteMode = 0;
                    break;
                case "On profile by places":
                    Tasks.SPSettings.RewriteMode = 1;
                    break;
            }
        }

        private void ComboBoxCalculateBeta_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ComboBoxCalculateBeta.SelectedIndex < 0 || ComboBoxCalculateBeta.SelectedIndex > ComboBoxCalculateBeta.Items.Count)
                return;
            String text = ComboBoxCalculateBeta.Items[ComboBoxCalculateBeta.SelectedIndex] as String;
            switch (text)
            {
                case "None":
                    Tasks.InversionGeometrySettings.BetaCalcType = 0;
                    break;
                case "IP":
                    Tasks.InversionGeometrySettings.BetaCalcType = 1;
                    break;
                case "ColeCole":
                    Tasks.InversionGeometrySettings.BetaCalcType = 2;
                    break;
            }
        }
        private void CheckBoxOnlyLayers_Checked(object sender, RoutedEventArgs e)
        {
            if (CheckBoxOnlyLayers.IsChecked == true)
                Tasks.InversionGeometrySettings.OnlyLayers = 1;
            else
                Tasks.InversionGeometrySettings.OnlyLayers = 0;
        }
        private void DataGridEmbryos_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Delete)
            {
                
            }
        }
        private void DataGridEmbryos_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Delete)
            {
                if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected >= inverseSystem.inversionAreas.Count)
                    return;

                List<int> keys = new List<int>();
                foreach (var item in DataGridEmbryos.SelectedItems)
                    keys.Add(((KeyValuePair<int, Inversion.InversionEmbryo>)item).Key);

                foreach (int key in keys)
                    if (inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos.ContainsKey(key))
                        inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos.Remove(key);
                DataGridEmbryos.Items.Refresh();

                inverseSystem.inversionAreas[tmpInversionAreaSelected].ValidateEmbryos();
                inverseSystem.inversionAreas[tmpInversionAreaSelected].RefreshEmbryosNumbers();                
            }
        }
        private void DataGridInversionLinesY_KeyDown(object sender, KeyEventArgs e)
        {

        }
        private void DataGridInversionLinesY_KeyUp(object sender, KeyEventArgs e)
        {
            /*
            if (e.Key == Key.Delete)
            {
                if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected >= inverseSystem.inversionAreas.Count)
                    return;
                if (tmpInversionPlaneSelected < 0 || tmpInversionPlaneSelected >= inverseSystem.inversionAreas[tmpInversionAreaSelected].planes.Count)
                    return;

                List<int> keys = new List<int>();
                foreach (var item in DataGridInversionLinesY.SelectedItems)
                    keys.Add(inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[tmpInversionPlaneSelected].linesY.IndexOf((Inversion.InversionLine)item));
                inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[tmpInversionPlaneSelected].RemoveLines(Inversion.DirectionTypes.Y, keys);
                DataGridEmbryos.Items.Refresh();

                inverseSystem.inversionAreas[tmpInversionAreaSelected].ValidateEmbryos();
            }
            */
        }
        private void DataGridInversionLinesX_KeyDown(object sender, KeyEventArgs e)
        {

        }
        private void DataGridInversionLinesX_KeyUp(object sender, KeyEventArgs e)
        {
            /*
            if (e.Key == Key.Delete)
            {
                if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected >= inverseSystem.inversionAreas.Count)
                    return;
                if (tmpInversionPlaneSelected < 0 || tmpInversionPlaneSelected >= inverseSystem.inversionAreas[tmpInversionAreaSelected].planes.Count)
                    return;

                List<int> keys = new List<int>();
                foreach (var item in DataGridInversionLinesX.SelectedItems)
                    keys.Add(inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[tmpInversionPlaneSelected].linesX.IndexOf((Inversion.InversionLine)item));
                inverseSystem.inversionAreas[tmpInversionAreaSelected].planes[tmpInversionPlaneSelected].RemoveLines(Inversion.DirectionTypes.X, keys);
                DataGridEmbryos.Items.Refresh();

                inverseSystem.inversionAreas[tmpInversionAreaSelected].ValidateEmbryos();
            }
            */
        }

        //=========================================================================================== Inversion results
        private void ChangeResultsPlane(int ind)
        {
            tmpInversionResultsPlaneSelected = ind;
            if (tmpInversionResultsIterationSelected < 0 || tmpInversionResultsIterationSelected >= inverseSystem.inversionResults.iterationResults.Count)
                return;

            inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.Highlighted = false;

            if (ind >= 0 && ind < inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.planes.Count)
            {
                if (tmpInversionResultsIterationSelected >= 0 || tmpInversionResultsIterationSelected < inverseSystem.inversionResults.iterationResults.Count)
                {
                    DataGridInversionResultsLinesX.ItemsSource = inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.planes[ind].linesX;
                    DataGridInversionResultsLinesY.ItemsSource = inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.planes[ind].linesY;
                }
                foreach (Geology.Inversion.InversionPlane plane in DataGridInversionResultsPlanes.SelectedItems)
                {
                    plane.Highlighted = true;
                }
            }
            else
            {
                DataGridInversionResultsLinesX.ItemsSource = null;
                DataGridInversionResultsLinesY.ItemsSource = null;
                DataGridInversionResultsLinesX.Items.Refresh();
                DataGridInversionResultsLinesX.Items.Refresh();
            }

            //DataGridInversionResultsPlanes.SelectedIndex = tmpInversionResultsPlaneSelected;
            UpdateAllView();
        }
        private void ChangeResultsIteration(int ind)
        {
            if (ind >= 0 && ind < inverseSystem.inversionResults.iterationResults.Count)
            {
                DataGridInversionResultsEmbryos.ItemsSource = inverseSystem.inversionResults.iterationResults[ind].area.embryos;
                DataGridInversionResultsPlanes.ItemsSource = inverseSystem.inversionResults.iterationResults[ind].area.planes;

                foreach (var iteration in inverseSystem.inversionResults.iterationResults)
                    iteration.area.Visible = false;

                inverseSystem.inversionResults.iterationResults[ind].area.Visible = true;
                ChangeResultsPlane(-1);
            }
            else
            {
                DataGridInversionResultsEmbryos.ItemsSource = null;
                DataGridInversionResultsPlanes.ItemsSource = null;
                DataGridInversionResultsLinesX.ItemsSource = null;
                DataGridInversionResultsLinesY.ItemsSource = null;
                ChangeResultsPlane(-1);
            }
            tmpInversionResultsIterationSelected = ind;

            UpdateScale();
        }
        private void ButtonInversionResultsLoad_Click(object sender, RoutedEventArgs e)
        {

            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected > inverseSystem.inversionAreas.Count-1)
            {
                MessageBox.Show("Select inversion area", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            int iteration = -1;
            String directory = "";

            if (Utilities.LittleTools.GetPath(ref directory) != 0)
                return;

            Utilities.TextBoxWindow window = new Utilities.TextBoxWindow("Iteration setting", "Please, enter itration number in textbox below");

            window.ShowDialog();

            if (window.DialogResult == true)
            {
                if (int.TryParse(window.Text, out iteration) == false)
                    return;

                inverseSystem.inversionResults.calculationPath = directory;
                inverseSystem.inversionResults.parentArea = inverseSystem.inversionAreas[tmpInversionAreaSelected];
                inverseSystem.inversionResults.LoadIteration(iteration);
            }
        }

        private void ButtonInversionResultsDel_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                int ind = 0;

                if (ListBoxInversionResultsIterations.SelectedItem != null)
                {
                    ind = ListBoxInversionResultsIterations.SelectedIndex;
                    inverseSystem.inversionResults.iterationResults.RemoveAt(ind);
                    if (ind >= inverseSystem.inversionResults.iterationResults.Count)
                        ind = inverseSystem.inversionResults.iterationResults.Count - 1;

                    ListBoxInversionResultsIterations.SelectedIndex = ind;
                }

                //ListBoxInversionResultsIterations.Items.Refresh();

                if (inverseSystem.inversionAreas.Count < 1)
                    ChangeResultsIteration(-1);

                UpdateAllView();
            }
            catch (Exception ex)
            {

            }
        }

        private void DataGridInversionResultsEmbryos_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {

        }

        private void DataGridInversionResultsEmbryos_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {

        }

        private void DataGridInversionResultsEmbryos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (tmpInversionResultsIterationSelected < 0 || tmpInversionResultsIterationSelected > inverseSystem.inversionResults.iterationResults.Count - 1)
                return;

            inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.Highlighted = false;
            foreach (var embryo in DataGridInversionResultsEmbryos.SelectedItems)
                ((KeyValuePair<int, Inversion.InversionEmbryo>)embryo).Value.Highlighted = true;

            UpdateAllView();
        }

        private void DataGridInversionResultsEmbryos_KeyDown(object sender, KeyEventArgs e)
        {

        }

        private void DataGridInversionResultsEmbryos_KeyUp(object sender, KeyEventArgs e)
        {

        }

        private void DataGridInversionResultsPlanes_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (tmpInversionResultsIterationSelected < 0 || tmpInversionResultsIterationSelected > inverseSystem.inversionResults.iterationResults.Count - 1)
                ChangeResultsPlane(-1);
            else
                ChangeResultsPlane(DataGridInversionResultsPlanes.SelectedIndex);
        }

        private void DataGridInversionResultsPlanes_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {

        }

        private void DataGridInversionResultsPlanes_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {

        }

        private void DataGridInversionResultsPlanes_KeyDown(object sender, KeyEventArgs e)
        {

        }

        private void DataGridInversionResultsPlanes_KeyUp(object sender, KeyEventArgs e)
        {

        }

        private void DataGridInversionResultsPlanes_VisibleCheckChanged(object sender, RoutedEventArgs e)
        {
            UpdateAllView();
        }

        private void DataGridInversionResultsLinesX_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (tmpInversionResultsIterationSelected < 0 || tmpInversionResultsIterationSelected > inverseSystem.inversionResults.iterationResults.Count - 1)
                return;
            if (tmpInversionResultsPlaneSelected < 0 || tmpInversionResultsPlaneSelected > inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.planes.Count - 1)
                return;
            inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.planes[tmpInversionResultsPlaneSelected].Highlighted = false;
            foreach (Geology.Inversion.InversionLine line in DataGridInversionResultsLinesX.SelectedItems)
                line.Highlighted = true;
            UpdateAllView();
        }

        private void DataGridInversionResultsLinesX_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {

        }

        private void DataGridInversionResultsLinesX_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {

        }

        private void DataGridInversionResultsLinesX_KeyDown(object sender, KeyEventArgs e)
        {

        }

        private void DataGridInversionResultsLinesX_KeyUp(object sender, KeyEventArgs e)
        {

        }

        private void DataGridInversionResultsLinesX_VisibleCheckChanged(object sender, RoutedEventArgs e)
        {
            UpdateAllView();
        }

        private void DataGridInversionResultsLinesY_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (tmpInversionResultsIterationSelected < 0 || tmpInversionResultsIterationSelected > inverseSystem.inversionResults.iterationResults.Count - 1)
                return;
            if (tmpInversionResultsPlaneSelected < 0 || tmpInversionResultsPlaneSelected > inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.planes.Count - 1)
                return;
            inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.planes[tmpInversionResultsPlaneSelected].Highlighted = false;
            foreach (Geology.Inversion.InversionLine line in DataGridInversionResultsLinesY.SelectedItems)
                line.Highlighted = true;
            UpdateAllView();
        }

        private void DataGridInversionResultsLinesY_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {

        }

        private void DataGridInversionResultsLinesY_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {

        }

        private void DataGridInversionResultsLinesY_KeyDown(object sender, KeyEventArgs e)
        {

        }

        private void DataGridInversionResultsLinesY_KeyUp(object sender, KeyEventArgs e)
        {

        }

        private void DataGridInversionResultsLinesY_VisibleCheckChanged(object sender, RoutedEventArgs e)
        {
            UpdateAllView();
        }

        private void CheckBoxDrawBounds_Checked(object sender, RoutedEventArgs e)
        {
            Observing.ObservingSettings.drawObjectsBounds = (bool)CheckBoxDrawObjectsBounds.IsChecked;
            UpdateAllView();
        }

        private void CheckBoxDrawLayersBoundsChecked(object sender, RoutedEventArgs e)
        {
            Observing.ObservingSettings.drawLayersBounds = (bool)CheckBoxDrawLayersBounds.IsChecked;
            UpdateAllView();
        }

        private void ListBoxInversionResultsIterations_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ChangeResultsIteration(ListBoxInversionResultsIterations.SelectedIndex);
        }

        private void ListBoxInversionResultsIterations_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            ContextMenu m = new ContextMenu();
            if (ListBoxInversionResultsIterations.ContextMenu == null)
                ListBoxInversionResultsIterations.ContextMenu = new System.Windows.Controls.ContextMenu();
            else
                ListBoxInversionResultsIterations.ContextMenu.Items.Clear();

            MenuItem mi = new MenuItem();
            mi.Header = "Move to areas";
            mi.Click += ListBoxInversionResultsIterations_ContextMenuClick;
            ListBoxInversionResultsIterations.ContextMenu.Items.Add(mi);

            mi = new MenuItem();
            mi.Header = "Start influence task";
            mi.Click += ListBoxInversionResultsIterations_ContextMenuClick;
            ListBoxInversionResultsIterations.ContextMenu.Items.Add(mi);

            mi = new MenuItem();
            mi.Header = "Stop influence task";
            mi.Click += ListBoxInversionResultsIterations_ContextMenuClick;
            ListBoxInversionResultsIterations.ContextMenu.Items.Add(mi);

            ListBoxInversionResultsIterations.ContextMenu.IsEnabled = true;
        }

        private void ListBoxInversionResultsIterations_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (ListBoxInversionResultsIterations.ContextMenu != null)
                ListBoxInversionResultsIterations.ContextMenu = null;
        }
        private void ListBoxInversionResultsIterations_ContextMenuClick(Object sender, System.EventArgs e)
        {
            int ind;
            if (tmpInversionResultsIterationSelected < 0 || tmpInversionResultsIterationSelected > inverseSystem.inversionResults.iterationResults.Count - 1)
                return;

            string str = (sender as MenuItem).Header.ToString();

            switch (str)
            {
                case "Move to areas":
                    MoveIterationToAreas();
                    break;
                case "Start influence task":
                    StartTaskInfluenceAsync();
                    break;
                case "Stop influence task":
                    if (influenceTaskNumber < 0 || influenceTaskNumber > inverseSystem.inversionResults.iterationResults.Count - 1)
                        return;
                    FilesWorking.WriteEmptyFile(CalculationsDirectoryInfluence + "/Calculation/Calculations/stop");
                    inverseSystem.inversionResults.iterationResults[influenceTaskNumber].StopInfluenceTask();
                    CalculationsStopInfluence = true;
                    break;
            }

            UpdateAllView();
        }

        private void MoveIterationToAreas()
        {
            try
            {
                if (tmpInversionResultsIterationSelected < 0 || tmpInversionResultsIterationSelected > inverseSystem.inversionResults.iterationResults.Count - 1)
                    return;

                inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.Name = inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].Name;
                inverseSystem.inversionAreas.Add(new Inversion.InversionArea(inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area));
            }
            catch(Exception ex)
            {

            }
        }

        private void ButtonAddImpulse_Click(object sender, RoutedEventArgs e)
        {
            Observing.ImpulseEditWindow.ImpulseEditWindow window = new Observing.ImpulseEditWindow.ImpulseEditWindow(LastCalculationsDirectory);

            window.ShowDialog();

            if (window.DialogResult == true)
            {
                timeInfo.impulses.Add(window.impulse);
            }
        }
        private void ButtonDelImpulse_Click(object sender, RoutedEventArgs e)
        {
            if (ListBoxImpulse.SelectedIndex < 0 || ListBoxImpulse.SelectedIndex >= timeInfo.impulses.Count)
                return;

            int ind = ListBoxImpulse.SelectedIndex;
            timeInfo.impulses.RemoveAt(ind);

            while (ind >= timeInfo.impulses.Count)
                ind--;
            ListBoxImpulse.SelectedIndex = ind;
        }
        private void ButtonEditImpulse_Click(object sender, RoutedEventArgs e)
        {
            if (ListBoxImpulse.SelectedItem == null)
                return;

            Observing.ImpulseEditWindow.ImpulseEditWindow window = new Observing.ImpulseEditWindow.ImpulseEditWindow(LastCalculationsDirectory, (Observing.Impulse)ListBoxImpulse.SelectedItem);

            window.ShowDialog();

            if (window.DialogResult == true)
            {
                timeInfo.impulses[timeInfo.impulses.IndexOf((Observing.Impulse)ListBoxImpulse.SelectedItem)] = window.impulse;
            }
        }
        private void ListBoxImpulse_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Tasks.SPSettings.ImpulseNumber = ListBoxImpulse.SelectedIndex;
        }

        private void ListBoxImpulse_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {

        }

        private void ListBoxImpulses_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {

        }

        private void CheckBoxUseLoadedImpulse_Checked(object sender, RoutedEventArgs e)
        {
            Tasks.SPSettings.UseLoadedImpulse = (bool)CheckBoxUseLoadedImpulse.IsChecked;
        }
        private void CheckBoxCurvedMeshSP_Checked(object sender, RoutedEventArgs e)
        {
            Tasks.SPSettings.CurvedMesh = (bool)CheckBoxCurvedMeshSP.IsChecked;
        }

        private void CalculateScaleMinMax(out double minValue, out double maxValue)
        {
            List<double> minValues = new List<double>();
            List<double> maxValues = new List<double>();
            double field, field2;

            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteObjects == true)
            {
                if (objects.Count > 0)
                {
                    minValue = double.MaxValue;
                    maxValue = -double.MaxValue;
                    foreach (var obj in objects)
                    {
                        if (obj.Field(out field) == true)
                        {
                            if (minValue > field) minValue = field;
                            if (maxValue < field) maxValue = field;
                        }
                    }
                    minValues.Add(minValue);
                    maxValues.Add(maxValue);
                }
            }

            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteLayers == true)
            {
                if (layers.Count > 0)
                {
                    minValue = double.MaxValue;
                    maxValue = -double.MaxValue;
                    foreach (var lay in layers)
                    {
                        if (lay.Field(out field) == true)
                        {
                            if (minValue > field) minValue = field;
                            if (maxValue < field) maxValue = field;
                        }
                    }
                    minValues.Add(minValue);
                    maxValues.Add(maxValue);
                }
            }

            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteInversionModel == true)
            {
                if (tmpInversionAreaSelected >= 0 && tmpInversionAreaSelected < inverseSystem.inversionAreas.Count)
                {
                    if (inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos.Count > 0)
                    {
                        minValue = double.MaxValue;
                        maxValue = -double.MaxValue;
                        foreach (var embryo in inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos)
                        {
                            if (embryo.Value.Field(out field) == true)
                            {
                                if (minValue > field) minValue = field;
                                if (maxValue < field) maxValue = field;
                            }
                        }
                        minValues.Add(minValue);
                        maxValues.Add(maxValue);
                    }
                }
            }

            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteInversionResult == true)
            {
                if (tmpInversionResultsIterationSelected >= 0 && tmpInversionResultsIterationSelected < inverseSystem.inversionResults.iterationResults.Count)
                {
                    if (inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.embryos.Count > 0)
                    {
                        minValue = double.MaxValue;
                        maxValue = -double.MaxValue;
                        foreach (var embryo in inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.embryos)
                        {
                            if (embryo.Value.Field(out field) == true)
                            {
                                if (minValue > field) minValue = field;
                                if (maxValue < field) maxValue = field;
                            }
                        }
                        minValues.Add(minValue);
                        maxValues.Add(maxValue);
                    }
                }
            }

            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteMesh == true)
            {

                if (postProcessingSystem.MeshSelected >= 0 && postProcessingSystem.MeshSelected < postProcessingSystem.meshes.Count)
                    if (postProcessingSystem.meshes[postProcessingSystem.MeshSelected].GetMinMaxField(out minValue, out maxValue) == true)
                    {
                        minValues.Add(minValue);
                        maxValues.Add(maxValue);
                    }
            }
            
            if (minValues.Count == 0 || maxValues.Count == 0 || minValues.Count != maxValues.Count)
            {
                minValue = maxValue = 0.0;
                return;
            }

            minValue = double.MaxValue;
            maxValue = -double.MaxValue;
            foreach (double min in minValues)
                if (minValue > min) minValue = min;
            foreach (double max in maxValues)
                if (maxValue < max) maxValue = max;
        }
        private void UpdatePaletteColors()
        {
            double field;
            if (PostProcessing.PostProcessingSystemSettings.currentPalette < 0 || PostProcessing.PostProcessingSystemSettings.currentPalette >= postProcessingSystem.palettes.Count)
                return;

            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteObjects == true)
                foreach (var obj in objects)
                    if (obj.Field(out field) == true)
                        obj.PaletteColor = postProcessingSystem.palettes[PostProcessing.PostProcessingSystemSettings.currentPalette].GetColorSystem(field);
                    else
                        obj.PaletteColor = postProcessingSystem.palettes[PostProcessing.PostProcessingSystemSettings.currentPalette].LowerColorSystem;

            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteLayers == true)
                foreach (var lay in layers)
                    if (lay.Field(out field) == true)
                        lay.PaletteColor = postProcessingSystem.palettes[PostProcessing.PostProcessingSystemSettings.currentPalette].GetColorSystem(field);
                    else
                        lay.PaletteColor = postProcessingSystem.palettes[PostProcessing.PostProcessingSystemSettings.currentPalette].LowerColorSystem;

            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteInversionModel == true)
                if (tmpInversionAreaSelected >= 0 && tmpInversionAreaSelected < inverseSystem.inversionAreas.Count)
                    if (inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos.Count > 0)
                        foreach (var embryo in inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos)
                            if (embryo.Value.Field(out field) == true)
                                embryo.Value.PaletteColor = postProcessingSystem.palettes[PostProcessing.PostProcessingSystemSettings.currentPalette].GetColorSystem(field);
                            else
                                embryo.Value.PaletteColor = postProcessingSystem.palettes[PostProcessing.PostProcessingSystemSettings.currentPalette].LowerColorSystem;

            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteInversionResult == true)
                if (tmpInversionResultsIterationSelected >= 0 && tmpInversionResultsIterationSelected < inverseSystem.inversionResults.iterationResults.Count)
                    if (inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.embryos.Count > 0)
                        foreach (var embryo in inverseSystem.inversionResults.iterationResults[tmpInversionResultsIterationSelected].area.embryos)
                            if (embryo.Value.Field(out field) == true)
                                embryo.Value.PaletteColor = postProcessingSystem.palettes[PostProcessing.PostProcessingSystemSettings.currentPalette].GetColorSystem(field);
                            else
                                embryo.Value.PaletteColor = postProcessingSystem.palettes[PostProcessing.PostProcessingSystemSettings.currentPalette].LowerColorSystem;

            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteMesh == true)
            {
                if (postProcessingSystem.MeshSelected >= 0 && postProcessingSystem.MeshSelected < postProcessingSystem.meshes.Count)
                {
                    if (PostProcessing.PostProcessingSystemSettings.currentPalette >= 0 && PostProcessing.PostProcessingSystemSettings.currentPalette < postProcessingSystem.palettes.Count)
                    {
                        postProcessingSystem.meshes[postProcessingSystem.MeshSelected].SetColors(postProcessingSystem.palettes[PostProcessing.PostProcessingSystemSettings.currentPalette]);
                    }
                }
            }
        }
        private void UpdateScale()
        {
            if (PostProcessing.PostProcessingSystemSettings.usePaletteDrawing == false)
                return;
            double minValue, maxValue;
            CalculateScaleMinMax(out minValue, out maxValue);

            postProcessingSystem.UpdateScale(minValue, maxValue);

            UpdatePaletteColors();
            UpdateAllView();
        }

        private void ComboBoxFieldType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            PostProcessing.PostProcessingSystemSettings.currentFieldType = (PostProcessing.FieldTypes)ComboBoxFieldType.SelectedItem;
            UpdateScale();
        }
        private void CheckBoxLayers_Checked(object sender, RoutedEventArgs e)
        {
            PostProcessing.PostProcessingSystemSettings.drawWithPaletteLayers = (bool)CheckBoxLayers.IsChecked;
            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteLayers == true)
                CheckBoxAuto.IsChecked = false;
            UpdateScale();
        }
        private void CheckBoxObjects_Checked(object sender, RoutedEventArgs e)
        {
            PostProcessing.PostProcessingSystemSettings.drawWithPaletteObjects = (bool)CheckBoxObjects.IsChecked;
            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteObjects == true)
                CheckBoxAuto.IsChecked = false;
            UpdateScale();
        }
        private void CheckBoxInversionModel_Checked(object sender, RoutedEventArgs e)
        {
            PostProcessing.PostProcessingSystemSettings.drawWithPaletteInversionModel = (bool)CheckBoxInversionModel.IsChecked;
            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteInversionModel == true)
                CheckBoxAuto.IsChecked = false;
            UpdateScale();
        }
        private void CheckBoxInversionResult_Checked(object sender, RoutedEventArgs e)
        {
            PostProcessing.PostProcessingSystemSettings.drawWithPaletteInversionResult = (bool)CheckBoxInversionResult.IsChecked;
            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteInversionResult == true)
                CheckBoxAuto.IsChecked = false;
            UpdateScale();
        }
        private void CheckBoxMesh_Checked(object sender, RoutedEventArgs e)
        {
            PostProcessing.PostProcessingSystemSettings.drawWithPaletteMesh = (bool)CheckBoxMesh.IsChecked;
            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteMesh == true)
                CheckBoxAuto.IsChecked = false;
            UpdateScale();
        }
        private void CheckBoxAuto_Checked(object sender, RoutedEventArgs e)
        {
            PostProcessing.PostProcessingSystemSettings.drawWithPaletteAuto = (bool)CheckBoxAuto.IsChecked;

            if (PostProcessing.PostProcessingSystemSettings.drawWithPaletteAuto == true)
            {
                CheckBoxLayers.IsChecked = false;
                PostProcessing.PostProcessingSystemSettings.drawWithPaletteLayers = false;
                PostProcessing.PostProcessingSystemSettings.drawWithPaletteObjects = false;
                PostProcessing.PostProcessingSystemSettings.drawWithPaletteInversionModel = false;
                PostProcessing.PostProcessingSystemSettings.drawWithPaletteInversionResult = false;
                PostProcessing.PostProcessingSystemSettings.drawWithPaletteMesh = false;
            }
            UpdateScale();
        }

        private void ButtonUpdatepalette_Click(object sender, RoutedEventArgs e)
        {
            UpdateScale();
        }

        private void CheckBoxInversionCellBinaryResultsExp_Checked(object sender, RoutedEventArgs e)
        {
            Tasks.InversionCellSettings.BinaryResultsExp = (bool)CheckBoxInversionCellBinaryResultsExp.IsChecked;
        }

        private void CheckBoxInversionGeometryBinaryResultsExp_Checked(object sender, RoutedEventArgs e)
        {
            Tasks.InversionGeometrySettings.BinaryResultsExp = (bool)CheckBoxInversionGeometryBinaryResultsExp.IsChecked;
        }

        private void TextBoxHx_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxHx.Text, ref Tasks.InversionGeometrySettings.hx);
                return;
                if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected >= inverseSystem.inversionAreas.Count)
                    return;
                if (Utilities.LittleTools.ParseString(TextBoxHx.Text, ref inverseSystem.inversionAreas[tmpInversionAreaSelected].iMesh.hx) == 0)
                    inverseSystem.inversionAreas[tmpInversionAreaSelected].iMesh.Rebuild(layers, inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos, horizon);
            }
        }
        private void TextBoxHx_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxHx.Text, ref Tasks.InversionGeometrySettings.hx);
            return;

            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected >= inverseSystem.inversionAreas.Count)
                return;
            if (Utilities.LittleTools.ParseString(TextBoxHx.Text, ref inverseSystem.inversionAreas[tmpInversionAreaSelected].iMesh.hx) == 0)
                inverseSystem.inversionAreas[tmpInversionAreaSelected].iMesh.Rebuild(layers, inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos, horizon);
        }

        private void TextBoxHy_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxHy.Text, ref Tasks.InversionGeometrySettings.hy);
                return;
                if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected >= inverseSystem.inversionAreas.Count)
                    return;
                if (Utilities.LittleTools.ParseString(TextBoxHy.Text, ref inverseSystem.inversionAreas[tmpInversionAreaSelected].iMesh.hy) == 0)
                    inverseSystem.inversionAreas[tmpInversionAreaSelected].iMesh.Rebuild(layers, inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos, horizon);
            }
        }
        private void TextBoxHy_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxHy.Text, ref Tasks.InversionGeometrySettings.hy);
            return;
            if (tmpInversionAreaSelected < 0 || tmpInversionAreaSelected >= inverseSystem.inversionAreas.Count)
                return;
            if (Utilities.LittleTools.ParseString(TextBoxHy.Text, ref inverseSystem.inversionAreas[tmpInversionAreaSelected].iMesh.hy) == 0)
                inverseSystem.inversionAreas[tmpInversionAreaSelected].iMesh.Rebuild(layers, inverseSystem.inversionAreas[tmpInversionAreaSelected].embryos, horizon);
        }

        private void TextBoxHz_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxHz.Text, ref Tasks.InversionGeometrySettings.hz);
                return;                
            }
        }
        private void TextBoxHz_LostFocus(object sender, RoutedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxHz.Text, ref Tasks.InversionGeometrySettings.hz);
            return;
        }

        private void ComboBoxObjectsConcerning_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Tasks.InversionGeometrySettings.concerningObjectsType = (Meshes.IMesh.ConcerningObjectsTypes)ComboBoxObjectsConcerning.SelectedItem;
        }

        private void ButtonSelectFreeColor_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                GeologyColorDialog colDial = new GeologyColorDialog();
                if (colDial.ShowDialog() == true)
                {
                    Tasks.InversionGeometrySettings.freeColor = colDial.rectGr.commonColorsLocal.BackgroundSelColor;
                    ButtonSelectFreeColor.Background = new SolidColorBrush(colDial.rectGr.commonColorsLocal.BackgroundSelColor);
                    UpdateAllView();
                }
            }
            catch (Exception ex)
            {

            }
        }
        private void ButtonSelectMutualColor_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                GeologyColorDialog colDial = new GeologyColorDialog();
                if (colDial.ShowDialog() == true)
                {
                    Tasks.InversionGeometrySettings.mutualColor = colDial.rectGr.commonColorsLocal.BackgroundSelColor;
                    ButtonSelectMutualColor.Background = new SolidColorBrush(colDial.rectGr.commonColorsLocal.BackgroundSelColor);
                    UpdateAllView();
                }
            }
            catch (Exception ex)
            {

            }
        }

        //================================================================================== Meshes
        private void ButtonMeshLoad_Click(object sender, RoutedEventArgs e)
        {
            if (postProcessingSystem.LoadMesh() != 0)
                MessageBox.Show("Could not load mesh", "Error", MessageBoxButton.OK, MessageBoxImage.Error);

            ListBoxmeshes.Items.Refresh();
            UpdateAllView();
        }

        private void ButtonMeshDel_Click(object sender, RoutedEventArgs e)
        {
            if (ListBoxmeshes.SelectedIndex < 0 || ListBoxmeshes.SelectedIndex >= postProcessingSystem.meshes.Count)
                return;

            int ind = ListBoxmeshes.SelectedIndex;
            postProcessingSystem.meshes.RemoveAt(ind);

            while (ind >= postProcessingSystem.meshes.Count)
                ind--;
            ListBoxmeshes.SelectedIndex = ind;
            postProcessingSystem.MeshSelected = ind;
        }

        private void ListBoxmeshes_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            postProcessingSystem.MeshSelected = ListBoxmeshes.SelectedIndex;
        }

        private void ListBoxmeshes_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {

        }

        private void ListBoxmeshes_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {

        }

        private void CheckBoxMeshDrawSurface_Checked(object sender, RoutedEventArgs e)
        {
            Meshes.FEM.MeshSettings.drawFaces = (bool)CheckBoxMeshDrawSurface.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxMeshDrawEdges_Checked(object sender, RoutedEventArgs e)
        {
            Meshes.FEM.MeshSettings.drawEdges = (bool)CheckBoxMeshDrawEdges.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxMeshDrawNodes_Checked(object sender, RoutedEventArgs e)
        {
            Meshes.FEM.MeshSettings.drawNodes = (bool)CheckBoxMeshDrawNodes.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxMeshDrawCorners_Checked(object sender, RoutedEventArgs e)
        {
            Meshes.FEM.MeshSettings.drawCorners = (bool)CheckBoxMeshDrawCorners.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxMeshDrawMaterialBounds_Checked(object sender, RoutedEventArgs e)
        {
            Meshes.FEM.MeshSettings.drawMaterialBounds = (bool)CheckBoxMeshDrawMaterialBounds.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxMeshSmoothLines_Checked(object sender, RoutedEventArgs e)
        {
            Meshes.FEM.MeshSettings.smooth = (bool)CheckBoxMeshSmoothLines.IsChecked;
            UpdateAllView();
        }
        private void TextBoxMeshPointSize_TextChanged(object sender, TextChangedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMeshPointSize.Text, ref Meshes.FEM.MeshSettings.PointSize);
            UpdateAllView();
        }
        private void TextBoxMeshLineWidth_TextChanged(object sender, TextChangedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMeshLineWidth.Text, ref Meshes.FEM.MeshSettings.lineThickness);
            UpdateAllView();
        }
        private void TextBoxMeshCornerWidth_TextChanged(object sender, TextChangedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMeshCornerWidth.Text, ref Meshes.FEM.MeshSettings.lineCornerThickness);
            UpdateAllView();
        }
        private void TextBoxMeshMaterialWidth_TextChanged(object sender, TextChangedEventArgs e)
        {
            Utilities.LittleTools.ParseString(TextBoxMeshMaterialWidth.Text, ref Meshes.FEM.MeshSettings.lineMaterialThickness);
            UpdateAllView();
        }
        private void ButtonMeshPointColor_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                GeologyColorDialog colDial = new GeologyColorDialog();
                if (colDial.ShowDialog() == true)
                {
                    Meshes.FEM.MeshSettings.pointColor = colDial.rectGr.commonColorsLocal.BackgroundSelColor;
                    ButtonMeshPointColor.Background = new SolidColorBrush(colDial.rectGr.commonColorsLocal.BackgroundSelColor);
                    UpdateAllView();
                }
            }
            catch (Exception ex)
            {

            }
        }
        private void ButtonMeshLineColor_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                GeologyColorDialog colDial = new GeologyColorDialog();
                if (colDial.ShowDialog() == true)
                {
                    Meshes.FEM.MeshSettings.lineColor = colDial.rectGr.commonColorsLocal.BackgroundSelColor;
                    ButtonMeshLineColor.Background = new SolidColorBrush(colDial.rectGr.commonColorsLocal.BackgroundSelColor);
                    UpdateAllView();
                }
            }
            catch (Exception ex)
            {

            }
        }
        private void ButtonMeshCornerColor_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                GeologyColorDialog colDial = new GeologyColorDialog();
                if (colDial.ShowDialog() == true)
                {
                    Meshes.FEM.MeshSettings.lineCornerColor = colDial.rectGr.commonColorsLocal.BackgroundSelColor;
                    ButtonMeshCornerColor.Background = new SolidColorBrush(colDial.rectGr.commonColorsLocal.BackgroundSelColor);
                    UpdateAllView();
                }
            }
            catch (Exception ex)
            {

            }
        }
        private void ButtonMeshMaterialColor_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                GeologyColorDialog colDial = new GeologyColorDialog();
                if (colDial.ShowDialog() == true)
                {
                    Meshes.FEM.MeshSettings.lineMaterialColor = colDial.rectGr.commonColorsLocal.BackgroundSelColor;
                    ButtonMeshMaterialColor.Background = new SolidColorBrush(colDial.rectGr.commonColorsLocal.BackgroundSelColor);
                    UpdateAllView();
                }
            }
            catch (Exception ex)
            {

            }
        }

        
        private void ButtonSectionAdd_Click(object sender, RoutedEventArgs e)
        {
            double X, Y, Z, NX, NY, NZ;

            if (double.TryParse(TextBoxSectionX.Text, out X) != true) return;
            if (double.TryParse(TextBoxSectionY.Text, out Y) != true) return;
            if (double.TryParse(TextBoxSectionZ.Text, out Z) != true) return;
            if (double.TryParse(TextBoxSectionNX.Text, out NX) != true) return;
            if (double.TryParse(TextBoxSectionNY.Text, out NY) != true) return;
            if (double.TryParse(TextBoxSectionNZ.Text, out NZ) != true) return;

            postProcessingSystem.AddSection(X, Y, Z, NX, NY, NZ, TextBoxSectionName.Text);
            postProcessingSystem.CutMesh();
            UpdateAllView();
        }
        private void ButtonSectionDel_Click(object sender, RoutedEventArgs e)
        {
            postProcessingSystem.DeleteSection(DataGridSections.SelectedIndex);
            postProcessingSystem.CutMesh();
            UpdateAllView();
        }
        private void ButtonSectionSave_Click(object sender, RoutedEventArgs e)
        {
            double X, Y, Z, NX, NY, NZ;

            if (double.TryParse(TextBoxSectionX.Text, out X) != true) return;
            if (double.TryParse(TextBoxSectionY.Text, out Y) != true) return;
            if (double.TryParse(TextBoxSectionZ.Text, out Z) != true) return;
            if (double.TryParse(TextBoxSectionNX.Text, out NX) != true) return;
            if (double.TryParse(TextBoxSectionNY.Text, out NY) != true) return;
            if (double.TryParse(TextBoxSectionNZ.Text, out NZ) != true) return;

            postProcessingSystem.SaveSection(DataGridSections.SelectedIndex, X, Y, Z, NX, NY, NZ, TextBoxSectionName.Text);
            postProcessingSystem.CutMesh();
            UpdateAllView();
        }
        private void DataGridSections_ActiveCheckChanged(object sender, RoutedEventArgs e)
        {
            postProcessingSystem.CutMesh();
            UpdateAllView();
        }
        private void DataGridSections_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            double X, Y, Z, NX, NY, NZ;
            String name;

            postProcessingSystem.GetSection(DataGridSections.SelectedIndex, out X, out Y, out Z, out NX, out NY, out NZ, out name);

            TextBoxSectionName.Text = name;
            TextBoxSectionX.Text = X.ToString();
            TextBoxSectionY.Text = Y.ToString();
            TextBoxSectionZ.Text = Z.ToString();
            TextBoxSectionNX.Text = NX.ToString();
            TextBoxSectionNY.Text = NY.ToString();
            TextBoxSectionNZ.Text = NZ.ToString();
        }

        private void DGHexObject_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            if (DGObjects.SelectedIndex != -1)
            {
                
                UpdateAllView();

            }
        }

        private void ButtonLoadNormalField_Click(object sender, RoutedEventArgs e)
        {
            StatusBarLeft.Text = "Loading normal fields ...";
            if (observingSystem.LoadNormalFields(out observingSystem.pathToNormalField) != 0)
                MessageBox.Show("Could not load data", "Error", MessageBoxButton.OK, MessageBoxImage.Error);


            (LabelPathToNormalField.Content as TextBlock).Text = observingSystem.pathToNormalField;
            StatusBarLeft.Text = "Ready ...";
        }

        private void CheckBoxRenumberGroups_Checked(object sender, RoutedEventArgs e)
        {

        }

        private void ButtonEditMeshes_Click(object sender, RoutedEventArgs e)
        {
            Inversion.ReliefFitMeshesEditWindow window = new Inversion.ReliefFitMeshesEditWindow(layers);
            window.ShowDialog();
        }

        private void CheckBoxFitRelief_Checked(object sender, RoutedEventArgs e)
        {
            Tasks.InversionGeometrySettings.FitRelief = (bool)CheckBoxFitRelief.IsChecked;
        }

        private void CheckBoxApparentRho_Checked(object sender, RoutedEventArgs e)
        {
            Tasks.InversionGeometrySettings.ApparentRho = (bool)CheckBoxApparentRho.IsChecked;

            TextBoxRhoGeneratorCoefficient.IsEnabled = Tasks.InversionGeometrySettings.ApparentRho;
            TextBoxRhoRhoCoefficient.IsEnabled = Tasks.InversionGeometrySettings.ApparentRho;
        }

        private void TextBoxRhoGeneratorCoefficient_LostFocus(object sender, RoutedEventArgs e)
        {

            Utilities.LittleTools.ParseString(TextBoxRhoGeneratorCoefficient.Text, ref Tasks.InversionGeometrySettings.RhoGeneratorCoefficient);
            return;
        }

        private void TextBoxRhoGeneratorCoefficient_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxRhoGeneratorCoefficient.Text, ref Tasks.InversionGeometrySettings.RhoGeneratorCoefficient);
                return;
            }
        }

        private void TextBoxRhoRhoCoefficient_LostFocus(object sender, RoutedEventArgs e)
        {

            Utilities.LittleTools.ParseString(TextBoxRhoRhoCoefficient.Text, ref Tasks.InversionGeometrySettings.RhoRhoCoefficient);
            return;
        }

        private void TextBoxRhoRhoCoefficient_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxRhoRhoCoefficient.Text, ref Tasks.InversionGeometrySettings.RhoRhoCoefficient);
                return;
            }
        }

        private void ButtonUnloadCurves_Click(object sender, RoutedEventArgs e)
        {
            String path = Utilities.LittleTools.GetPath(LastSaveOpenDirectory);
            if (observingSystem.WriteTelgraphCurvesResultsExp(path) == 0)
                LastSaveOpenDirectory = path;
        }

        private void DataGridGroups_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (e.RightButton == MouseButtonState.Released)
            {
                ContextMenu m = new ContextMenu();
                if (DataGridGroups.ContextMenu == null)
                    DataGridGroups.ContextMenu = new System.Windows.Controls.ContextMenu();
                else
                    DataGridGroups.ContextMenu.Items.Clear();
                MenuItem mi = new MenuItem();
                mi.Header = "All active";
                mi.Click += DataGridGroups_ContextMenuClick;
                DataGridGroups.ContextMenu.Items.Add(mi);
                mi = new MenuItem();
                mi.Header = "All inactive";
                mi.Click += DataGridGroups_ContextMenuClick;
                DataGridGroups.ContextMenu.Items.Add(mi);
                mi = new MenuItem();
                mi.Header = "All active toggle";
                mi.Click += DataGridGroups_ContextMenuClick;
                DataGridGroups.ContextMenu.Items.Add(mi);

                DependencyObject dep = (DependencyObject)e.OriginalSource;

                while ((dep != null) && !(dep is DataGridRow))
                {
                    dep = VisualTreeHelper.GetParent(dep);
                }

                if (dep == null)
                    return;


                if (dep is DataGridRow && DataGridGroups.SelectedItem != null)
                {
                    DataGridGroups.ContextMenu.Items.Add(new Separator());
                    tmpRowIndex = (dep as DataGridRow).GetIndex();
                    DataGridGroups.ContextMenu.Items.Add(new Separator());

                    mi = new MenuItem();
                    mi.Header = "Active";
                    mi.Click += DataGridGroups_ContextMenuClick;
                    DataGridGroups.ContextMenu.Items.Add(mi);
                    mi = new MenuItem();
                    mi.Header = "Inactive";
                    mi.Click += DataGridGroups_ContextMenuClick;
                    DataGridGroups.ContextMenu.Items.Add(mi);
                    mi = new MenuItem();
                    mi.Header = "Toggle active";
                    mi.Click += DataGridGroups_ContextMenuClick;
                    DataGridGroups.ContextMenu.Items.Add(mi);
                }

                DataGridGroups.ContextMenu.IsEnabled = true;

            }

        }
        private void DataGridGroups_ContextMenuClick(Object sender, System.EventArgs e)
        {
            try
            {
                string str = (sender as MenuItem).Header.ToString();
                switch (str)
                {
                    case "All active":
                        ActiveGroupsSet(SelectionApplicationModifiers.All, CheckBoxSwitchType.On);
                        DataGridGroups.Items.Refresh();
                        break;
                    case "All inactive":
                        ActiveGroupsSet(SelectionApplicationModifiers.All, CheckBoxSwitchType.Off);
                        DataGridGroups.Items.Refresh();
                        break;
                    case "All active toggle":
                        ActiveGroupsSet(SelectionApplicationModifiers.All, CheckBoxSwitchType.Toggle);
                        DataGridGroups.Items.Refresh();
                        break;
                    case "Active":
                        ActiveGroupsSet(SelectionApplicationModifiers.Selected, CheckBoxSwitchType.On);
                        DataGridGroups.Items.Refresh();
                        break;
                    case "Inactive":
                        ActiveGroupsSet(SelectionApplicationModifiers.Selected, CheckBoxSwitchType.Off);
                        DataGridGroups.Items.Refresh();
                        break;
                    case "Toggle active":
                        ActiveGroupsSet(SelectionApplicationModifiers.Selected, CheckBoxSwitchType.Toggle);
                        DataGridGroups.Items.Refresh();
                        break;
                }

                UpdateAllView();
            }
            catch (Exception ex)
            {
                UpdateAllView();
            }
        }
        private void ActiveGroupsSet(SelectionApplicationModifiers selection, CheckBoxSwitchType action)
        {
            Grouping.Group g;
            switch (selection)
            {
                case SelectionApplicationModifiers.All:
                    switch (action)
                    {
                        case CheckBoxSwitchType.On:
                            foreach (var group in observingSystem.groups)
                                group.Active = true;
                            break;
                        case CheckBoxSwitchType.Off:
                            foreach (var group in observingSystem.groups)
                                group.Active = false;
                            break;
                        case CheckBoxSwitchType.Toggle:
                            foreach (var group in observingSystem.groups)
                                group.Active = !group.Active;
                            break;
                    }
                    break;
                case SelectionApplicationModifiers.Selected:
                    switch (action)
                    {
                        case CheckBoxSwitchType.On:
                            foreach (var item in DataGridGroups.SelectedItems)
                            {
                                g = (Grouping.Group)item;
                                g.Active = true;
                            }
                            break;
                        case CheckBoxSwitchType.Off:
                            foreach (var item in DataGridGroups.SelectedItems)
                            {
                                g = (Grouping.Group)item;
                                g.Active = false;
                            }
                            break;
                        case CheckBoxSwitchType.Toggle:
                            foreach (var item in DataGridGroups.SelectedItems)
                            {
                                g = (Grouping.Group)item;
                                g.Active = !g.Active;
                            }
                            break;
                    }
                    break;
            }
        }

        private void EditFitClick(object sender, RoutedEventArgs e)
        {
            int ind;
            ind = DGLayers.SelectedIndex;
            if (ind < 0)
                return;
            if (ind >= layers.Count)
                return;

            layers[ind].EditInversionParameter();
        }

        private void DGStacksSelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }
        private void MouseDownDGStacks(object sender, MouseButtonEventArgs e)
        {
            if (DGStacks.SelectedItem == null)
                return;

            int ind = DGStacks.SelectedIndex;
           
            if (sender != null)
            {
                Objects.SaturationVolumeEditWindow window = new SaturationVolumeEditWindow(stacks[ind], layers.Count, observingSystem, stacks, ind, objects);
                window.ShowDialog();
                if (window.DialogResult == true)
                {
                    stacks[ind] = window.volumeStack;
                    UpdateAllView();
                }
            }
        }

        private void BAddStack(object sender, RoutedEventArgs e)
        {
            AddStack();
        }

        private void BDelStack(object sender, RoutedEventArgs e)
        {
            DelStack(DGStacks.SelectedIndex);
        }

        private void BCpyStack(object sender, RoutedEventArgs e)
        {
            CpyStack(DGStacks.SelectedIndex);
        }
        void OnSaturationVolumeStacksChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            RenumberStacks();
        }
        private void RenumberStacks()
        {
            for (int i = 0; i < stacks.Count; i++)
                stacks[i].Number = i + 1;
        }
        public void AddStack()
        {
            stacks.Add(new Objects.SaturationModel.SaturationVolumeStack());
        }
        public void CpyStack(int index)
        {
            if (index < 0 || index >= stacks.Count)
                return;

            stacks.Add(new Objects.SaturationModel.SaturationVolumeStack(stacks[index]));
        }
        public void DelStack(int index)
        {
            if (index < 0 || index >= stacks.Count)
                return;

            stacks.RemoveAt(index);
        }

        private void BBuildStacks(object sender, RoutedEventArgs e)
        {
            try
            {
                int status;
                String message;
                if (Objects.SaturationModel.ContourSettings.WriteContoursData(".", out message, stacks, layers) != 0)
                {
                    MessageBox.Show("Could not write contours data\n" + message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                status = Utilities.LittleTools.ExecuteExe("C:\\Geology\\MeshObjContours.exe", "", ".");
                if (status != 0)
                {
                    MessageBox.Show("MeshObjContours.exe returned code " + status.ToString() + "\n", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                if (Objects.SaturationModel.ContourSettings.ReadContoursObjects("ContoursObjects", out message, objects) != 0)
                {
                    MessageBox.Show("Could not read ContoursObjects\n" + message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
            }
            catch(Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void BClearStacks(object sender, RoutedEventArgs e)
        {
            for (int i=0; i<objects.Count; i++)
                if (objects[i].MadeFromContour)
                {
                    objects.RemoveAt(i);
                    i--;
                }
            UpdateAllView();
        }
        private void DGStacks_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (e.RightButton == MouseButtonState.Released)
            {
                ContextMenu m = new ContextMenu();
                if (DGStacks.ContextMenu == null)
                    DGStacks.ContextMenu = new System.Windows.Controls.ContextMenu();
                else
                    DGStacks.ContextMenu.Items.Clear();
                MenuItem mi = new MenuItem();
                mi.Header = "Displace/Rotate";
                mi.Click += DGStacks_ContextMenuClick;
                DGStacks.ContextMenu.Items.Add(mi);

                DGStacks.ContextMenu.IsEnabled = true;
            }
        }
        private void DGStacks_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (DGStacks.ContextMenu != null)
                DGStacks.ContextMenu = null;
        }
        private void DGStacks_ContextMenuClick(Object sender, System.EventArgs e)
        {
            string str = (sender as MenuItem).Header.ToString();
            switch (str)
            {
                case "Displace/Rotate":
                    if (DGStacks.SelectedItems == null)
                        return;

                    double dx, dy, dz, rx, ry, angle;
                    DIsplaceWindow window = new DIsplaceWindow();
                    window.TextBoxDZ.IsEnabled = false;
                    if ((bool)window.ShowDialog())
                    {
                        dx = window.DX;
                        dy = window.DY;
                        dz = window.DZ;
                        rx = window.XR;
                        ry = window.YR;
                        angle = window.Angle;
                        foreach (var stack in DGStacks.SelectedItems)
                            (stack as Objects.SaturationModel.SaturationVolumeStack).RotateAndDisplace(dx, dy, rx, ry, angle);
                    }
                    break;
            }

            UpdateAllView();
        }

        private void CheckBoxModelCutX0_Checked(object sender, RoutedEventArgs e)
        {
            if (modelCollection == null) return;
            modelCollection.CutX0 = (bool)CheckBoxModelCutX0.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxModelCutX1_Checked(object sender, RoutedEventArgs e)
        {
            if (modelCollection == null) return;
            modelCollection.CutX1 = (bool)CheckBoxModelCutX1.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxModelCutY0_Checked(object sender, RoutedEventArgs e)
        {
            if (modelCollection == null) return;
            modelCollection.CutY0 = (bool)CheckBoxModelCutY0.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxModelCutY1_Checked(object sender, RoutedEventArgs e)
        {
            if (modelCollection == null) return;
            modelCollection.CutY1 = (bool)CheckBoxModelCutY1.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxModelCutZ0_Checked(object sender, RoutedEventArgs e)
        {
            if (modelCollection == null) return;
            modelCollection.CutZeta0 = (bool)CheckBoxModelCutZ0.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxModelCutZ1_Checked(object sender, RoutedEventArgs e)
        {
            if (modelCollection == null) return;
            modelCollection.CutZeta1 = (bool)CheckBoxModelCutZ1.IsChecked;
            UpdateAllView();
        }

        private void TextBoxModelCutX0_KeyUp(object sender, KeyEventArgs e)
        {
            double tmp = modelCollection.X0;
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxModelCutX0.Text, ref tmp);
                modelCollection.X0 = tmp;
                UpdateAllView();
            }
        }
        private void TextBoxModelCutX1_KeyUp(object sender, KeyEventArgs e)
        {
            double tmp = modelCollection.X1;
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxModelCutX1.Text, ref tmp);
                modelCollection.X1 = tmp;
                UpdateAllView();
            }
        }
        private void TextBoxModelCutY0_KeyUp(object sender, KeyEventArgs e)
        {
            double tmp = modelCollection.Y0;
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxModelCutY0.Text, ref tmp);
                modelCollection.Y0 = tmp;
                UpdateAllView();
            }
        }
        private void TextBoxModelCutY1_KeyUp(object sender, KeyEventArgs e)
        {
            double tmp = modelCollection.Y1;
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxModelCutY1.Text, ref tmp);
                modelCollection.Y1 = tmp;
                UpdateAllView();
            }
        }
        private void TextBoxModelCutZ0_KeyUp(object sender, KeyEventArgs e)
        {
            double tmp = modelCollection.Zeta0;
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxModelCutZ0.Text, ref tmp);
                modelCollection.Zeta0 = tmp;
                UpdateAllView();
            }
        }
        private void TextBoxModelCutZ1_KeyUp(object sender, KeyEventArgs e)
        {
            double tmp = modelCollection.Zeta1;
            if (e.Key == Key.Enter)
            {
                Utilities.LittleTools.ParseString(TextBoxModelCutZ1.Text, ref tmp);
                modelCollection.Zeta1 = tmp;
                UpdateAllView();
            }
        }

        private void TextBoxModelCutX0_LostFocus(object sender, RoutedEventArgs e)
        {
            double tmp = modelCollection.X0;
            Utilities.LittleTools.ParseString(TextBoxModelCutX0.Text, ref tmp);
            modelCollection.X0 = tmp;
            UpdateAllView();
        }
        private void TextBoxModelCutX1_LostFocus(object sender, RoutedEventArgs e)
        {
            double tmp = modelCollection.X1;
            Utilities.LittleTools.ParseString(TextBoxModelCutX1.Text, ref tmp);
            modelCollection.X1 = tmp;
            UpdateAllView();
        }
        private void TextBoxModelCutY0_LostFocus(object sender, RoutedEventArgs e)
        {
            double tmp = modelCollection.Y0;
            Utilities.LittleTools.ParseString(TextBoxModelCutY0.Text, ref tmp);
            modelCollection.Y0 = tmp;
            UpdateAllView();
        }
        private void TextBoxModelCutY1_LostFocus(object sender, RoutedEventArgs e)
        {
            double tmp = modelCollection.Y1;
            Utilities.LittleTools.ParseString(TextBoxModelCutY1.Text, ref tmp);
            modelCollection.Y1 = tmp;
            UpdateAllView();
        }
        private void TextBoxModelCutZ0_LostFocus(object sender, RoutedEventArgs e)
        {
            double tmp = modelCollection.Zeta0;
            Utilities.LittleTools.ParseString(TextBoxModelCutZ0.Text, ref tmp);
            modelCollection.Zeta0 = tmp;
            UpdateAllView();
        }
        private void TextBoxModelCutZ1_LostFocus(object sender, RoutedEventArgs e)
        {
            double tmp = modelCollection.Zeta1;
            Utilities.LittleTools.ParseString(TextBoxModelCutZ1.Text, ref tmp);
            modelCollection.Zeta1 = tmp;
            UpdateAllView();
        }

        private void ButtonModelLoad_Click(object sender, RoutedEventArgs e)
        {

        }

        private void ButtonModelDel_Click(object sender, RoutedEventArgs e)
        {
            
        }

        private void CheckBoxModelDrawSurface_Checked(object sender, RoutedEventArgs e)
        {
            if (modelCollection == null) return;
            modelCollection.drawingSettings.drawFaces = (bool)CheckBoxModelDrawSurface.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxModelDrawEdges_Checked(object sender, RoutedEventArgs e)
        {
            if (modelCollection == null) return;
            modelCollection.drawingSettings.drawEdges = (bool)CheckBoxModelDrawEdges.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxModelDrawNodes_Checked(object sender, RoutedEventArgs e)
        {
            if (modelCollection == null) return;
            modelCollection.drawingSettings.drawNodes = (bool)CheckBoxModelDrawNodes.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxModelDrawCorners_Checked(object sender, RoutedEventArgs e)
        {
            if (modelCollection == null) return;
            modelCollection.drawingSettings.drawCorners = (bool)CheckBoxModelDrawCorners.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxModelDrawMaterialBounds_Checked(object sender, RoutedEventArgs e)
        {
            if (modelCollection == null) return;
            modelCollection.drawingSettings.drawMaterialBounds = (bool)CheckBoxModelDrawMaterialBounds.IsChecked;
            UpdateAllView();
        }
        private void CheckBoxModelSmoothLines_Checked(object sender, RoutedEventArgs e)
        {
            if (modelCollection == null) return;
            modelCollection.drawingSettings.smooth = (bool)CheckBoxModelSmoothLines.IsChecked;
            UpdateAllView();
        }
        private void TextBoxModelPointSize_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (modelCollection == null) return;
            int tmp = modelCollection.drawingSettings.PointSize;
            Utilities.LittleTools.ParseString(TextBoxModelPointSize.Text, ref tmp);
            modelCollection.drawingSettings.PointSize = tmp;

            UpdateAllView();
        }
        private void TextBoxModelLineWidth_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (modelCollection == null) return;
            int tmp = modelCollection.drawingSettings.lineThickness;
            Utilities.LittleTools.ParseString(TextBoxModelLineWidth.Text, ref tmp);
            modelCollection.drawingSettings.lineThickness = tmp;

            UpdateAllView();
        }
        private void TextBoxModelCornerWidth_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (modelCollection == null) return;
            int tmp = modelCollection.drawingSettings.lineCornerThickness;
            Utilities.LittleTools.ParseString(TextBoxModelCornerWidth.Text, ref tmp);
            modelCollection.drawingSettings.lineCornerThickness = tmp;

            UpdateAllView();
        }
        private void TextBoxModelMaterialWidth_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (modelCollection == null) return;
            int tmp = modelCollection.drawingSettings.lineMaterialThickness;
            Utilities.LittleTools.ParseString(TextBoxModelMaterialWidth.Text, ref tmp);
            modelCollection.drawingSettings.lineMaterialThickness = tmp;

            UpdateAllView();
        }

        private void ButtonModelPointColor_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (Utilities.LittleTools.ShowColorDialog(ref modelCollection.drawingSettings.pointColor))
                    ButtonModelPointColor.Background = new SolidColorBrush(modelCollection.drawingSettings.pointColor);
                UpdateAllView();
            }
            catch (Exception ex)
            {

            }
        }
        private void ButtonModelLineColor_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (Utilities.LittleTools.ShowColorDialog(ref modelCollection.drawingSettings.lineColor))
                    ButtonModelLineColor.Background = new SolidColorBrush(modelCollection.drawingSettings.lineColor);
                UpdateAllView();
            }
            catch (Exception ex)
            {

            }
        }
        private void ButtonModelCornerColor_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (Utilities.LittleTools.ShowColorDialog(ref modelCollection.drawingSettings.lineCornerColor))
                    ButtonModelCornerColor.Background = new SolidColorBrush(modelCollection.drawingSettings.lineCornerColor);
                UpdateAllView();
            }
            catch (Exception ex)
            {

            }
        }
        private void ButtonModelMaterialColor_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (Utilities.LittleTools.ShowColorDialog(ref modelCollection.drawingSettings.lineMaterialColor))
                    ButtoModelhMaterialColor.Background = new SolidColorBrush(modelCollection.drawingSettings.lineMaterialColor);
                UpdateAllView();
            }
            catch (Exception ex)
            {

            }
        }

        private void SetViewModelSettingsToGUI()
        {
            if (modelCollection != null)
            {
                TextBoxModelPointSize.Text = modelCollection.drawingSettings.PointSize.ToString();
                TextBoxModelLineWidth.Text = modelCollection.drawingSettings.lineThickness.ToString();
                TextBoxModelCornerWidth.Text = modelCollection.drawingSettings.lineCornerThickness.ToString();
                TextBoxModelMaterialWidth.Text = modelCollection.drawingSettings.lineMaterialThickness.ToString();

                CheckBoxModelDrawNodes.IsChecked = modelCollection.drawingSettings.drawNodes;
                CheckBoxModelDrawEdges.IsChecked = modelCollection.drawingSettings.drawEdges;
                CheckBoxModelDrawCorners.IsChecked = modelCollection.drawingSettings.drawCorners;
                CheckBoxModelDrawMaterialBounds.IsChecked = modelCollection.drawingSettings.drawMaterialBounds;
                CheckBoxModelDrawSurface.IsChecked = modelCollection.drawingSettings.drawFaces;
                CheckBoxModelSmoothLines.IsChecked = modelCollection.drawingSettings.smooth;

                if (modelCollection.CurrentModel != null)
                {
                    TextBoxModelCutX0.Text = modelCollection.CurrentModel.X0.ToString();
                    TextBoxModelCutX1.Text = modelCollection.CurrentModel.X1.ToString();
                    TextBoxModelCutY0.Text = modelCollection.CurrentModel.Y0.ToString();
                    TextBoxModelCutY1.Text = modelCollection.CurrentModel.Y1.ToString();
                    TextBoxModelCutZ0.Text = modelCollection.CurrentModel.Zeta0.ToString();
                    TextBoxModelCutZ1.Text = modelCollection.CurrentModel.Zeta1.ToString();

                    CheckBoxModelCutX0.IsChecked = modelCollection.CurrentModel.CutX0;
                    CheckBoxModelCutX1.IsChecked = modelCollection.CurrentModel.CutX1;
                    CheckBoxModelCutY0.IsChecked = modelCollection.CurrentModel.CutY0;
                    CheckBoxModelCutY1.IsChecked = modelCollection.CurrentModel.CutY1;
                    CheckBoxModelCutZ0.IsChecked = modelCollection.CurrentModel.CutZeta0;
                    CheckBoxModelCutZ1.IsChecked = modelCollection.CurrentModel.CutZeta1;
                }
                else
                {
                    TextBoxModelCutX0.Text = "0";
                    TextBoxModelCutX1.Text = "0";
                    TextBoxModelCutY0.Text = "0";
                    TextBoxModelCutY1.Text = "0";
                    TextBoxModelCutZ0.Text = "0";
                    TextBoxModelCutZ1.Text = "0";

                    CheckBoxModelCutX0.IsChecked = false;
                    CheckBoxModelCutX1.IsChecked = false;
                    CheckBoxModelCutY0.IsChecked = false;
                    CheckBoxModelCutY1.IsChecked = false;
                    CheckBoxModelCutZ0.IsChecked = false;
                    CheckBoxModelCutZ1.IsChecked = false;
                }
            }
            else
            {
                TextBoxModelPointSize.Text = "3";
                TextBoxModelLineWidth.Text = "1";
                TextBoxModelCornerWidth.Text = "3";
                TextBoxModelMaterialWidth.Text = "3";

                CheckBoxModelDrawNodes.IsChecked = false;
                CheckBoxModelDrawEdges.IsChecked = true;
                CheckBoxModelDrawCorners.IsChecked = true;
                CheckBoxModelDrawMaterialBounds.IsChecked = true;
                CheckBoxModelDrawSurface.IsChecked = true;
                CheckBoxModelSmoothLines.IsChecked = false;

                TextBoxModelCutX0.Text = "0";
                TextBoxModelCutX1.Text = "0";
                TextBoxModelCutY0.Text = "0";
                TextBoxModelCutY1.Text = "0";
                TextBoxModelCutZ0.Text = "0";
                TextBoxModelCutZ1.Text = "0";

                CheckBoxModelCutX0.IsChecked = false;
                CheckBoxModelCutX1.IsChecked = false;
                CheckBoxModelCutY0.IsChecked = false;
                CheckBoxModelCutY1.IsChecked = false;
                CheckBoxModelCutZ0.IsChecked = false;
                CheckBoxModelCutZ1.IsChecked = false;
            }
            
        }
        private void ListBoxModels_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (modelCollection == null) return;
            modelCollection.CurrentModelIndex = ListBoxModels.SelectedIndex;
            SetViewModelSettingsToGUI();

            if (modelCollection.CurrentModel != null)
                View3DWindow.ChangeDrawBox(modelCollection.CurrentModel.boundingBox);
            UpdateAllView();
        }
        private void ListBoxModels_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {

        }
        private void ListBoxModels_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {

        }

        private void ComboBoxModelsCurrentField_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (modelCollection == null) return;
                if (ComboBoxModelsCurrentField.SelectedItem == null) return;

                modelCollection.CurrentFieldType = (PostProcessing.FieldTypes)ComboBoxModelsCurrentField.SelectedItem;
            }
            catch(Exception ex)
            {

            }
        }
        
            
    }
}
